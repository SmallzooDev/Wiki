<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SmallzooDevWiki🧊️</title><link>https://smallzoodev.netlify.app/</link><description>Recent content on SmallzooDevWiki🧊️</description><generator>Hugo</generator><language>en</language><lastBuildDate>Thu, 31 Jul 2025 11:28:36 +0900</lastBuildDate><atom:link href="https://smallzoodev.netlify.app/index.xml" rel="self" type="application/rss+xml"/><item><title>C++ PS 정리 🔄</title><link>https://smallzoodev.netlify.app/_wiki/cpp-ps/</link><pubDate>Thu, 31 Jul 2025 11:28:36 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/cpp-ps/</guid><description>&lt;h1 id="c-ps-1단계-기초-문법-완전정복">C++ PS 1단계: 기초 문법 완전정복&lt;/h1>
&lt;h2 id="-1-입출력-처리">📥 1. 입출력 처리&lt;/h2>
&lt;h3 id="기본-입력">기본 입력&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#include&lt;/span> &lt;span style="color:#6c7086;font-weight:bold;font-style:italic">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span style="color:#6c7086;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#include&lt;/span> &lt;span style="color:#6c7086;font-weight:bold;font-style:italic">&amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#6c7086;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">using&lt;/span> &lt;span style="color:#cba6f7">namespace&lt;/span> std;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 한 줄 입력
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> n;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cin &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> n;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>string s;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cin &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> s; &lt;span style="color:#6c7086;font-style:italic">// 공백 전까지
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>getline(cin, s); &lt;span style="color:#6c7086;font-style:italic">// 한 줄 전체
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> a, b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cin &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 여러 줄 입력
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> arr(n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cin &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> arr[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 배열 한번에 입력
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> numbers(n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#cba6f7">auto&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#89dceb">x&lt;/span> : numbers) cin &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> x;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="빠른-입력-최적화">빠른 입력 (최적화)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 입출력 속도 향상
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>ios_base&lt;span style="color:#89dceb;font-weight:bold">::&lt;/span>sync_with_stdio(&lt;span style="color:#89dceb">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cin.tie(&lt;span style="color:#89dceb">NULL&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cout.tie(&lt;span style="color:#89dceb">NULL&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 버퍼 사용 (매우 빠름)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#6c7086;font-style:italic">#include&lt;/span> &lt;span style="color:#6c7086;font-weight:bold;font-style:italic">&amp;lt;cstdio&amp;gt;&lt;/span>&lt;span style="color:#6c7086;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> n;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>scanf(&lt;span style="color:#a6e3a1">&amp;#34;%d&amp;#34;&lt;/span>, &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">char&lt;/span> s[&lt;span style="color:#fab387">100&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>scanf(&lt;span style="color:#a6e3a1">&amp;#34;%s&amp;#34;&lt;/span>, s);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// C++14 이상에서 범위 기반 입력
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> v(n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#cba6f7">auto&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#89dceb">x&lt;/span> : v) cin &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> x;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="출력-최적화">출력 최적화&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 기본 출력
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> result &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// endl보다 &amp;#39;\n&amp;#39;이 빠름
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39; &amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> b &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39; &amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> c &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 정밀도 설정
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> fixed &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> setprecision(&lt;span style="color:#fab387">10&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#fab387">3.14159265359&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 여러 줄 출력
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// stringstream 활용 (대량 출력)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>stringstream ss;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ss &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> ss.str();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-입출력-주요-함정">🚨 입출력 주요 함정&lt;/h3>
&lt;ul>
&lt;li>&lt;code>endl&lt;/code>은 버퍼를 flush하므로 &lt;code>'\n'&lt;/code>보다 느림&lt;/li>
&lt;li>&lt;code>ios_base::sync_with_stdio(false)&lt;/code> 사용 시 C 스타일 입출력 혼용 불가&lt;/li>
&lt;li>&lt;code>cin.ignore()&lt;/code>로 버퍼에 남은 개행문자 제거 필요한 경우&lt;/li>
&lt;/ul>
&lt;h2 id="-2-문자열string-핵심-메서드">🔤 2. 문자열(string) 핵심 메서드&lt;/h2>
&lt;h3 id="기본-조작">기본 조작&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>string s &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Hello World&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 길이와 인덱싱
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>s.length(); &lt;span style="color:#6c7086;font-style:italic">// 11
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>s.size(); &lt;span style="color:#6c7086;font-style:italic">// 11 (동일)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>s[&lt;span style="color:#fab387">0&lt;/span>]; &lt;span style="color:#6c7086;font-style:italic">// &amp;#39;H&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>s.back(); &lt;span style="color:#6c7086;font-style:italic">// &amp;#39;d&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>s.substr(&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// &amp;#34;ello&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 대소문자 변환
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>transform(s.begin(), s.end(), s.begin(), &lt;span style="color:#89dceb;font-weight:bold">::&lt;/span>toupper); &lt;span style="color:#6c7086;font-style:italic">// 대문자로
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>transform(s.begin(), s.end(), s.begin(), &lt;span style="color:#89dceb;font-weight:bold">::&lt;/span>tolower); &lt;span style="color:#6c7086;font-style:italic">// 소문자로
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 공백 처리 (algorithm 헤더 필요)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 왼쪽 공백 제거
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>s.erase(s.begin(), find_if(s.begin(), s.end(), [](&lt;span style="color:#f38ba8">int&lt;/span> ch) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>isspace(ch);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 오른쪽 공백 제거
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>s.erase(find_if(s.rbegin(), s.rend(), [](&lt;span style="color:#f38ba8">int&lt;/span> ch) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>isspace(ch);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}).base(), s.end());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="검색과-분할">검색과 분할&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>string s &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;hello world hello&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 검색
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>size_t pos &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s.find(&lt;span style="color:#a6e3a1">&amp;#34;world&amp;#34;&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// 6
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">if&lt;/span> (pos &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> string&lt;span style="color:#89dceb;font-weight:bold">::&lt;/span>npos) { &lt;span style="color:#6c7086;font-style:italic">// 찾음
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Found at &amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> pos &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s.find(&lt;span style="color:#a6e3a1">&amp;#34;xyz&amp;#34;&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// string::npos (못 찾음)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pos &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">while&lt;/span> ((pos &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s.find(&lt;span style="color:#a6e3a1">&amp;#34;hello&amp;#34;&lt;/span>, pos)) &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> string&lt;span style="color:#89dceb;font-weight:bold">::&lt;/span>npos) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pos &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 분할과 결합
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>string&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> split(&lt;span style="color:#cba6f7">const&lt;/span> string&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> s, &lt;span style="color:#f38ba8">char&lt;/span> delimiter) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>string&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> tokens;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stringstream &lt;span style="color:#89b4fa">ss&lt;/span>(s);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string token;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (getline(ss, token, delimiter)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tokens.push_back(token);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> tokens;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 치환
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>size_t start_pos &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">while&lt;/span>((start_pos &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s.find(&lt;span style="color:#a6e3a1">&amp;#34;hello&amp;#34;&lt;/span>, start_pos)) &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> string&lt;span style="color:#89dceb;font-weight:bold">::&lt;/span>npos) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s.replace(start_pos, &lt;span style="color:#fab387">5&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#34;hi&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> start_pos &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="판별-메서드">판별 메서드&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 문자 종류 판별
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> all_digits &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> all_of(s.begin(), s.end(), &lt;span style="color:#89dceb;font-weight:bold">::&lt;/span>isdigit);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">bool&lt;/span> all_alpha &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> all_of(s.begin(), s.end(), &lt;span style="color:#89dceb;font-weight:bold">::&lt;/span>isalpha);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">bool&lt;/span> all_alnum &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> all_of(s.begin(), s.end(), &lt;span style="color:#89dceb;font-weight:bold">::&lt;/span>isalnum);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 패턴 판별
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">if&lt;/span> (s.find(&lt;span style="color:#a6e3a1">&amp;#34;he&amp;#34;&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>) { &lt;span style="color:#6c7086;font-style:italic">// startswith
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Starts with &amp;#39;he&amp;#39;&lt;/span>&lt;span style="color:#89b4fa">\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">if&lt;/span> (s.size() &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> s.substr(s.size() &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">2&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;ld&amp;#34;&lt;/span>) { &lt;span style="color:#6c7086;font-style:italic">// endswith
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Ends with &amp;#39;ld&amp;#39;&lt;/span>&lt;span style="color:#89b4fa">\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-문자열-주요-함정">🚨 문자열 주요 함정&lt;/h3>
&lt;ul>
&lt;li>C++의 string은 가변(mutable)&lt;/li>
&lt;li>&lt;code>+&lt;/code> 연산은 새 객체 생성, &lt;code>+=&lt;/code>가 더 효율적&lt;/li>
&lt;li>대량 문자열 연결 시 &lt;code>stringstream&lt;/code> 활용&lt;/li>
&lt;/ul>
&lt;h2 id="-3-벡터vector-핵심-메서드">📋 3. 벡터(vector) 핵심 메서드&lt;/h2>
&lt;h3 id="기본-생성과-조작">기본 생성과 조작&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 생성
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> arr &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> arr2(n, &lt;span style="color:#fab387">0&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// 크기 n, 0으로 초기화
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> matrix(n, vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>(m, &lt;span style="color:#fab387">0&lt;/span>)); &lt;span style="color:#6c7086;font-style:italic">// 2차원 벡터
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 추가와 삭제
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>arr.push_back(&lt;span style="color:#fab387">6&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// 끝에 추가
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>arr.insert(arr.begin(), &lt;span style="color:#fab387">0&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// 맨 앞에 삽입
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>arr.insert(arr.begin() &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">99&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// 인덱스 2에 삽입
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr.pop_back(); &lt;span style="color:#6c7086;font-style:italic">// 마지막 요소 제거
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>arr.erase(arr.begin()); &lt;span style="color:#6c7086;font-style:italic">// 첫 번째 요소 제거
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>arr.erase(arr.begin() &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">2&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// 인덱스 2 제거
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>arr.erase(remove(arr.begin(), arr.end(), &lt;span style="color:#fab387">3&lt;/span>), arr.end()); &lt;span style="color:#6c7086;font-style:italic">// 값 3 모두 제거
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="정렬과-검색">정렬과 검색&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> arr &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 정렬
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>sort(arr.begin(), arr.end()); &lt;span style="color:#6c7086;font-style:italic">// 오름차순
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>sort(arr.begin(), arr.end(), greater&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>()); &lt;span style="color:#6c7086;font-style:italic">// 내림차순
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 커스텀 정렬
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>sort(arr.begin(), arr.end(), [](&lt;span style="color:#f38ba8">int&lt;/span> a, &lt;span style="color:#f38ba8">int&lt;/span> b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> b; &lt;span style="color:#6c7086;font-style:italic">// 내림차순
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 검색
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> it &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> find(arr.begin(), arr.end(), &lt;span style="color:#fab387">4&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">if&lt;/span> (it &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> arr.end()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> index &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> distance(arr.begin(), it); &lt;span style="color:#6c7086;font-style:italic">// 인덱스 구하기
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> cnt &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> count(arr.begin(), arr.end(), &lt;span style="color:#fab387">1&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// 1의 개수
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 이진 탐색 (정렬된 벡터)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">if&lt;/span> (binary_search(arr.begin(), arr.end(), &lt;span style="color:#fab387">4&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Found&lt;/span>&lt;span style="color:#89b4fa">\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="유용한-알고리즘">유용한 알고리즘&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> arr &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 뒤집기
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>reverse(arr.begin(), arr.end());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 회전
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>rotate(arr.begin(), arr.begin() &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">2&lt;/span>, arr.end()); &lt;span style="color:#6c7086;font-style:italic">// 왼쪽으로 2칸
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 순열
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">do&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 현재 순열 처리
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>} &lt;span style="color:#cba6f7">while&lt;/span> (next_permutation(arr.begin(), arr.end()));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 중복 제거
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>sort(arr.begin(), arr.end());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr.erase(unique(arr.begin(), arr.end()), arr.end());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 최대/최소
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> [min_it, max_it] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> minmax_element(arr.begin(), arr.end());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> min_val &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>min_it;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> max_val &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>max_it;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-벡터-주요-함정">🚨 벡터 주요 함정&lt;/h3>
&lt;ul>
&lt;li>&lt;code>vector&amp;lt;bool&amp;gt;&lt;/code>은 특수화되어 있어 주의 필요&lt;/li>
&lt;li>&lt;code>push_back&lt;/code> 시 재할당으로 인한 성능 저하 → &lt;code>reserve()&lt;/code> 활용&lt;/li>
&lt;li>반복자 무효화 주의 (삽입/삭제 시)&lt;/li>
&lt;/ul>
&lt;h2 id="-4-맵map과-셋set-핵심-메서드">📖 4. 맵(map)과 셋(set) 핵심 메서드&lt;/h2>
&lt;h3 id="map-기본-조작">map 기본 조작&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 생성
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>map&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>string, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> m;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>m[&lt;span style="color:#a6e3a1">&amp;#34;apple&amp;#34;&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>m[&lt;span style="color:#a6e3a1">&amp;#34;banana&amp;#34;&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 접근과 수정
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> m[&lt;span style="color:#a6e3a1">&amp;#34;apple&amp;#34;&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>m[&lt;span style="color:#a6e3a1">&amp;#34;cherry&amp;#34;&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">3&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// 새 키-값 추가
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 안전한 접근
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">if&lt;/span> (m.find(&lt;span style="color:#a6e3a1">&amp;#34;grape&amp;#34;&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> m.end()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> m[&lt;span style="color:#a6e3a1">&amp;#34;grape&amp;#34;&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 또는 C++20
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">if&lt;/span> (m.contains(&lt;span style="color:#a6e3a1">&amp;#34;grape&amp;#34;&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> m[&lt;span style="color:#a6e3a1">&amp;#34;grape&amp;#34;&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="조회와-순회">조회와 순회&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>map&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>string, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> m &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {{&lt;span style="color:#a6e3a1">&amp;#34;a&amp;#34;&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>}, {&lt;span style="color:#a6e3a1">&amp;#34;b&amp;#34;&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>}, {&lt;span style="color:#a6e3a1">&amp;#34;c&amp;#34;&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>}};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 순회 (정렬된 순서)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#cba6f7">const&lt;/span> &lt;span style="color:#cba6f7">auto&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> [key, value] &lt;span style="color:#89dceb;font-weight:bold">:&lt;/span> m) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> key &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;: &amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> value &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 키 존재 확인
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">if&lt;/span> (m.count(&lt;span style="color:#a6e3a1">&amp;#34;a&amp;#34;&lt;/span>)) { &lt;span style="color:#6c7086;font-style:italic">// 또는 m.find(&amp;#34;a&amp;#34;) != m.end()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Key exists&lt;/span>&lt;span style="color:#89b4fa">\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 삭제
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>m.erase(&lt;span style="color:#a6e3a1">&amp;#34;b&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="unordered_map-해시맵">unordered_map (해시맵)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// O(1) 평균 시간복잡도
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>unordered_map&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>string, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> um;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>um[&lt;span style="color:#a6e3a1">&amp;#34;apple&amp;#34;&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 커스텀 해시 함수
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">struct&lt;/span> &lt;span style="color:#f9e2af">PairHash&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size_t &lt;span style="color:#89b4fa">operator&lt;/span>()(&lt;span style="color:#cba6f7">const&lt;/span> pair&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> p) &lt;span style="color:#cba6f7">const&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> hash&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>()(p.first) &lt;span style="color:#89dceb;font-weight:bold">^&lt;/span> (hash&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>()(p.second) &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>unordered_map&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>pair&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>, &lt;span style="color:#f38ba8">int&lt;/span>, PairHash&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> coord_map;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="set과-multiset">set과 multiset&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// set: 중복 없는 정렬된 집합
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>set&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> s &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>}; &lt;span style="color:#6c7086;font-style:italic">// {1, 3, 4, 5}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>s.insert(&lt;span style="color:#fab387">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s.erase(&lt;span style="color:#fab387">3&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 범위 검색
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> it1 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s.lower_bound(&lt;span style="color:#fab387">2&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// 2 이상인 첫 원소
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> it2 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s.upper_bound(&lt;span style="color:#fab387">4&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// 4 초과인 첫 원소
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// multiset: 중복 허용
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>multiset&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> ms &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> ms.count(&lt;span style="color:#fab387">3&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// 3
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-mapset-주요-함정">🚨 map/set 주요 함정&lt;/h3>
&lt;ul>
&lt;li>map은 자동 정렬 (O(log n) 연산)&lt;/li>
&lt;li>unordered_map은 해시 충돌 시 성능 저하&lt;/li>
&lt;li>&lt;code>[]&lt;/code> 연산자는 없는 키 접근 시 자동 생성&lt;/li>
&lt;/ul>
&lt;h2 id="-5-기타-stl-컨테이너">🔢 5. 기타 STL 컨테이너&lt;/h2>
&lt;h3 id="queue와-priority_queue">queue와 priority_queue&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 일반 큐
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>queue&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> q;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>q.push(&lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>q.push(&lt;span style="color:#fab387">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> q.front() &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>q.pop();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 우선순위 큐 (최대 힙)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>priority_queue&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> pq;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pq.push(&lt;span style="color:#fab387">3&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pq.push(&lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pq.push(&lt;span style="color:#fab387">4&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> pq.top() &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// 4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 최소 힙
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>priority_queue&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>, vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>, greater&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> min_pq;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 커스텀 비교
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">struct&lt;/span> &lt;span style="color:#f9e2af">Compare&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">bool&lt;/span> &lt;span style="color:#89b4fa">operator&lt;/span>()(&lt;span style="color:#cba6f7">const&lt;/span> pair&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> a, &lt;span style="color:#cba6f7">const&lt;/span> pair&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> a.second &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> b.second; &lt;span style="color:#6c7086;font-style:italic">// second 기준 최소 힙
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>priority_queue&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>pair&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>, vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>pair&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span>, Compare&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> custom_pq;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="stack과-deque">stack과 deque&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 스택
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>stack&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> st;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>st.push(&lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>st.push(&lt;span style="color:#fab387">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> st.top() &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>st.pop();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 덱 (양방향 큐)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>deque&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> dq;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dq.push_back(&lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dq.push_front(&lt;span style="color:#fab387">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dq.pop_back();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dq.pop_front();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-6-조건문과-반복문-고급-활용">🔄 6. 조건문과 반복문 고급 활용&lt;/h2>
&lt;h3 id="조건문-최적화">조건문 최적화&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 삼항 연산자
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> condition &lt;span style="color:#89dceb;font-weight:bold">?&lt;/span> &lt;span style="color:#89dceb">value_if_true&lt;/span> : value_if_false;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// switch 문
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">switch&lt;/span> (value) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> &lt;span style="color:#fab387">1&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 처리
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> &lt;span style="color:#fab387">2&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> &lt;span style="color:#fab387">3&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">:&lt;/span> &lt;span style="color:#6c7086;font-style:italic">// 여러 케이스
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#6c7086;font-style:italic">// 처리
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">default&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 기본 처리
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// C++17 if문 초기화
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">if&lt;/span> (&lt;span style="color:#cba6f7">auto&lt;/span> it &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> m.find(key); it &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> m.end()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// it 사용
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="반복문-패턴">반복문 패턴&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 범위 기반 for문
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> v &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#cba6f7">const&lt;/span> &lt;span style="color:#cba6f7">auto&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#89dceb">x&lt;/span> : v) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39; &amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 인덱스와 함께
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> v.size(); i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;: &amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> v[i] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 역순 반복
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i&lt;span style="color:#89dceb;font-weight:bold">--&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 처리
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// iterator 활용
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#cba6f7">auto&lt;/span> it &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> v.begin(); it &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> v.end(); &lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>it) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>it &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39; &amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-7-함수와-람다-표현식">⚡ 7. 함수와 람다 표현식&lt;/h2>
&lt;h3 id="함수-정의와-활용">함수 정의와 활용&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 기본 함수
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">gcd&lt;/span>(&lt;span style="color:#f38ba8">int&lt;/span> a, &lt;span style="color:#f38ba8">int&lt;/span> b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> temp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> temp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 기본값 매개변수
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">power&lt;/span>(&lt;span style="color:#f38ba8">int&lt;/span> base, &lt;span style="color:#f38ba8">int&lt;/span> exp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">2&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> pow(base, exp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 템플릿 함수
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">template&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#cba6f7">typename&lt;/span> T&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T getMax(T a, T b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> (a &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> b) &lt;span style="color:#89dceb;font-weight:bold">?&lt;/span> &lt;span style="color:#89dceb">a&lt;/span> : b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 가변 인자 (C++11)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">template&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#cba6f7">typename&lt;/span>... Args&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">void&lt;/span> print(Args... args) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ((cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> args &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39; &amp;#39;&lt;/span>), ...);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="람다-표현식">람다 표현식&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 기본 람다
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> square &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [](&lt;span style="color:#f38ba8">int&lt;/span> x) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> x; };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">auto&lt;/span> add &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [](&lt;span style="color:#f38ba8">int&lt;/span> x, &lt;span style="color:#f38ba8">int&lt;/span> y) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> y; };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 정렬에서 람다 활용
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>pair&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>string, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> students &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {{&lt;span style="color:#a6e3a1">&amp;#34;Alice&amp;#34;&lt;/span>, &lt;span style="color:#fab387">85&lt;/span>}, {&lt;span style="color:#a6e3a1">&amp;#34;Bob&amp;#34;&lt;/span>, &lt;span style="color:#fab387">90&lt;/span>}, {&lt;span style="color:#a6e3a1">&amp;#34;Charlie&amp;#34;&lt;/span>, &lt;span style="color:#fab387">78&lt;/span>}};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sort(students.begin(), students.end(), [](&lt;span style="color:#cba6f7">const&lt;/span> &lt;span style="color:#cba6f7">auto&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> a, &lt;span style="color:#cba6f7">const&lt;/span> &lt;span style="color:#cba6f7">auto&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> a.second &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> b.second; &lt;span style="color:#6c7086;font-style:italic">// 점수 내림차순
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 캡처
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> factor &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">auto&lt;/span> multiply &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [factor](&lt;span style="color:#f38ba8">int&lt;/span> x) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> factor; };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// STL 알고리즘과 함께
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> numbers &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>transform(numbers.begin(), numbers.end(), numbers.begin(), 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [](&lt;span style="color:#f38ba8">int&lt;/span> x) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> x; });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> evens;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>copy_if(numbers.begin(), numbers.end(), back_inserter(evens),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [](&lt;span style="color:#f38ba8">int&lt;/span> x) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; });
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="유용한-stl-함수들">유용한 STL 함수들&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 수학 함수
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>abs(&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">5&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// 5
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>min(&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>max({&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>}); &lt;span style="color:#6c7086;font-style:italic">// 3 (initializer_list)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>__gcd(&lt;span style="color:#fab387">12&lt;/span>, &lt;span style="color:#fab387">8&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// 4 (내장 GCD)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 알고리즘 함수
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> v &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> sum &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> accumulate(v.begin(), v.end(), &lt;span style="color:#fab387">0&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// 15
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> all_positive &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> all_of(v.begin(), v.end(), [](&lt;span style="color:#f38ba8">int&lt;/span> x) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">bool&lt;/span> any_even &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> any_of(v.begin(), v.end(), [](&lt;span style="color:#f38ba8">int&lt;/span> x) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; });
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-8-예외처리와-디버깅">🛡️ 8. 예외처리와 디버깅&lt;/h2>
&lt;h3 id="기본-예외처리">기본 예외처리&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">10&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">/&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// 실제로는 정수 나눗셈은 예외 발생 안함
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>} &lt;span style="color:#cba6f7">catch&lt;/span> (&lt;span style="color:#cba6f7">const&lt;/span> exception&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> e) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cerr &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Error: &amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> e.what() &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 사용자 정의 예외
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">class&lt;/span> &lt;span style="color:#f9e2af">CustomException&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">:&lt;/span> &lt;span style="color:#cba6f7">public&lt;/span> exception {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">const&lt;/span> &lt;span style="color:#f38ba8">char&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#89b4fa">what&lt;/span>() &lt;span style="color:#cba6f7">const&lt;/span> &lt;span style="color:#cba6f7">noexcept&lt;/span> &lt;span style="color:#cba6f7">override&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Custom error occurred&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="디버깅-기법">디버깅 기법&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// assert 매크로
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#6c7086;font-style:italic">#include&lt;/span> &lt;span style="color:#6c7086;font-weight:bold;font-style:italic">&amp;lt;cassert&amp;gt;&lt;/span>&lt;span style="color:#6c7086;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>assert(n &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// 조건이 false면 프로그램 중단
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 디버그 출력
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#6c7086;font-style:italic">#ifdef DEBUG
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#6c7086;font-style:italic">#define debug(x) cerr &amp;lt;&amp;lt; #x &amp;lt;&amp;lt; &amp;#34; = &amp;#34; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#else
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#6c7086;font-style:italic">#define debug(x)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 사용
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> value &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">42&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>debug(value); &lt;span style="color:#6c7086;font-style:italic">// DEBUG 정의시: value = 42 출력
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-1단계-핵심-요약">📝 1단계 핵심 요약&lt;/h2>
&lt;h3 id="꼭-기억해야-할-패턴">꼭 기억해야 할 패턴&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>빠른 입출력&lt;/strong>: &lt;code>ios_base::sync_with_stdio(false)&lt;/code>와 &lt;code>'\n'&lt;/code>&lt;/li>
&lt;li>&lt;strong>문자열 처리&lt;/strong>: &lt;code>substr()&lt;/code>, &lt;code>find()&lt;/code>, &lt;code>stringstream&lt;/code>&lt;/li>
&lt;li>&lt;strong>벡터 조작&lt;/strong>: &lt;code>sort()&lt;/code>, &lt;code>unique()&lt;/code>, 범위 기반 for문&lt;/li>
&lt;li>&lt;strong>맵/셋&lt;/strong>: &lt;code>find()&lt;/code>, &lt;code>count()&lt;/code>, unordered 버전&lt;/li>
&lt;li>&lt;strong>STL 알고리즘&lt;/strong>: &lt;code>accumulate()&lt;/code>, &lt;code>transform()&lt;/code>, &lt;code>copy_if()&lt;/code>&lt;/li>
&lt;li>&lt;strong>람다 표현식&lt;/strong>: 정렬과 STL 알고리즘에서 활용&lt;/li>
&lt;/ol>
&lt;h3 id="자주-하는-실수들">자주 하는 실수들&lt;/h3>
&lt;ul>
&lt;li>endl 대신 &amp;lsquo;\n&amp;rsquo; 사용&lt;/li>
&lt;li>벡터 크기 미리 예약 (&lt;code>reserve()&lt;/code>)&lt;/li>
&lt;li>map의 &lt;code>[]&lt;/code> 연산자 자동 생성 주의&lt;/li>
&lt;li>iterator 무효화 주의&lt;/li>
&lt;li>부호 없는 정수형 오버플로우&lt;/li>
&lt;/ul>
&lt;h1 id="c-ps-2단계-다른-언어-개발자를-위한-c-특화-기법">C++ PS 2단계: 다른 언어 개발자를 위한 C++ 특화 기법&lt;/h1>
&lt;h2 id="-1-분기문과-제어문---c만의-특징">🔀 1. 분기문과 제어문 - C++만의 특징&lt;/h2>
&lt;h3 id="조건문의-c스러운-표현">조건문의 C++스러운 표현&lt;/h3>
&lt;h4 id="삼항-연산자-ternary-operator">삼항 연산자 (Ternary Operator)&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 기본 형태
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> condition &lt;span style="color:#89dceb;font-weight:bold">?&lt;/span> &lt;span style="color:#89dceb">value_if_true&lt;/span> : value_if_false;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 실용 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> max_val &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (a &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> b) &lt;span style="color:#89dceb;font-weight:bold">?&lt;/span> &lt;span style="color:#89dceb">a&lt;/span> : b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>string status &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (score &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">60&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">?&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;pass&amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">:&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;fail&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> sign &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (num &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">?&lt;/span> &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">:&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 중첩 삼항 연산자 (가독성 주의)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">char&lt;/span> grade &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (score &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">90&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">?&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;A&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">:&lt;/span> (score &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">80&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">?&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;B&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">:&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;C&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Python과 다른 점: C++는 전통적인 ? : 연산자 사용
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Python: result = value1 if condition else value2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// C++: int result = condition ? value1 : value2;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="조건-평가와-단락-평가-short-circuit-evaluation">조건 평가와 단락 평가 (Short-circuit Evaluation)&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// C++에서 false로 평가되는 값들
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 0, nullptr, false만 false (Python과 다름)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 단락 평가 활용
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">if&lt;/span> (ptr &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> &lt;span style="color:#cba6f7">nullptr&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> ptr&lt;span style="color:#89dceb;font-weight:bold">-&amp;gt;&lt;/span>value &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// ptr이 null이면 뒤는 평가하지 않음
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 기본값 설정 패턴
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>string name &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input_name.empty() &lt;span style="color:#89dceb;font-weight:bold">?&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Anonymous&amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">:&lt;/span> input_name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Python과 다른 점: 빈 컨테이너도 true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> v;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">if&lt;/span> (v.empty()) { &lt;span style="color:#6c7086;font-style:italic">// 명시적으로 empty() 체크 필요
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Empty vector&lt;/span>&lt;span style="color:#89b4fa">\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="constexpr-if-c17">constexpr if (C++17)&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">template&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#cba6f7">typename&lt;/span> T&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">void&lt;/span> process(T value) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89b4fa">constexpr&lt;/span> (is_integral_v&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>T&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Integer: &amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> value &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89b4fa">constexpr&lt;/span> (is_floating_point_v&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>T&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Float: &amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> fixed &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> setprecision(&lt;span style="color:#fab387">2&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> value &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Other type&lt;/span>&lt;span style="color:#89b4fa">\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 컴파일 타임에 분기 결정
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">template&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> N&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">void&lt;/span> print() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89b4fa">constexpr&lt;/span> (N &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">10&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Large number&lt;/span>&lt;span style="color:#89b4fa">\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Small number&lt;/span>&lt;span style="color:#89b4fa">\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="switch-문의-고급-활용">switch 문의 고급 활용&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 기본 switch
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">switch&lt;/span> (status) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> &lt;span style="color:#fab387">200&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;OK&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> &lt;span style="color:#fab387">404&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Not Found&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> &lt;span style="color:#fab387">500&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> &lt;span style="color:#fab387">502&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> &lt;span style="color:#fab387">503&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">:&lt;/span> &lt;span style="color:#6c7086;font-style:italic">// 여러 값 매칭
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Server Error&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">default&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Unknown Status&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// C++17 switch with initialization
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">switch&lt;/span> (&lt;span style="color:#cba6f7">auto&lt;/span> val &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> calculate(); val) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> &lt;span style="color:#fab387">1&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// val 사용 가능
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> &lt;span style="color:#fab387">2&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// enum class와 switch
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">enum&lt;/span> &lt;span style="color:#cba6f7">class&lt;/span> &lt;span style="color:#f9e2af">Color&lt;/span> { Red, Green, Blue };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Color c &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> Color&lt;span style="color:#89dceb;font-weight:bold">::&lt;/span>Red;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">switch&lt;/span> (c) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> Color&lt;span style="color:#89dceb;font-weight:bold">::&lt;/span>&lt;span style="color:#89dceb">Red&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Red&lt;/span>&lt;span style="color:#89b4fa">\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> Color&lt;span style="color:#89dceb;font-weight:bold">::&lt;/span>&lt;span style="color:#89dceb">Green&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Green&lt;/span>&lt;span style="color:#89b4fa">\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> Color&lt;span style="color:#89dceb;font-weight:bold">::&lt;/span>&lt;span style="color:#89dceb">Blue&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Blue&lt;/span>&lt;span style="color:#89b4fa">\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-2-반복문---c의-강력한-이터레이션">🔄 2. 반복문 - C++의 강력한 이터레이션&lt;/h2>
&lt;h3 id="범위-기반-for문-range-based-for-loop">범위 기반 for문 (Range-based for loop)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 기본 사용법
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> v &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89dceb">x&lt;/span> : v) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39; &amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 참조로 받기 (복사 방지)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#cba6f7">const&lt;/span> &lt;span style="color:#cba6f7">auto&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#89dceb">x&lt;/span> : v) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39; &amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 수정하려면 비const 참조
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#cba6f7">auto&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#89dceb">x&lt;/span> : v) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#89dceb;font-weight:bold">*=&lt;/span> &lt;span style="color:#fab387">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 구조화 바인딩 (C++17)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>map&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>string, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> m &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {{&lt;span style="color:#a6e3a1">&amp;#34;Alice&amp;#34;&lt;/span>, &lt;span style="color:#fab387">25&lt;/span>}, {&lt;span style="color:#a6e3a1">&amp;#34;Bob&amp;#34;&lt;/span>, &lt;span style="color:#fab387">30&lt;/span>}};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#cba6f7">const&lt;/span> &lt;span style="color:#cba6f7">auto&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> [name, age] &lt;span style="color:#89dceb;font-weight:bold">:&lt;/span> m) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> name &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34; is &amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> age &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34; years old&lt;/span>&lt;span style="color:#89b4fa">\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 초기화 리스트
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89dceb">x&lt;/span> : {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>}) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39; &amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="전통적인-for문의-다양한-활용">전통적인 for문의 다양한 활용&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 인덱스와 함께
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">for&lt;/span> (size_t i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> v.size(); &lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;: &amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> v[i] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 역순 반복 (부호 없는 정수 주의)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; &lt;span style="color:#89dceb;font-weight:bold">--&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> v[i] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39; &amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 또는 size_t 사용시
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">for&lt;/span> (size_t i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> n; i&lt;span style="color:#89dceb;font-weight:bold">--&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; ) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> v[i] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39; &amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 2차원 배열 순회
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> matrix[&lt;span style="color:#fab387">3&lt;/span>][&lt;span style="color:#fab387">3&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {{&lt;span style="color:#fab387">1&lt;/span>,&lt;span style="color:#fab387">2&lt;/span>,&lt;span style="color:#fab387">3&lt;/span>}, {&lt;span style="color:#fab387">4&lt;/span>,&lt;span style="color:#fab387">5&lt;/span>,&lt;span style="color:#fab387">6&lt;/span>}, {&lt;span style="color:#fab387">7&lt;/span>,&lt;span style="color:#fab387">8&lt;/span>,&lt;span style="color:#fab387">9&lt;/span>}};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#fab387">3&lt;/span>; &lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; j &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#fab387">3&lt;/span>; &lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>j) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> matrix[i][j] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39; &amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 더 C++스러운 방법
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#cba6f7">const&lt;/span> &lt;span style="color:#cba6f7">auto&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#89dceb">row&lt;/span> : matrix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89dceb">cell&lt;/span> : row) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> cell &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39; &amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="반복자iterator-활용">반복자(Iterator) 활용&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 기본 반복자
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> v &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#cba6f7">auto&lt;/span> it &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> v.begin(); it &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> v.end(); &lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>it) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>it &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39; &amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 역방향 반복자
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#cba6f7">auto&lt;/span> it &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> v.rbegin(); it &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> v.rend(); &lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>it) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>it &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39; &amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 반복자 산술
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> v.begin() &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> v.size() &lt;span style="color:#89dceb;font-weight:bold">/&lt;/span> &lt;span style="color:#fab387">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Middle element: &amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>mid &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 거리 계산
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> pos &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> find(v.begin(), v.end(), &lt;span style="color:#fab387">3&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">if&lt;/span> (pos &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> v.end()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Found at index: &amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> distance(v.begin(), pos) &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 반복자 카테고리별 활용
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Random Access Iterator (vector, deque)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>sort(v.begin(), v.end());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Bidirectional Iterator (list, set, map)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>list&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> lst &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>reverse(lst.begin(), lst.end());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-3-템플릿과-제네릭-프로그래밍">🍬 3. 템플릿과 제네릭 프로그래밍&lt;/h2>
&lt;h3 id="함수-템플릿">함수 템플릿&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 기본 함수 템플릿
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">template&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#cba6f7">typename&lt;/span> T&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T getMax(T a, T b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> (a &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> b) &lt;span style="color:#89dceb;font-weight:bold">?&lt;/span> &lt;span style="color:#89dceb">a&lt;/span> : b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 여러 타입 매개변수
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">template&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#cba6f7">typename&lt;/span> T, &lt;span style="color:#cba6f7">typename&lt;/span> U&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">auto&lt;/span> add(T a, U b) &lt;span style="color:#89dceb;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#cba6f7">decltype&lt;/span>(a &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// C++14 이후 (auto 반환 타입)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">template&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#cba6f7">typename&lt;/span> T, &lt;span style="color:#cba6f7">typename&lt;/span> U&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">auto&lt;/span> add(T a, U b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 템플릿 특수화
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">template&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>string getMax&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>string&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>(string a, string b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> (a.length() &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> b.length()) &lt;span style="color:#89dceb;font-weight:bold">?&lt;/span> &lt;span style="color:#89dceb">a&lt;/span> : b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 가변 템플릿 (C++11)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">template&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#cba6f7">typename&lt;/span>... Args&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">void&lt;/span> print(Args... args) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ((cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> args &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39; &amp;#39;&lt;/span>), ...); &lt;span style="color:#6c7086;font-style:italic">// C++17 fold expression
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="클래스-템플릿">클래스 템플릿&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 기본 클래스 템플릿
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">template&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#cba6f7">typename&lt;/span> T&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">class&lt;/span> &lt;span style="color:#f9e2af">Stack&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">private&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>T&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> elements;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">public&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">void&lt;/span> push(&lt;span style="color:#cba6f7">const&lt;/span> T&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> elem) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> elements.push_back(elem);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> T &lt;span style="color:#89b4fa">pop&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> T elem &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> elements.back();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> elements.pop_back();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> elem;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">bool&lt;/span> &lt;span style="color:#89b4fa">empty&lt;/span>() &lt;span style="color:#cba6f7">const&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> elements.empty();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 사용
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>Stack&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> intStack;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Stack&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>string&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> stringStack;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 템플릿 매개변수 추론 (C++17)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>Stack s{&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>}; &lt;span style="color:#6c7086;font-style:italic">// Stack&amp;lt;int&amp;gt;로 추론
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="sfinae와-enable_if">SFINAE와 enable_if&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 정수 타입만 허용하는 함수
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">template&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#cba6f7">typename&lt;/span> T&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">typename&lt;/span> enable_if&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>is_integral&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>T&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;::&lt;/span>value, T&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;::&lt;/span>type
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sum(T a, T b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// C++17 if constexpr로 더 간단하게
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">template&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#cba6f7">typename&lt;/span> T&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T process(T value) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89b4fa">constexpr&lt;/span> (is_integral_v&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>T&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> value &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#fab387">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89b4fa">constexpr&lt;/span> (is_floating_point_v&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>T&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> value &lt;span style="color:#89dceb;font-weight:bold">/&lt;/span> &lt;span style="color:#fab387">2.0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Concepts (C++20)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">template&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#cba6f7">typename&lt;/span> T&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">concept&lt;/span> Numeric &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> is_arithmetic_v&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>T&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">template&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Numeric T&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T multiply(T a, T b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-4-c-특징적인-부분들">🐍 4. C++ 특징적인 부분들&lt;/h2>
&lt;h3 id="포인터와-참조">포인터와 참조&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 포인터
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> ptr &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>ptr &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// 5
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 널 포인터
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> p &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">nullptr&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// C++11, NULL 대신 사용
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 참조
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> ref &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ref &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">10&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// x도 10이 됨
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// const 참조 (임시 객체 바인딩 가능)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">const&lt;/span> &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> cref &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">42&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 포인터 vs 참조
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">void&lt;/span> &lt;span style="color:#89b4fa">by_pointer&lt;/span>(&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> p) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (p) &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>p &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">void&lt;/span> &lt;span style="color:#89b4fa">by_reference&lt;/span>(&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> r) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">10&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// 널 체크 불필요
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 스마트 포인터 (C++11)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>unique_ptr&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> up &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> make_unique&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>(&lt;span style="color:#fab387">42&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>shared_ptr&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> sp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> make_shared&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>(&lt;span style="color:#fab387">42&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>weak_ptr&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> wp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> sp;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="이동-의미론-move-semantics">이동 의미론 (Move Semantics)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 이동 생성자와 이동 대입
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">class&lt;/span> &lt;span style="color:#f9e2af">Buffer&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">char&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> data;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size_t size;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">public&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 이동 생성자
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> Buffer(Buffer&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> other) &lt;span style="color:#cba6f7">noexcept&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">:&lt;/span> data(other.data), size(other.size) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> other.data &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> other.size &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 이동 대입 연산자
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> Buffer&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#cba6f7">operator&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>(Buffer&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> other) &lt;span style="color:#cba6f7">noexcept&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (&lt;span style="color:#cba6f7">this&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>other) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">delete&lt;/span>[] data;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> other.data;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> other.size;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> other.data &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> other.size &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>&lt;span style="color:#cba6f7">this&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// std::move 활용
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>string&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> v1 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#a6e3a1">&amp;#34;hello&amp;#34;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#34;world&amp;#34;&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>string&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> v2 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> move(v1); &lt;span style="color:#6c7086;font-style:italic">// v1의 내용이 v2로 이동
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 완벽한 전달 (Perfect Forwarding)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">template&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#cba6f7">typename&lt;/span> T&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">void&lt;/span> wrapper(T&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> arg) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> process(forward&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>T&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>(arg));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="raii와-스코프-가드">RAII와 스코프 가드&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// RAII (Resource Acquisition Is Initialization)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">class&lt;/span> &lt;span style="color:#f9e2af">FileHandler&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FILE&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> file;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">public&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FileHandler(&lt;span style="color:#cba6f7">const&lt;/span> &lt;span style="color:#f38ba8">char&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> filename) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> file &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> fopen(filename, &lt;span style="color:#a6e3a1">&amp;#34;r&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">~&lt;/span>FileHandler() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (file) fclose(file);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 복사 금지
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> FileHandler(&lt;span style="color:#cba6f7">const&lt;/span> FileHandler&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FileHandler&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#cba6f7">operator&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>(&lt;span style="color:#cba6f7">const&lt;/span> FileHandler&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">delete&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 스코프 가드 패턴
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">class&lt;/span> &lt;span style="color:#f9e2af">ScopeGuard&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> function&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">void&lt;/span>()&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> onExit;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">public&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ScopeGuard(function&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">void&lt;/span>()&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> f) &lt;span style="color:#89dceb;font-weight:bold">:&lt;/span> onExit(f) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">~&lt;/span>ScopeGuard() { onExit(); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 사용
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ScopeGuard guard([]{ cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Exiting scope&lt;/span>&lt;span style="color:#89b4fa">\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>; });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 작업 수행
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>} &lt;span style="color:#6c7086;font-style:italic">// 자동으로 &amp;#34;Exiting scope&amp;#34; 출력
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="constexpr과-컴파일-타임-계산">constexpr과 컴파일 타임 계산&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// constexpr 함수
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">constexpr&lt;/span> &lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">factorial&lt;/span>(&lt;span style="color:#f38ba8">int&lt;/span> n) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> (n &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">?&lt;/span> &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">:&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> factorial(n &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 컴파일 타임에 계산
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">constexpr&lt;/span> &lt;span style="color:#f38ba8">int&lt;/span> fact5 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> factorial(&lt;span style="color:#fab387">5&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// 120
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// constexpr 변수
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">constexpr&lt;/span> &lt;span style="color:#f38ba8">double&lt;/span> pi &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">3.14159265359&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">constexpr&lt;/span> &lt;span style="color:#f38ba8">int&lt;/span> arr_size &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">100&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> arr[arr_size]; &lt;span style="color:#6c7086;font-style:italic">// 가능
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// C++14 constexpr 확장
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">constexpr&lt;/span> &lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">fibonacci&lt;/span>(&lt;span style="color:#f38ba8">int&lt;/span> n) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (n &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>) &lt;span style="color:#cba6f7">return&lt;/span> n;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> prev &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>, curr &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">2&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> n; &lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> next &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> prev &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> curr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prev &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> curr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> curr &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> next;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> curr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-5-함수형-프로그래밍과-람다">🔧 5. 함수형 프로그래밍과 람다&lt;/h2>
&lt;h3 id="람다-표현식의-고급-활용">람다 표현식의 고급 활용&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 기본 람다
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> square &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [](&lt;span style="color:#f38ba8">int&lt;/span> x) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> x; };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">auto&lt;/span> add &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [](&lt;span style="color:#f38ba8">int&lt;/span> x, &lt;span style="color:#f38ba8">int&lt;/span> y) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> y; };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 캡처 모드
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>, b &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">auto&lt;/span> f1 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [a, b]() { &lt;span style="color:#cba6f7">return&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> b; }; &lt;span style="color:#6c7086;font-style:italic">// 값 캡처
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> f2 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>a, &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>b]() { &lt;span style="color:#cba6f7">return&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> b; }; &lt;span style="color:#6c7086;font-style:italic">// 참조 캡처
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> f3 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>]() { &lt;span style="color:#cba6f7">return&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> b; }; &lt;span style="color:#6c7086;font-style:italic">// 모든 변수 값 캡처
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> f4 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>]() { &lt;span style="color:#cba6f7">return&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> b; }; &lt;span style="color:#6c7086;font-style:italic">// 모든 변수 참조 캡처
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> f5 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>, &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>b]() { &lt;span style="color:#cba6f7">return&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> b; }; &lt;span style="color:#6c7086;font-style:italic">// a는 값, b는 참조
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// mutable 람다
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> counter &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>]() &lt;span style="color:#cba6f7">mutable&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>count;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 제네릭 람다 (C++14)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> generic_add &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [](&lt;span style="color:#cba6f7">auto&lt;/span> a, &lt;span style="color:#cba6f7">auto&lt;/span> b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 재귀 람다
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>function&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>(&lt;span style="color:#f38ba8">int&lt;/span>)&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> fib &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>fib](&lt;span style="color:#f38ba8">int&lt;/span> n) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> (n &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">?&lt;/span> &lt;span style="color:#89dceb">n&lt;/span> : fib(n&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> fib(n&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="stl-알고리즘과-함수형-프로그래밍">STL 알고리즘과 함수형 프로그래밍&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> v &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// transform: 모든 요소에 함수 적용
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> squares;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>transform(v.begin(), v.end(), back_inserter(squares),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [](&lt;span style="color:#f38ba8">int&lt;/span> x) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> x; });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// accumulate: 누적 연산
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> sum &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> accumulate(v.begin(), v.end(), &lt;span style="color:#fab387">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> product &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> accumulate(v.begin(), v.end(), &lt;span style="color:#fab387">1&lt;/span>, multiplies&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// partition: 조건에 따라 분할
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>partition(v.begin(), v.end(), [](&lt;span style="color:#f38ba8">int&lt;/span> x) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// all_of, any_of, none_of
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> all_positive &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> all_of(v.begin(), v.end(), [](&lt;span style="color:#f38ba8">int&lt;/span> x) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">bool&lt;/span> has_even &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> any_of(v.begin(), v.end(), [](&lt;span style="color:#f38ba8">int&lt;/span> x) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">bool&lt;/span> no_negative &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> none_of(v.begin(), v.end(), [](&lt;span style="color:#f38ba8">int&lt;/span> x) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 함수 합성
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> compose &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [](&lt;span style="color:#cba6f7">auto&lt;/span> f, &lt;span style="color:#cba6f7">auto&lt;/span> g) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> [&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>](&lt;span style="color:#cba6f7">auto&lt;/span> x) { &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89b4fa">f&lt;/span>(g(x)); };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">auto&lt;/span> add_one &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [](&lt;span style="color:#f38ba8">int&lt;/span> x) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>; };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">auto&lt;/span> double_it &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [](&lt;span style="color:#f38ba8">int&lt;/span> x) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#fab387">2&lt;/span>; };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">auto&lt;/span> add_one_then_double &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> compose(double_it, add_one);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="stdfunction과-함수-객체">std::function과 함수 객체&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// std::function
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>function&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>(&lt;span style="color:#f38ba8">int&lt;/span>, &lt;span style="color:#f38ba8">int&lt;/span>)&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> operation;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>operation &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> add;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> operation(&lt;span style="color:#fab387">5&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// 8
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>operation &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [](&lt;span style="color:#f38ba8">int&lt;/span> a, &lt;span style="color:#f38ba8">int&lt;/span> b) { &lt;span style="color:#cba6f7">return&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> b; };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> operation(&lt;span style="color:#fab387">5&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// 15
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 함수 객체 (Functor)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">struct&lt;/span> &lt;span style="color:#f9e2af">Multiplier&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> factor;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Multiplier(&lt;span style="color:#f38ba8">int&lt;/span> f) &lt;span style="color:#89dceb;font-weight:bold">:&lt;/span> factor(f) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">operator&lt;/span>()(&lt;span style="color:#f38ba8">int&lt;/span> x) &lt;span style="color:#cba6f7">const&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> factor;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Multiplier &lt;span style="color:#89b4fa">times3&lt;/span>(&lt;span style="color:#fab387">3&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> times3(&lt;span style="color:#fab387">5&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// 15
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// STL 함수 객체
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> v &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sort(v.begin(), v.end(), greater&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>()); &lt;span style="color:#6c7086;font-style:italic">// 내림차순
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-6-메모리-관리와-최적화">📊 6. 메모리 관리와 최적화&lt;/h2>
&lt;h3 id="동적-메모리-할당">동적 메모리 할당&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 기본 new/delete
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> p &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">new&lt;/span> &lt;span style="color:#f38ba8">int&lt;/span>(&lt;span style="color:#fab387">42&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">delete&lt;/span> p;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> arr &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">new&lt;/span> &lt;span style="color:#f38ba8">int&lt;/span>[&lt;span style="color:#fab387">10&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">delete&lt;/span>[] arr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// placement new
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">char&lt;/span> buffer[&lt;span style="color:#cba6f7">sizeof&lt;/span>(string)];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>string&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> ps &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">new&lt;/span> (buffer) string(&lt;span style="color:#a6e3a1">&amp;#34;Hello&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ps&lt;span style="color:#89dceb;font-weight:bold">-&amp;gt;~&lt;/span>string(); &lt;span style="color:#6c7086;font-style:italic">// 명시적 소멸자 호출
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// nothrow new
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> p &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">new&lt;/span>(nothrow) &lt;span style="color:#f38ba8">int&lt;/span>[&lt;span style="color:#fab387">1000000000&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">if&lt;/span> (&lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>p) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Allocation failed&lt;/span>&lt;span style="color:#89b4fa">\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="스마트-포인터-활용">스마트 포인터 활용&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// unique_ptr: 단독 소유권
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>unique_ptr&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> up1 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> make_unique&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>(&lt;span style="color:#fab387">42&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>unique_ptr&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> up2 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> move(up1); &lt;span style="color:#6c7086;font-style:italic">// 소유권 이전
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// shared_ptr: 공유 소유권
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>shared_ptr&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> sp1 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> make_shared&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>(&lt;span style="color:#fab387">42&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>shared_ptr&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> sp2 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> sp1; &lt;span style="color:#6c7086;font-style:italic">// 참조 카운트 증가
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> sp1.use_count() &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// weak_ptr: 순환 참조 방지
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>shared_ptr&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Node&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> node1 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> make_shared&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Node&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>shared_ptr&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Node&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> node2 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> make_shared&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Node&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>node1&lt;span style="color:#89dceb;font-weight:bold">-&amp;gt;&lt;/span>next &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> node2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>node2&lt;span style="color:#89dceb;font-weight:bold">-&amp;gt;&lt;/span>prev &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> weak_ptr&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Node&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>(node1); &lt;span style="color:#6c7086;font-style:italic">// 순환 참조 방지
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 커스텀 삭제자
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> deleter &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [](FILE&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> f) { fclose(f); };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>unique_ptr&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>FILE, &lt;span style="color:#cba6f7">decltype&lt;/span>(deleter)&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> file(fopen(&lt;span style="color:#a6e3a1">&amp;#34;data.txt&amp;#34;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#34;r&amp;#34;&lt;/span>), deleter);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="메모리-최적화-기법">메모리 최적화 기법&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 메모리 풀
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">template&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#cba6f7">typename&lt;/span> T&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">class&lt;/span> &lt;span style="color:#f9e2af">MemoryPool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>T&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> pool;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stack&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>T&lt;span style="color:#89dceb;font-weight:bold">*&amp;gt;&lt;/span> available;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">public&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> T&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> allocate() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (available.empty()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pool.emplace_back();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>pool.back();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> T&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> ptr &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> available.top();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> available.pop();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> ptr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">void&lt;/span> &lt;span style="color:#89b4fa">deallocate&lt;/span>(T&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> ptr) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> available.push(ptr);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 작은 문자열 최적화 (SSO)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// std::string은 이미 SSO 구현
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 메모리 정렬
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">struct&lt;/span> &lt;span style="color:#89b4fa">alignas&lt;/span>(&lt;span style="color:#fab387">64&lt;/span>) CacheLinePadded {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> data;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 캐시 라인 크기로 정렬
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// reserve를 통한 재할당 방지
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> v;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>v.reserve(&lt;span style="color:#fab387">1000&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// 미리 공간 할당
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#fab387">1000&lt;/span>; &lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> v.push_back(i); &lt;span style="color:#6c7086;font-style:italic">// 재할당 없음
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-7-실전-활용-패턴-모음">🎯 7. 실전 활용 패턴 모음&lt;/h2>
&lt;h3 id="비트-연산-최적화">비트 연산 최적화&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 비트 플래그
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">enum&lt;/span> &lt;span style="color:#f9e2af">Flags&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FLAG_A &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#6c7086;font-style:italic">// 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> FLAG_B &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#6c7086;font-style:italic">// 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> FLAG_C &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#6c7086;font-style:italic">// 4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> flags &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> FLAG_A &lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> FLAG_C; &lt;span style="color:#6c7086;font-style:italic">// 플래그 설정
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">if&lt;/span> (flags &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> FLAG_A) { &lt;span style="color:#6c7086;font-style:italic">// 플래그 확인
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Flag A is set&lt;/span>&lt;span style="color:#89b4fa">\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flags &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;=&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">~&lt;/span>FLAG_A; &lt;span style="color:#6c7086;font-style:italic">// 플래그 해제
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 비트 카운트
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">popcount&lt;/span>(&lt;span style="color:#f38ba8">unsigned&lt;/span> &lt;span style="color:#f38ba8">int&lt;/span> n) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> __builtin_popcount(n); &lt;span style="color:#6c7086;font-style:italic">// GCC/Clang
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 최하위 비트
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">lowest_bit&lt;/span>(&lt;span style="color:#f38ba8">int&lt;/span> n) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>n;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 비트 순회
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> subset &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mask; subset; subset &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (subset &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> mask) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// mask의 모든 부분집합 순회
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="입출력-최적화">입출력 최적화&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 빠른 입력
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">inline&lt;/span> &lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">fastInput&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">char&lt;/span> c &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> getchar();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">bool&lt;/span> neg &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (c &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;0&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> c &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;9&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (c &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;-&amp;#39;&lt;/span>) neg &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> getchar();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (c &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;0&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> c &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;9&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#fab387">10&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> (c &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;0&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> c &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> getchar();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> neg &lt;span style="color:#89dceb;font-weight:bold">?&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#89dceb">x&lt;/span> : x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 버퍼링된 출력
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">class&lt;/span> &lt;span style="color:#f9e2af">FastOutput&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">static&lt;/span> &lt;span style="color:#cba6f7">const&lt;/span> &lt;span style="color:#f38ba8">int&lt;/span> BUFFER_SIZE &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#fab387">16&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">char&lt;/span> buffer[BUFFER_SIZE];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> pos &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">public&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">~&lt;/span>FastOutput() { flush(); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">void&lt;/span> &lt;span style="color:#89b4fa">flush&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fwrite(buffer, &lt;span style="color:#fab387">1&lt;/span>, pos, stdout);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pos &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">void&lt;/span> &lt;span style="color:#89b4fa">print&lt;/span>(&lt;span style="color:#f38ba8">int&lt;/span> x) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (x &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buffer[pos&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;-&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">char&lt;/span> digits[&lt;span style="color:#fab387">20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> len &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">do&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> digits[len&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;0&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#fab387">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#89dceb;font-weight:bold">/=&lt;/span> &lt;span style="color:#fab387">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">while&lt;/span> (x);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (len&lt;span style="color:#89dceb;font-weight:bold">--&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buffer[pos&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> digits[len];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buffer[pos&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (pos &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> BUFFER_SIZE &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">100&lt;/span>) flush();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="컴파일-타임-최적화">컴파일 타임 최적화&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 템플릿 메타프로그래밍
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">template&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> N&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">struct&lt;/span> &lt;span style="color:#f9e2af">Factorial&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">static&lt;/span> &lt;span style="color:#cba6f7">constexpr&lt;/span> &lt;span style="color:#f38ba8">int&lt;/span> value &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> N &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> Factorial&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>N&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;::&lt;/span>value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">template&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">struct&lt;/span> &lt;span style="color:#f9e2af">Factorial&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">static&lt;/span> &lt;span style="color:#cba6f7">constexpr&lt;/span> &lt;span style="color:#f38ba8">int&lt;/span> value &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 사용
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">constexpr&lt;/span> &lt;span style="color:#f38ba8">int&lt;/span> fact5 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> Factorial&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#fab387">5&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;::&lt;/span>value; &lt;span style="color:#6c7086;font-style:italic">// 120
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// SFINAE를 이용한 타입 체크
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">template&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#cba6f7">typename&lt;/span> T&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">using&lt;/span> EnableIfIntegral &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> enable_if_t&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>is_integral_v&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>T&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>, &lt;span style="color:#f38ba8">bool&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">template&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#cba6f7">typename&lt;/span> T, EnableIfIntegral&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>T&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">true&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>T safe_add(T a, T b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (a &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> b &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> numeric_limits&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>T&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;::&lt;/span>max() &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> a) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">throw&lt;/span> &lt;span style="color:#89b4fa">overflow_error&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Integer overflow&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-2단계-핵심-요약">📝 2단계 핵심 요약&lt;/h2>
&lt;h3 id="pythonjava-개발자가-주의할-점">Python/Java 개발자가 주의할 점&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>메모리 관리&lt;/strong>: 수동 관리, RAII 패턴 활용&lt;/li>
&lt;li>&lt;strong>포인터와 참조&lt;/strong>: 명확한 구분과 활용&lt;/li>
&lt;li>&lt;strong>템플릿&lt;/strong>: 컴파일 타임 다형성&lt;/li>
&lt;li>&lt;strong>이동 의미론&lt;/strong>: 성능 최적화의 핵심&lt;/li>
&lt;/ol>
&lt;h3 id="c다운-코딩-스타일">C++다운 코딩 스타일&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>RAII 활용&lt;/strong>: 자원 관리 자동화&lt;/li>
&lt;li>&lt;strong>STL 알고리즘&lt;/strong>: 반복문 대신 알고리즘 사용&lt;/li>
&lt;li>&lt;strong>const 정확성&lt;/strong>: const를 적극 활용&lt;/li>
&lt;li>&lt;strong>스마트 포인터&lt;/strong>: raw 포인터 대신 사용&lt;/li>
&lt;/ol>
&lt;h3 id="자주-사용하는-패턴-체크리스트">자주 사용하는 패턴 체크리스트&lt;/h3>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;code>ios_base::sync_with_stdio(false)&lt;/code>로 입출력 최적화&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 범위 기반 for문과 auto 활용&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> STL 알고리즘과 람다 조합&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 스마트 포인터로 메모리 관리&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> constexpr로 컴파일 타임 계산&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 이동 의미론으로 성능 최적화&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 템플릿으로 제네릭 프로그래밍&lt;/li>
&lt;/ul>
&lt;h1 id="c-ps-3단계-ps-핵심-패턴">C++ PS 3단계: PS 핵심 패턴&lt;/h1>
&lt;h2 id="-1-탐색-알고리즘-dfsbfs-템플릿">🔍 1. 탐색 알고리즘 (DFS/BFS 템플릿)&lt;/h2>
&lt;h3 id="dfs-깊이-우선-탐색">DFS (깊이 우선 탐색)&lt;/h3>
&lt;h4 id="재귀적-dfs">재귀적 DFS&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> graph;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> visited;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">void&lt;/span> &lt;span style="color:#89b4fa">dfs_recursive&lt;/span>(&lt;span style="color:#f38ba8">int&lt;/span> node) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited[node] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> node &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39; &amp;#39;&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// 방문 처리
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89dceb">neighbor&lt;/span> : graph[node]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (&lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>visited[neighbor]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dfs_recursive(neighbor);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 사용 예시
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">6&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// 노드 수
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> graph.resize(n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited.resize(n, &lt;span style="color:#89dceb">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 그래프 구성
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> graph[&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graph[&lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graph[&lt;span style="color:#fab387">2&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graph[&lt;span style="color:#fab387">3&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graph[&lt;span style="color:#fab387">4&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graph[&lt;span style="color:#fab387">5&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dfs_recursive(&lt;span style="color:#fab387">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="스택을-이용한-dfs">스택을 이용한 DFS&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">void&lt;/span> &lt;span style="color:#89b4fa">dfs_iterative&lt;/span>(&lt;span style="color:#f38ba8">int&lt;/span> start) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> visited(graph.size(), &lt;span style="color:#89dceb">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stack&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> st;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> st.push(start);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (&lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>st.empty()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> node &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> st.top();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> st.pop();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (&lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>visited[node]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited[node] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> node &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39; &amp;#39;&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// 방문 처리
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 역순으로 추가 (재귀와 같은 순서)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> graph[node].size() &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i&lt;span style="color:#89dceb;font-weight:bold">--&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (&lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>visited[graph[node][i]]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> st.push(graph[node][i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2차원-격자에서-dfs">2차원 격자에서 DFS&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> dx[] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>}; &lt;span style="color:#6c7086;font-style:italic">// 상하좌우
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> dy[] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">void&lt;/span> &lt;span style="color:#89b4fa">dfs_grid&lt;/span>(vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&amp;amp;&lt;/span> grid, &lt;span style="color:#f38ba8">int&lt;/span> x, &lt;span style="color:#f38ba8">int&lt;/span> y, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&amp;amp;&lt;/span> visited) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> grid.size();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> m &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> grid[&lt;span style="color:#fab387">0&lt;/span>].size();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 경계 체크 및 방문 체크
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> (x &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> y &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> y &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> m &lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited[x][y] &lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> grid[x][y] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited[x][y] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;방문: (&amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;, &amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> y &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;)&lt;/span>&lt;span style="color:#89b4fa">\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 4방향 탐색
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#fab387">4&lt;/span>; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dfs_grid(grid, x &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dx[i], y &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dy[i], visited);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 연결 요소 개수 구하기
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">countComponents&lt;/span>(vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&amp;amp;&lt;/span> grid) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> grid.size();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> m &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> grid[&lt;span style="color:#fab387">0&lt;/span>].size();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> visited(n, vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>(m, &lt;span style="color:#89dceb">false&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; j &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> m; j&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (grid[i][j] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>visited[i][j]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dfs_grid(grid, i, j, visited);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> count;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="bfs-너비-우선-탐색">BFS (너비 우선 탐색)&lt;/h3>
&lt;h4 id="기본-bfs">기본 BFS&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">void&lt;/span> &lt;span style="color:#89b4fa">bfs&lt;/span>(&lt;span style="color:#f38ba8">int&lt;/span> start) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> visited(graph.size(), &lt;span style="color:#89dceb">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> q;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited[start] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q.push(start);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (&lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>q.empty()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> node &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> q.front();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q.pop();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> node &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39; &amp;#39;&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// 방문 처리
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89dceb">neighbor&lt;/span> : graph[node]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (&lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>visited[neighbor]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited[neighbor] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q.push(neighbor);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="최단거리를-구하는-bfs">최단거리를 구하는 BFS&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">bfs_shortest_path&lt;/span>(&lt;span style="color:#f38ba8">int&lt;/span> start, &lt;span style="color:#f38ba8">int&lt;/span> end) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> distance(graph.size(), &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> q;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> distance[start] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q.push(start);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (&lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>q.empty()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> node &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> q.front();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q.pop();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (node &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> end) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> distance[end];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89dceb">neighbor&lt;/span> : graph[node]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (distance[neighbor] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> distance[neighbor] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> distance[node] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q.push(neighbor);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// 경로가 없음
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2차원-격자에서-bfs">2차원 격자에서 BFS&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">bfs_grid&lt;/span>(vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&amp;amp;&lt;/span> grid, &lt;span style="color:#f38ba8">int&lt;/span> startX, &lt;span style="color:#f38ba8">int&lt;/span> startY) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> grid.size();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> m &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> grid[&lt;span style="color:#fab387">0&lt;/span>].size();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> visited(n, vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>(m, &lt;span style="color:#89dceb">false&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>pair&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>pair&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> q; &lt;span style="color:#6c7086;font-style:italic">// {{x, y}, dist}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited[startX][startY] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q.push({{startX, startY}, &lt;span style="color:#fab387">0&lt;/span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (&lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>q.empty()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">auto&lt;/span> [pos, dist] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> q.front();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">auto&lt;/span> [x, y] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> pos;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q.pop();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;방문: (&amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;, &amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> y &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;), 거리: &amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> dist &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#fab387">4&lt;/span>; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> nx &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dx[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> ny &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> y &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dy[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (nx &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> nx &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> ny &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> ny &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> m &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>visited[nx][ny] &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> grid[nx][ny] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited[nx][ny] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> q.push({{nx, ny}, dist &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-dfsbfs-주요-함정">🚨 DFS/BFS 주요 함정&lt;/h3>
&lt;ul>
&lt;li>재귀 DFS의 스택 오버플로우 (기본 스택 크기 제한)&lt;/li>
&lt;li>BFS에서 방문 체크를 큐에 넣을 때 해야 중복 방지&lt;/li>
&lt;li>2차원 배열에서 dx, dy 배열 순서 실수&lt;/li>
&lt;li>그래프 표현 방식 (인접 리스트 vs 인접 행렬)&lt;/li>
&lt;/ul>
&lt;h2 id="-2-정렬과-이진탐색-패턴">📊 2. 정렬과 이진탐색 패턴&lt;/h2>
&lt;h3 id="다양한-정렬-기법">다양한 정렬 기법&lt;/h3>
&lt;h4 id="기본-정렬">기본 정렬&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 벡터 정렬
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> arr &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>, &lt;span style="color:#fab387">9&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">6&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sort(arr.begin(), arr.end()); &lt;span style="color:#6c7086;font-style:italic">// 오름차순
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>sort(arr.begin(), arr.end(), greater&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>()); &lt;span style="color:#6c7086;font-style:italic">// 내림차순
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 배열 정렬
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> arr2[] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sort(arr2, arr2 &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">5&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="커스텀-정렬">커스텀 정렬&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 구조체 정렬
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">struct&lt;/span> &lt;span style="color:#f9e2af">Student&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> string name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> score;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> age;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Student&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> students &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e3a1">&amp;#34;Alice&amp;#34;&lt;/span>, &lt;span style="color:#fab387">85&lt;/span>, &lt;span style="color:#fab387">20&lt;/span>}, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e3a1">&amp;#34;Bob&amp;#34;&lt;/span>, &lt;span style="color:#fab387">90&lt;/span>, &lt;span style="color:#fab387">19&lt;/span>}, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e3a1">&amp;#34;Charlie&amp;#34;&lt;/span>, &lt;span style="color:#fab387">85&lt;/span>, &lt;span style="color:#fab387">21&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 점수 내림차순, 같으면 나이 오름차순
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>sort(students.begin(), students.end(), [](&lt;span style="color:#cba6f7">const&lt;/span> Student&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> a, &lt;span style="color:#cba6f7">const&lt;/span> Student&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (a.score &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> b.score) &lt;span style="color:#cba6f7">return&lt;/span> a.score &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> b.score;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> a.age &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> b.age;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// pair 정렬 (자동으로 first, second 순)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>pair&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> pairs &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {{&lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>}, {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>}, {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>}};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sort(pairs.begin(), pairs.end());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="안정-정렬">안정 정렬&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// stable_sort는 같은 값의 원래 순서 유지
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>pair&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>string, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> data &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e3a1">&amp;#34;A&amp;#34;&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>}, {&lt;span style="color:#a6e3a1">&amp;#34;B&amp;#34;&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>}, {&lt;span style="color:#a6e3a1">&amp;#34;C&amp;#34;&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>}, {&lt;span style="color:#a6e3a1">&amp;#34;D&amp;#34;&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>stable_sort(data.begin(), data.end(), [](&lt;span style="color:#cba6f7">const&lt;/span> &lt;span style="color:#cba6f7">auto&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> a, &lt;span style="color:#cba6f7">const&lt;/span> &lt;span style="color:#cba6f7">auto&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> a.second &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> b.second;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 결과: {{&amp;#34;A&amp;#34;, 1}, {&amp;#34;C&amp;#34;, 1}, {&amp;#34;B&amp;#34;, 2}, {&amp;#34;D&amp;#34;, 2}}
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="이진탐색-binary-search">이진탐색 (Binary Search)&lt;/h3>
&lt;h4 id="기본-이진탐색">기본 이진탐색&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">binary_search_manual&lt;/span>(vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> arr, &lt;span style="color:#f38ba8">int&lt;/span> target) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>, right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> arr.size() &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> (right &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> left) &lt;span style="color:#89dceb;font-weight:bold">/&lt;/span> &lt;span style="color:#fab387">2&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// 오버플로우 방지
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (arr[mid] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> target) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> mid;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> (arr[mid] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> target) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// 찾지 못함
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// STL 이진탐색
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> arr &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>, &lt;span style="color:#fab387">7&lt;/span>, &lt;span style="color:#fab387">9&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">if&lt;/span> (binary_search(arr.begin(), arr.end(), &lt;span style="color:#fab387">5&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Found&lt;/span>&lt;span style="color:#89b4fa">\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="lower-bound--upper-bound">Lower Bound / Upper Bound&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 직접 구현
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">lower_bound_manual&lt;/span>(vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> arr, &lt;span style="color:#f38ba8">int&lt;/span> target) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>, right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> arr.size();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> (right &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> left) &lt;span style="color:#89dceb;font-weight:bold">/&lt;/span> &lt;span style="color:#fab387">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (arr[mid] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> target) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> left;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// STL 활용
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> arr &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">auto&lt;/span> lower &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lower_bound(arr.begin(), arr.end(), &lt;span style="color:#fab387">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">auto&lt;/span> upper &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> upper_bound(arr.begin(), arr.end(), &lt;span style="color:#fab387">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> upper &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> lower; &lt;span style="color:#6c7086;font-style:italic">// 2의 개수: 3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 인덱스로 변환
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> lower_idx &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lower &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> arr.begin();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> upper_idx &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> upper &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> arr.begin();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="매개변수-탐색-parametric-search">매개변수 탐색 (Parametric Search)&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 조건을 만족하는 최솟값/최댓값 찾기
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> &lt;span style="color:#89b4fa">check&lt;/span>(&lt;span style="color:#f38ba8">int&lt;/span> mid, &lt;span style="color:#6c7086;font-style:italic">/* 필요한 매개변수 */&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// mid가 조건을 만족하는지 확인
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">true&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// or false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">parametric_search&lt;/span>(&lt;span style="color:#f38ba8">int&lt;/span> left, &lt;span style="color:#f38ba8">int&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> (right &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> left) &lt;span style="color:#89dceb;font-weight:bold">/&lt;/span> &lt;span style="color:#fab387">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (check(mid)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid; &lt;span style="color:#6c7086;font-style:italic">// 가능한 값 저장
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// 더 작은 값 탐색 (최솟값)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#6c7086;font-style:italic">// left = mid + 1; // 더 큰 값 탐색 (최댓값)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// 불가능하면 더 큰 값
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#6c7086;font-style:italic">// right = mid - 1; // 불가능하면 더 작은 값
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 예시: 나무 자르기
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> &lt;span style="color:#89b4fa">can_cut_wood&lt;/span>(vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> trees, &lt;span style="color:#f38ba8">int&lt;/span> height, &lt;span style="color:#f38ba8">int&lt;/span> target) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">long&lt;/span> &lt;span style="color:#f38ba8">long&lt;/span> total &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89dceb">tree&lt;/span> : trees) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (tree &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> height) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> tree &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> height;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> total &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> target;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">find_max_height&lt;/span>(vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> trees, &lt;span style="color:#f38ba8">int&lt;/span> target) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>, right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>max_element(trees.begin(), trees.end());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> (right &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> left) &lt;span style="color:#89dceb;font-weight:bold">/&lt;/span> &lt;span style="color:#fab387">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (can_cut_wood(trees, mid, target)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// 더 높은 높이 시도
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-정렬이진탐색-주요-함정">🚨 정렬/이진탐색 주요 함정&lt;/h3>
&lt;ul>
&lt;li>이진탐색 전 정렬 필수&lt;/li>
&lt;li>&lt;code>mid = (left + right) / 2&lt;/code>는 오버플로우 위험&lt;/li>
&lt;li>lower_bound는 이상, upper_bound는 초과&lt;/li>
&lt;li>실수형 이진탐색은 횟수로 제한&lt;/li>
&lt;/ul>
&lt;h2 id="-3-투-포인터-슬라이딩-윈도우">👥 3. 투 포인터, 슬라이딩 윈도우&lt;/h2>
&lt;h3 id="투-포인터-기법">투 포인터 기법&lt;/h3>
&lt;h4 id="기본-투-포인터">기본 투 포인터&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 정렬된 배열에서 합이 target인 두 수 찾기
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>pair&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> two_sum_sorted(vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> arr, &lt;span style="color:#f38ba8">int&lt;/span> target) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>, right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> arr.size() &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> sum &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> arr[left] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> arr[right];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (sum &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> target) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> {left, right};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> &lt;span style="color:#89b4fa">if&lt;/span> (sum &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> target) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right&lt;span style="color:#89dceb;font-weight:bold">--&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> {&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="연속-부분배열의-합">연속 부분배열의 합&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 합이 target인 연속 부분배열의 개수
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">subarray_sum&lt;/span>(vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> arr, &lt;span style="color:#f38ba8">int&lt;/span> target) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">long&lt;/span> &lt;span style="color:#f38ba8">long&lt;/span> sum &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; right &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> arr.size(); right&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sum &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> arr[right];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (sum &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> target &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sum &lt;span style="color:#89dceb;font-weight:bold">-=&lt;/span> arr[left];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (sum &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> target) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> count;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 합이 target 이상인 최소 길이 부분배열
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">min_subarray_length&lt;/span>(vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> arr, &lt;span style="color:#f38ba8">int&lt;/span> target) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">long&lt;/span> &lt;span style="color:#f38ba8">long&lt;/span> sum &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> min_len &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> INT_MAX;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; right &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> arr.size(); right&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sum &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> arr[right];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (sum &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> target) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> min_len &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> min(min_len, right &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sum &lt;span style="color:#89dceb;font-weight:bold">-=&lt;/span> arr[left];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> (min_len &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> INT_MAX) &lt;span style="color:#89dceb;font-weight:bold">?&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">:&lt;/span> min_len;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="서로-다른-문자의-최장-부분문자열">서로 다른 문자의 최장 부분문자열&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">longest_unique_substring&lt;/span>(string s) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unordered_set&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">char&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> char_set;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> max_length &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; right &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> s.length(); right&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (char_set.count(s[right])) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> char_set.erase(s[left]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> char_set.insert(s[right]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_length &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> max(max_length, right &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> max_length;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// K개 이하의 서로 다른 문자를 포함하는 최장 부분문자열
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">longest_k_distinct&lt;/span>(string s, &lt;span style="color:#f38ba8">int&lt;/span> k) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unordered_map&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">char&lt;/span>, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> char_count;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> max_length &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; right &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> s.length(); right&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> char_count[s[right]]&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (char_count.size() &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> k) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> char_count[s[left]]&lt;span style="color:#89dceb;font-weight:bold">--&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (char_count[s[left]] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> char_count.erase(s[left]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_length &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> max(max_length, right &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> max_length;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="슬라이딩-윈도우">슬라이딩 윈도우&lt;/h3>
&lt;h4 id="고정-크기-윈도우">고정 크기 윈도우&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 크기가 k인 부분배열의 최대 합
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">max_sum_subarray&lt;/span>(vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> arr, &lt;span style="color:#f38ba8">int&lt;/span> k) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (arr.size() &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> k) &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 첫 번째 윈도우
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#f38ba8">int&lt;/span> window_sum &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> k; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window_sum &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> arr[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> max_sum &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> window_sum;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 윈도우 슬라이딩
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> k; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> arr.size(); i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window_sum &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> window_sum &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> arr[i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> k] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> arr[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_sum &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> max(max_sum, window_sum);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> max_sum;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 크기가 k인 윈도우의 최댓값들
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> sliding_window_maximum(vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> arr, &lt;span style="color:#f38ba8">int&lt;/span> k) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> deque&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> dq; &lt;span style="color:#6c7086;font-style:italic">// 인덱스 저장
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> arr.size(); i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 윈도우 범위 벗어난 원소 제거
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">while&lt;/span> (&lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>dq.empty() &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> dq.front() &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> k &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dq.pop_front();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 현재 원소보다 작은 원소들 제거
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">while&lt;/span> (&lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>dq.empty() &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> arr[dq.back()] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> arr[i]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dq.pop_back();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dq.push_back(i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (i &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> k &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result.push_back(arr[dq.front()]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="문자열-패턴-매칭">문자열 패턴 매칭&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 문자열 s에서 p의 애너그램인 부분문자열 찾기
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> find_anagrams(string s, string p) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (p.length() &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> s.length()) &lt;span style="color:#cba6f7">return&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> p_count(&lt;span style="color:#fab387">26&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>), window_count(&lt;span style="color:#fab387">26&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// p의 문자 빈도 계산
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">char&lt;/span> &lt;span style="color:#89dceb">c&lt;/span> : p) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p_count[c &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;a&amp;#39;&lt;/span>]&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 첫 번째 윈도우
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> p.length(); i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window_count[s[i] &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;a&amp;#39;&lt;/span>]&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (window_count &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> p_count) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result.push_back(&lt;span style="color:#fab387">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 윈도우 슬라이딩
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> p.length(); i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> s.length(); i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window_count[s[i] &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;a&amp;#39;&lt;/span>]&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window_count[s[i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> p.length()] &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;a&amp;#39;&lt;/span>]&lt;span style="color:#89dceb;font-weight:bold">--&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (window_count &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> p_count) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result.push_back(i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> p.length() &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-투-포인터슬라이딩-윈도우-주요-함정">🚨 투 포인터/슬라이딩 윈도우 주요 함정&lt;/h3>
&lt;ul>
&lt;li>포인터 이동 조건 명확히 정의&lt;/li>
&lt;li>윈도우 크기와 경계 조건 주의&lt;/li>
&lt;li>오버플로우 가능성 체크&lt;/li>
&lt;li>deque 활용한 최댓값/최솟값 추적&lt;/li>
&lt;/ul>
&lt;h2 id="-4-그리디-알고리즘-패턴">🏃 4. 그리디 알고리즘 패턴&lt;/h2>
&lt;h3 id="기본-그리디-패턴">기본 그리디 패턴&lt;/h3>
&lt;h4 id="활동-선택-문제">활동 선택 문제&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 끝나는 시간이 빠른 순으로 최대한 많은 활동 선택
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">activity_selection&lt;/span>(vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>pair&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&amp;amp;&lt;/span> activities) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 끝나는 시간 기준 정렬
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> sort(activities.begin(), activities.end(), 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [](&lt;span style="color:#cba6f7">const&lt;/span> &lt;span style="color:#cba6f7">auto&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> a, &lt;span style="color:#cba6f7">const&lt;/span> &lt;span style="color:#cba6f7">auto&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> a.second &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> b.second;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> last_end &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> activities[&lt;span style="color:#fab387">0&lt;/span>].second;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> activities.size(); i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (activities[i].first &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> last_end) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> last_end &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> activities[i].second;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> count;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="거스름돈-문제">거스름돈 문제&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 가장 적은 개수의 동전으로 거스름돈 만들기
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> make_change(&lt;span style="color:#f38ba8">int&lt;/span> amount, vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> coins) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sort(coins.begin(), coins.end(), greater&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89dceb">coin&lt;/span> : coins) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (amount &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> coin) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result.push_back(coin);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> amount &lt;span style="color:#89dceb;font-weight:bold">-=&lt;/span> coin;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> (amount &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">?&lt;/span> &lt;span style="color:#89dceb">result&lt;/span> : vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="최소-신장-트리-크루스칼">최소 신장 트리 (크루스칼)&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">struct&lt;/span> &lt;span style="color:#f9e2af">Edge&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> u, v, weight;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">bool&lt;/span> &lt;span style="color:#cba6f7">operator&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>(&lt;span style="color:#cba6f7">const&lt;/span> Edge&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> other) &lt;span style="color:#cba6f7">const&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> weight &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> other.weight;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">class&lt;/span> &lt;span style="color:#f9e2af">UnionFind&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> parent, rank;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">public&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UnionFind(&lt;span style="color:#f38ba8">int&lt;/span> n) &lt;span style="color:#89dceb;font-weight:bold">:&lt;/span> parent(n), rank(n, &lt;span style="color:#fab387">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parent[i] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">find&lt;/span>(&lt;span style="color:#f38ba8">int&lt;/span> x) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (parent[x] &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> x) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parent[x] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> find(parent[x]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> parent[x];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">bool&lt;/span> &lt;span style="color:#89b4fa">unite&lt;/span>(&lt;span style="color:#f38ba8">int&lt;/span> x, &lt;span style="color:#f38ba8">int&lt;/span> y) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> px &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> find(x);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> py &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> find(y);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (px &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> py) &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (rank[px] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> rank[py]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parent[px] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> py;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> (rank[px] &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> rank[py]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parent[py] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> px;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parent[py] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> px;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rank[px]&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">kruskal&lt;/span>(&lt;span style="color:#f38ba8">int&lt;/span> n, vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Edge&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> edges) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sort(edges.begin(), edges.end());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> UnionFind uf(n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> total_weight &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> edge_count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#cba6f7">const&lt;/span> Edge&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#89dceb">e&lt;/span> : edges) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (uf.unite(e.u, e.v)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total_weight &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> e.weight;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> edge_count&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (edge_count &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>) &lt;span style="color:#cba6f7">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> total_weight;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="그리디-선택의-정당성">그리디 선택의 정당성&lt;/h3>
&lt;h4 id="회의실-배정">회의실 배정&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 최소한의 회의실로 모든 회의 배정
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">meeting_rooms&lt;/span>(vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>pair&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&amp;amp;&lt;/span> meetings) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> starts, ends;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#cba6f7">const&lt;/span> &lt;span style="color:#cba6f7">auto&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#89dceb">meeting&lt;/span> : meetings) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> starts.push_back(meeting.first);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ends.push_back(meeting.second);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sort(starts.begin(), starts.end());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sort(ends.begin(), ends.end());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> rooms &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>, max_rooms &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>, j &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> starts.size()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (starts[i] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> ends[j]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rooms&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_rooms &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> max(max_rooms, rooms);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rooms&lt;span style="color:#89dceb;font-weight:bold">--&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> max_rooms;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Priority Queue 활용
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">meeting_rooms_pq&lt;/span>(vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>pair&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&amp;amp;&lt;/span> meetings) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (meetings.empty()) &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sort(meetings.begin(), meetings.end());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> priority_queue&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>, vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>, greater&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> pq;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pq.push(meetings[&lt;span style="color:#fab387">0&lt;/span>].second);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> meetings.size(); i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (meetings[i].first &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> pq.top()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pq.pop();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pq.push(meetings[i].second);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> pq.size();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-그리디-주요-함정">🚨 그리디 주요 함정&lt;/h3>
&lt;ul>
&lt;li>그리디 선택이 항상 최적해 보장하지 않음&lt;/li>
&lt;li>정렬 기준 선택이 중요&lt;/li>
&lt;li>반례 찾기로 검증 필요&lt;/li>
&lt;li>동적계획법과 구분&lt;/li>
&lt;/ul>
&lt;h2 id="-5-동적계획법dp-기본-패턴">🧮 5. 동적계획법(DP) 기본 패턴&lt;/h2>
&lt;h3 id="기본-dp-패턴">기본 DP 패턴&lt;/h3>
&lt;h4 id="피보나치-수열">피보나치 수열&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Top-down (메모이제이션)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">long&lt;/span> &lt;span style="color:#f38ba8">long&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> memo;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">long&lt;/span> &lt;span style="color:#f38ba8">long&lt;/span> &lt;span style="color:#89b4fa">fibonacci_memo&lt;/span>(&lt;span style="color:#f38ba8">int&lt;/span> n) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (n &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>) &lt;span style="color:#cba6f7">return&lt;/span> n;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (memo[n] &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>) &lt;span style="color:#cba6f7">return&lt;/span> memo[n];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> memo[n] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> fibonacci_memo(n&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> fibonacci_memo(n&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Bottom-up
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">long&lt;/span> &lt;span style="color:#f38ba8">long&lt;/span> &lt;span style="color:#89b4fa">fibonacci_dp&lt;/span>(&lt;span style="color:#f38ba8">int&lt;/span> n) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (n &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>) &lt;span style="color:#cba6f7">return&lt;/span> n;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">long&lt;/span> &lt;span style="color:#f38ba8">long&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> dp(n &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[&lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">2&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> n; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dp[i&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dp[i&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">2&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> dp[n];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 공간 최적화
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">long&lt;/span> &lt;span style="color:#f38ba8">long&lt;/span> &lt;span style="color:#89b4fa">fibonacci_optimized&lt;/span>(&lt;span style="color:#f38ba8">int&lt;/span> n) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (n &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>) &lt;span style="color:#cba6f7">return&lt;/span> n;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">long&lt;/span> &lt;span style="color:#f38ba8">long&lt;/span> prev2 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>, prev1 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">2&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> n; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">long&lt;/span> &lt;span style="color:#f38ba8">long&lt;/span> current &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> prev1 &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> prev2;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prev2 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> prev1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prev1 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> current;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> prev1;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="0-1-배낭-문제">0-1 배낭 문제&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 기본 2차원 DP
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">knapsack_01&lt;/span>(vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> weights, vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> values, &lt;span style="color:#f38ba8">int&lt;/span> capacity) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> weights.size();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> dp(n &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>, vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>(capacity &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> n; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> w &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>; w &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> capacity; w&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// i번째 물건을 넣지 않는 경우
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> dp[i][w] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dp[i&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>][w];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// i번째 물건을 넣는 경우
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> (weights[i&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> w) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i][w] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> max(dp[i][w], 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>][w&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>weights[i&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>]] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> values[i&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> dp[n][capacity];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 공간 최적화 (1차원 DP)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">knapsack_01_optimized&lt;/span>(vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> weights, vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> values, &lt;span style="color:#f38ba8">int&lt;/span> capacity) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> dp(capacity &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> weights.size(); i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 뒤에서부터 갱신 (중복 사용 방지)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> w &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> capacity; w &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> weights[i]; w&lt;span style="color:#89dceb;font-weight:bold">--&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[w] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> max(dp[w], dp[w &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> weights[i]] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> values[i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> dp[capacity];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="최장-증가-부분-수열-lis">최장 증가 부분 수열 (LIS)&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// O(n²) DP
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">lis_dp&lt;/span>(vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> arr) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> arr.size();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> dp(n, &lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; j &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> i; j&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (arr[j] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> arr[i]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> max(dp[i], dp[j] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>max_element(dp.begin(), dp.end());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// O(n log n) 이진탐색
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">lis_binary_search&lt;/span>(vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> arr) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> tails;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89dceb">num&lt;/span> : arr) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">auto&lt;/span> it &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lower_bound(tails.begin(), tails.end(), num);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (it &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> tails.end()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tails.push_back(num);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>it &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> num;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> tails.size();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// LIS 복원
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> lis_with_path(vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> arr) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> arr.size();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> dp(n, &lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> parent(n, &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; j &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> i; j&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (arr[j] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> arr[i] &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> dp[j] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> dp[i]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dp[j] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parent[i] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> j;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 최대 길이와 끝 인덱스 찾기
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#f38ba8">int&lt;/span> max_length &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>, end_idx &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (dp[i] &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> max_length) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_length &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dp[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> end_idx &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 경로 복원
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> lis;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> end_idx; i &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> parent[i]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lis.push_back(arr[i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reverse(lis.begin(), lis.end());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> lis;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="편집-거리-edit-distance">편집 거리 (Edit Distance)&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">edit_distance&lt;/span>(string s1, string s2) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> m &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s1.length(), n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s2.length();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> dp(m &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>, vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>(n &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 초기화
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> m; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) dp[i][&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; j &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> n; j&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) dp[&lt;span style="color:#fab387">0&lt;/span>][j] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> j;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> m; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>; j &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> n; j&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (s1[i&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> s2[j&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i][j] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dp[i&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>][j&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i][j] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> min({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>][j], &lt;span style="color:#6c7086;font-style:italic">// 삭제
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> dp[i][j&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>], &lt;span style="color:#6c7086;font-style:italic">// 삽입
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> dp[i&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>][j&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#6c7086;font-style:italic">// 교체
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> dp[m][n];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="dp-상태-설계-패턴">DP 상태 설계 패턴&lt;/h3>
&lt;h4 id="구간-dp">구간 DP&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 행렬 연쇄 곱셈
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">matrix_chain_multiplication&lt;/span>(vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>pair&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&amp;amp;&lt;/span> matrices) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> matrices.size();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> dp(n, vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>(n, &lt;span style="color:#fab387">0&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 구간 길이를 늘려가며 계산
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> len &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">2&lt;/span>; len &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> n; len&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> len; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> len &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i][j] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> INT_MAX;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> k &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> i; k &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> j; k&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> cost &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dp[i][k] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dp[k&lt;span style="color:#89dceb;font-weight:bold">+&lt;/span>&lt;span style="color:#fab387">1&lt;/span>][j] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> matrices[i].first &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> matrices[k].second &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> matrices[j].second;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i][j] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> min(dp[i][j], cost);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> dp[&lt;span style="color:#fab387">0&lt;/span>][n&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="비트마스크-dp">비트마스크 DP&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 외판원 문제 (TSP)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">tsp&lt;/span>(vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&amp;amp;&lt;/span> dist) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dist.size();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> dp(&lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> n, vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>(n, INT_MAX));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 시작점에서 출발
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> dp[&lt;span style="color:#fab387">1&lt;/span>][&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> mask &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>; mask &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> (&lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> n); mask&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (&lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>(mask &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> (&lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> i))) &lt;span style="color:#cba6f7">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; j &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n; j&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (i &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>(mask &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> (&lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> j))) &lt;span style="color:#cba6f7">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> prev_mask &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mask &lt;span style="color:#89dceb;font-weight:bold">^&lt;/span> (&lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (dp[prev_mask][j] &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> INT_MAX) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[mask][i] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> min(dp[mask][i], 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[prev_mask][j] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dist[j][i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 모든 도시를 방문하고 시작점으로 돌아가는 최소 비용
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#f38ba8">int&lt;/span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> INT_MAX;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> final_mask &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (&lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> n) &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (dp[final_mask][i] &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> INT_MAX) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> min(result, dp[final_mask][i] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dist[i][&lt;span style="color:#fab387">0&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-dp-주요-함정">🚨 DP 주요 함정&lt;/h3>
&lt;ul>
&lt;li>상태 정의가 가장 중요&lt;/li>
&lt;li>초기값 설정 주의&lt;/li>
&lt;li>메모리 제한 고려 (상태 압축)&lt;/li>
&lt;li>Top-down vs Bottom-up 선택&lt;/li>
&lt;/ul>
&lt;h2 id="-6-문자열-처리-고급-기법">🔤 6. 문자열 처리 고급 기법&lt;/h2>
&lt;h3 id="패턴-매칭">패턴 매칭&lt;/h3>
&lt;h4 id="kmp-알고리즘">KMP 알고리즘&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 실패 함수 구축
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> build_failure_function(string pattern) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> m &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> pattern.length();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> failure(m, &lt;span style="color:#fab387">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> m; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (j &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> pattern[i] &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> pattern[j]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> failure[j &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (pattern[i] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> pattern[j]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> failure[i] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> j;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> failure;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// KMP 검색
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> kmp_search(string text, string pattern) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> text.length(), m &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> pattern.length();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> matches;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (m &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>) &lt;span style="color:#cba6f7">return&lt;/span> matches;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> failure &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> build_failure_function(pattern);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (j &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> text[i] &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> pattern[j]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> failure[j &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (text[i] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> pattern[j]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (j &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> m) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> matches.push_back(i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> m &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> failure[j &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> matches;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="라빈-카프-알고리즘">라빈-카프 알고리즘&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> rabin_karp_search(string text, string pattern) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">const&lt;/span> &lt;span style="color:#f38ba8">int&lt;/span> base &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">256&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">const&lt;/span> &lt;span style="color:#f38ba8">int&lt;/span> mod &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1e9&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">7&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> text.length(), m &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> pattern.length();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> matches;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (m &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> n) &lt;span style="color:#cba6f7">return&lt;/span> matches;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 패턴의 해시값
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#f38ba8">long&lt;/span> &lt;span style="color:#f38ba8">long&lt;/span> pattern_hash &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">char&lt;/span> &lt;span style="color:#89dceb">c&lt;/span> : pattern) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pattern_hash &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (pattern_hash &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> base &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> c) &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> mod;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// base^(m-1) % mod
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#f38ba8">long&lt;/span> &lt;span style="color:#f38ba8">long&lt;/span> h &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> m &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (h &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> base) &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> mod;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 첫 윈도우의 해시값
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#f38ba8">long&lt;/span> &lt;span style="color:#f38ba8">long&lt;/span> window_hash &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> m; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window_hash &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (window_hash &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> base &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> text[i]) &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> mod;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 롤링 해시
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> m; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (window_hash &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> pattern_hash) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (text.substr(i, m) &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> pattern) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> matches.push_back(i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> m) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window_hash &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (window_hash &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> text[i] &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> h &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> mod &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> mod) &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> mod;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window_hash &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (window_hash &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> base &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> text[i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> m]) &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> mod;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> matches;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="문자열-변환과-처리">문자열 변환과 처리&lt;/h3>
&lt;h4 id="회문-검사와-관련-알고리즘">회문 검사와 관련 알고리즘&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 기본 회문 검사
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> &lt;span style="color:#89b4fa">is_palindrome&lt;/span>(string s) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>, right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s.length() &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (s[left] &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> s[right]) &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right&lt;span style="color:#89dceb;font-weight:bold">--&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 중심 확장으로 최장 회문
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>string &lt;span style="color:#89b4fa">longest_palindrome_expand&lt;/span>(string s) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">auto&lt;/span> expand_around_center &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>](&lt;span style="color:#f38ba8">int&lt;/span> left, &lt;span style="color:#f38ba8">int&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (left &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> s.length() &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> s[left] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> s[right]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left&lt;span style="color:#89dceb;font-weight:bold">--&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> start &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>, max_len &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> s.length(); i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> len1 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> expand_around_center(i, i); &lt;span style="color:#6c7086;font-style:italic">// 홀수 길이
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#f38ba8">int&lt;/span> len2 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> expand_around_center(i, i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// 짝수 길이
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> len &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> max(len1, len2);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (len &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> max_len) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_len &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> len;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> start &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> (len &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">/&lt;/span> &lt;span style="color:#fab387">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> s.substr(start, max_len);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Manacher&amp;#39;s Algorithm (O(n))
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>string &lt;span style="color:#89b4fa">manacher_algorithm&lt;/span>(string s) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 전처리: 문자 사이에 특수 문자 삽입
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> string processed &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;#&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">char&lt;/span> &lt;span style="color:#89dceb">c&lt;/span> : s) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> processed &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> processed &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;#&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> processed.length();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> radius(n, &lt;span style="color:#fab387">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> center &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>, right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> radius[i] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> min(right &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> i, radius[&lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> center &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 중심 확장
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">while&lt;/span> (i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> radius[i] &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> radius[i] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> processed[i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> radius[i] &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> processed[i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> radius[i] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> radius[i]&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 오른쪽 경계 갱신
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> (i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> radius[i] &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> center &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> radius[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 최장 회문 찾기
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#f38ba8">int&lt;/span> max_len &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>, center_idx &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (radius[i] &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> max_len) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_len &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> radius[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> center_idx &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> start &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (center_idx &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> max_len) &lt;span style="color:#89dceb;font-weight:bold">/&lt;/span> &lt;span style="color:#fab387">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> s.substr(start, max_len);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="접미사-배열">접미사 배열&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 단순 구현 O(n²log n)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> suffix_array_naive(string s) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s.length();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>pair&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>string, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> suffixes;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> suffixes.push_back({s.substr(i), i});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sort(suffixes.begin(), suffixes.end());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> sa;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#cba6f7">const&lt;/span> &lt;span style="color:#cba6f7">auto&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#89dceb">suffix&lt;/span> : suffixes) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sa.push_back(suffix.second);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> sa;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// LCP 배열
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> lcp_array(string s, vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> sa) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s.length();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> rank(n), lcp(n &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rank[sa[i]] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> h &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (rank[i] &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> sa[rank[i] &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> h &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> h &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> s[i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> h] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> s[j &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> h]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lcp[rank[i] &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> h;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (h &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span>) h&lt;span style="color:#89dceb;font-weight:bold">--&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> lcp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="트라이-trie">트라이 (Trie)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">class&lt;/span> &lt;span style="color:#f9e2af">TrieNode&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">public&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TrieNode&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> children[&lt;span style="color:#fab387">26&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">bool&lt;/span> is_end;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TrieNode() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> is_end &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#fab387">26&lt;/span>; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> children[i] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">nullptr&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">class&lt;/span> &lt;span style="color:#f9e2af">Trie&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">private&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TrieNode&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> root;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">public&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Trie() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> root &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">new&lt;/span> TrieNode();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">void&lt;/span> &lt;span style="color:#89b4fa">insert&lt;/span>(string word) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TrieNode&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> node &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> root;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">char&lt;/span> &lt;span style="color:#89dceb">c&lt;/span> : word) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> idx &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> c &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;a&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (&lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>node&lt;span style="color:#89dceb;font-weight:bold">-&amp;gt;&lt;/span>children[idx]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node&lt;span style="color:#89dceb;font-weight:bold">-&amp;gt;&lt;/span>children[idx] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">new&lt;/span> TrieNode();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> node&lt;span style="color:#89dceb;font-weight:bold">-&amp;gt;&lt;/span>children[idx];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node&lt;span style="color:#89dceb;font-weight:bold">-&amp;gt;&lt;/span>is_end &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">bool&lt;/span> &lt;span style="color:#89b4fa">search&lt;/span>(string word) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TrieNode&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> node &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> root;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">char&lt;/span> &lt;span style="color:#89dceb">c&lt;/span> : word) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> idx &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> c &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;a&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (&lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>node&lt;span style="color:#89dceb;font-weight:bold">-&amp;gt;&lt;/span>children[idx]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> node&lt;span style="color:#89dceb;font-weight:bold">-&amp;gt;&lt;/span>children[idx];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> node&lt;span style="color:#89dceb;font-weight:bold">-&amp;gt;&lt;/span>is_end;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">bool&lt;/span> &lt;span style="color:#89b4fa">starts_with&lt;/span>(string prefix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TrieNode&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> node &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> root;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">char&lt;/span> &lt;span style="color:#89dceb">c&lt;/span> : prefix) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> idx &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> c &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;a&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (&lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>node&lt;span style="color:#89dceb;font-weight:bold">-&amp;gt;&lt;/span>children[idx]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> node &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> node&lt;span style="color:#89dceb;font-weight:bold">-&amp;gt;&lt;/span>children[idx];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-문자열-처리-주요-함정">🚨 문자열 처리 주요 함정&lt;/h3>
&lt;ul>
&lt;li>문자열 인덱스 범위 체크&lt;/li>
&lt;li>유니코드 처리 주의&lt;/li>
&lt;li>해시 충돌 가능성&lt;/li>
&lt;li>메모리 사용량 (특히 Trie)&lt;/li>
&lt;/ul>
&lt;h2 id="-3단계-핵심-요약">📝 3단계 핵심 요약&lt;/h2>
&lt;h3 id="필수-암기-템플릿">필수 암기 템플릿&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>DFS/BFS&lt;/strong>: 그래프 탐색의 기본&lt;/li>
&lt;li>&lt;strong>이진탐색&lt;/strong>: lower_bound, upper_bound, 매개변수 탐색&lt;/li>
&lt;li>&lt;strong>투 포인터&lt;/strong>: 연속 부분배열, 두 수의 합&lt;/li>
&lt;li>&lt;strong>슬라이딩 윈도우&lt;/strong>: 고정/가변 크기 윈도우&lt;/li>
&lt;li>&lt;strong>그리디&lt;/strong>: 정렬 후 선택, 증명 필요&lt;/li>
&lt;li>&lt;strong>DP&lt;/strong>: 상태 정의가 핵심, 점화식 도출&lt;/li>
&lt;/ol>
&lt;h3 id="알고리즘-선택-가이드">알고리즘 선택 가이드&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>완전탐색 가능?&lt;/strong> → DFS/BFS&lt;/li>
&lt;li>&lt;strong>정렬된 데이터?&lt;/strong> → 이진탐색&lt;/li>
&lt;li>&lt;strong>연속된 구간?&lt;/strong> → 투 포인터/슬라이딩 윈도우&lt;/li>
&lt;li>&lt;strong>최적 부분구조?&lt;/strong> → DP&lt;/li>
&lt;li>&lt;strong>탐욕적 선택?&lt;/strong> → 그리디&lt;/li>
&lt;li>&lt;strong>문자열 패턴?&lt;/strong> → KMP/라빈-카프/Trie&lt;/li>
&lt;/ul>
&lt;h3 id="시간복잡도-체크리스트">시간복잡도 체크리스트&lt;/h3>
&lt;ul>
&lt;li>O(2^n): 부분집합, 완전탐색&lt;/li>
&lt;li>O(n!): 순열&lt;/li>
&lt;li>O(n³): 3중 반복문, 플로이드&lt;/li>
&lt;li>O(n²): 2중 반복문, 단순 DP&lt;/li>
&lt;li>O(n log n): 정렬, 이진탐색 기반&lt;/li>
&lt;li>O(n): 선형 탐색, 투 포인터&lt;/li>
&lt;li>O(log n): 이진탐색&lt;/li>
&lt;li>O(1): 해시 테이블 접근&lt;/li>
&lt;/ul></description></item><item><title>효율적인 리눅스 명령어 사용의 기술</title><link>https://smallzoodev.netlify.app/_wiki/effective-linux-oreily/</link><pubDate>Sat, 21 Jun 2025 11:03:21 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/effective-linux-oreily/</guid><description>&lt;h1 id="리눅스-명령어-학습-체크리스트">리눅스 명령어 학습 체크리스트&lt;/h1>
&lt;h2 id="1부-핵심-개념">&lt;strong>1부 핵심 개념&lt;/strong>&lt;/h2>
&lt;h3 id="1장-리눅스-명령-결합하기">1장 리눅스 명령 결합하기&lt;/h3>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 1.1 입력과 출력, 그리고 파이프&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 1.2 기본 명령 여섯 가지
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 1.2.1 첫 번째 명령 - wc&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 1.2.2 두 번째 명령 - head&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 1.2.3 세 번째 명령 - cut&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 1.2.4 네 번째 명령 - grep&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 1.2.5 다섯 번째 명령 - sort&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 1.2.6 여섯 번째 명령 - uniq&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 1.3 중복 파일 찾아내기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 1.4 정리&lt;/li>
&lt;/ul>
&lt;h3 id="2장-셸과-친해지기">2장 셸과 친해지기&lt;/h3>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 2.1 셸에 관한 용어&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 2.2 파일명 패턴 매칭&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 2.3 변수 값의 평가
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 2.3.1 변수 값의 출처는 어디일까?&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 2.3.2 변수에 대해 오해하기 쉬운 것&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 2.3.3 패턴과 변수&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 2.4 별명을 사용해 명령 단축하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 2.5 입력과 출력 리다이렉트하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 2.6 따옴표와 이스케이프를 이용해 변수의 평가를 차단하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 2.7 실행할 프로그램 찾기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 2.8 환경 설정 및 초기화 파일, 간단히 설명하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 2.9 정리&lt;/li>
&lt;/ul>
&lt;h3 id="3장-실행했던-명령을-다시-실행하기">3장 실행했던 명령을 다시 실행하기&lt;/h3>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 3.1 명령 히스토리 열람하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 3.2 명령 히스토리에서 이전 명령 불러오기
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 3.2.1 명령 히스토리를 거슬러 올라가기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 3.2.2 히스토리 확장&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 3.2.3 파일 삭제 실수는 이제 안녕(명령 히스토리를 활용한 방법)&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 3.2.4 명령 히스토리에 대한 증분 검색&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 3.3 명령행 편집
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 3.3.1 명령어 안에서 커서를 옮겨가며 편집하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 3.3.2 캐럿을 이용한 히스토리 확장&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 3.3.3 이맥스 및 Vim 스타일의 명령행 편집&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 3.4 정리&lt;/li>
&lt;/ul>
&lt;h3 id="4장-파일-시스템을-자유롭게-이동하기">4장 파일 시스템을 자유롭게 이동하기&lt;/h3>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 4.1 특정한 디렉터리로 빠르게 이동하기
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 4.1.1 홈 디렉터리로 빠르게 이동하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 4.1.2 탭 자동 완성을 이용한 빠른 디렉터리 이동&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 4.1.3 별명 또는 환경변수를 이용해 자주 사용하는 디렉터리로 빠르게 이동하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 4.1.4 CDPATH 설정을 이용한 간편 디렉터리 이동&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 4.1.5 빠른 이동을 위한 홈 디렉터리 구성하기&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 4.2 이전 디렉터리로 편리하게 돌아가기
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 4.2.1 &amp;lsquo;cd -&amp;lsquo;로 두 디렉터리 사이를 반복해서 오가기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 4.2.2 pushd와 popd로 세 개 이상의 디렉터리를 반복해서 오가기&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 4.3 정리&lt;/li>
&lt;/ul>
&lt;h2 id="2부-응용-기법">&lt;strong>2부 응용 기법&lt;/strong>&lt;/h2>
&lt;h3 id="5장-리눅스-명령을-몸에-익히기">5장 리눅스 명령을 몸에 익히기&lt;/h3>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 5.1 텍스트 생성하기
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 5.1.1 date 명령&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 5.1.2 seq 명령&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 5.1.3 중괄호 확장(셸 내장 기능)&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 5.1.4 find 명령&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 5.1.5 yes 명령&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 5.2 문자열 추출하기
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 5.2.1 단순 문자열 일치 그 이상의 기능: grep&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 5.2.2 tail 명령&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 5.2.3 awk {print} 명령&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 5.3 텍스트 결합하기
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 5.3.1 tac 명령&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 5.3.2 paste 명령&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 5.3.3 diff 명령&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 5.4 텍스트 변환하기
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 5.4.1 tr 명령&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 5.4.2 rev 명령&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 5.4.3 awk 명령과 sed 명령&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 5.5 더 많은 리눅스 명령 익히기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 5.6 정리&lt;/li>
&lt;/ul>
&lt;h3 id="6장-부모-프로세스와-자식-프로세스-그리고-환경">6장 부모 프로세스와 자식 프로세스, 그리고 환경&lt;/h3>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 6.1 셸은 실행 파일이다&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 6.2 부모 프로세스와 자식 프로세스&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 6.3 환경변수
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 6.3.1 환경변수 만들기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 6.3.2 오해하기 쉬운 것 - &amp;lsquo;전역&amp;rsquo; 변수&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 6.4 자식 셸과 하위 셸&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 6.5 환경 설정하기
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 6.5.1 설정 파일 다시 읽어들이기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 6.5.2 다른 컴퓨터로 환경 파일 가져가기&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 6.6 정리&lt;/li>
&lt;/ul>
&lt;h3 id="7장-명령을-실행하는-열한-가지-방법">7장 명령을 실행하는 열한 가지 방법&lt;/h3>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 7.1 리스트 형태로 명령 실행하기
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 7.1.1 첫 번째 방법: 조건부 리스트 사용하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 7.1.2 두 번째 방법: 무조건 리스트 사용하기&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 7.2 치환으로 명령 실행하기
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 7.2.1 세 번째 방법: 명령 치환하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 7.2.2 네 번째 방법: 프로세스 치환하기&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 7.3 문자열로 명령 실행하기
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 7.3.1 다섯 번째 방법: bash에 문자열을 인수로 전달해 명령으로 실행하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 7.3.2 여섯 번째 방법: bash에 문자열을 파이핑해 명령 실행하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 7.3.3 일곱 번째 방법: ssh를 사용해 원격에서 문자열을 명령으로 실행하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 7.3.4 여덟 번째 방법: xargs를 사용해 명령의 연속열 실행하기&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 7.4 프로세스를 제어해 명령 실행하기
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 7.4.1 아홉 번째 방법: 백그라운드 실행하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 7.4.2 열 번째 방법: 명시적 하위 셸&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 7.4.3 열한 번째 방법: 프로세스 교체하기&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 7.5 정리&lt;/li>
&lt;/ul>
&lt;h3 id="8장-한-줄로-끝내는-명령-작성하기">8장 한 줄로 끝내는 명령 작성하기&lt;/h3>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 8.1 한 줄로 끝내는 명령을 작성하기 위해 필요한 것
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 8.1.1 유연한 사고&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 8.1.2 시작점 정하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 8.1.3 작성된 명령을 테스트하기&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 8.2 연속열에 파일명 삽입하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 8.3 파일의 쌍 확인하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 8.4 홈 디렉터리 구조로부터 CDPATH 생성하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 8.5 테스트용 파일 만들기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 8.6 빈 파일 생성하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 8.7 정리&lt;/li>
&lt;/ul>
&lt;h3 id="9장-텍스트-파일-활용하기">9장 텍스트 파일 활용하기&lt;/h3>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 9.1 첫 번째 예제: 파일 찾기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 9.2 두 번째 예제: 도메인 만료 일자 확인하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 9.3 세 번째 예제: 지역 코드 데이터베이스 구축하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 9.4 네 번째 예제: 패스워드 관리 도구 만들기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 9.5 정리&lt;/li>
&lt;/ul>
&lt;h2 id="3부-그-외-주제">&lt;strong>3부 그 외 주제&lt;/strong>&lt;/h2>
&lt;h3 id="10장-효율은-키보드에서-나온다">10장 효율은 키보드에서 나온다&lt;/h3>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 10.1 창 다루기
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 10.1.1 터미널 창과 웹 브라우저 창 바로 띄우기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 10.1.2 원샷 윈도&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 10.1.3 웹 브라우저 단축키&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 10.1.4 창과 바탕화면 전환하기&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 10.2 명령행으로 웹 검색하기
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 10.2.1 명령행에서 웹 브라우저 실행하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 10.2.2 wget과 curl을 사용해 HTML 내려받기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 10.2.3 HTML-XML 유틸리티를 이용한 HTML 처리&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 10.2.4 텍스트 기반 웹 브라우저에서 렌더링된 웹 콘텐츠 내려받기&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 10.3 명령행에서 클립보드 다루기
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 10.3.1 셀렉션을 표준 입력과 표준 출력 스트림에 연결하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 10.3.2 패스워드 관리 도구 개선하기&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 10.4 정리&lt;/li>
&lt;/ul>
&lt;h3 id="11장-시간을-절약하는-팁">11장 시간을 절약하는 팁&lt;/h3>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 11.1 빠른 자가 승리한다
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 11.1.1 less 명령에서 편집기로 바로 이동하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 11.1.2 지정된 문자열이 포함된 파일을 편집하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 11.1.3 잦은 오타를 자동 처리하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 11.1.4 빠르게 빈 파일을 생성하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 11.1.5 한 줄씩 파일 처리하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 11.1.6 재귀 실행을 지원하는 명령 확인하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 11.1.7 man 도움말 읽기&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 11.2 장기적인 학습이 필요한 것들
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 11.2.1 bash의 man 도움말 읽기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 11.2.2 cron, crontab, at 익히기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 11.2.3 rsync 명령 익히기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 11.2.4 다른 스크립트 언어 익히기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 11.2.5 프로그래밍이 아닌 작업에 make 명령 활용하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 11.2.6 일상적으로 수정하는 파일에 형상 관리 적용하기&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 11.3 정리&lt;/li>
&lt;/ul>
&lt;h3 id="부록-a-리눅스-기초-사용법">부록 A 리눅스 기초 사용법&lt;/h3>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> A.1 명령과 인수, 옵션&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> A.2 파일 시스템과 디렉터리, 경로&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> A.3 디렉터리 이동하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> A.4 파일 생성 및 편집하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> A.5 파일 및 디렉터리 다루기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> A.6 파일 내용 확인하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> A.7 파일 권한 조정하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> A.8 프로세스 다루기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> A.9 참조 문서 보기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> A.10 셸 스크립트&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> A.11 슈퍼 유저 권한 획득하기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> A.12 참고 도서 목록&lt;/li>
&lt;/ul></description></item><item><title>세마포어와 뮤텍스 🔄</title><link>https://smallzoodev.netlify.app/_wiki/semaphore-mutex/</link><pubDate>Thu, 12 Jun 2025 20:09:32 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/semaphore-mutex/</guid><description>여러가지 사유로 자주 맞닥뜨려서 다시 정리</description></item><item><title>프로그래밍 러스트 💭</title><link>https://smallzoodev.netlify.app/_wiki/programming-rust/</link><pubDate>Sat, 07 Jun 2025 12:45:57 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/programming-rust/</guid><description>&lt;blockquote>
&lt;p>모든 내용 출처는 : &lt;a href="https://product.kyobobook.co.kr/detail/S000200629958?utm_source=google&amp;amp;utm_medium=cpc&amp;amp;utm_campaign=googleSearch&amp;amp;gt_network=g&amp;amp;gt_keyword=&amp;amp;gt_target_id=aud-901091942354:dsa-435935280379&amp;amp;gt_campaign_id=9979905549&amp;amp;gt_adgroup_id=132556570510&amp;amp;gad_source=1">프로그래밍-러스트&lt;/a>&lt;/p>&lt;/blockquote>
&lt;h2 id="타입-관련">타입 관련&lt;/h2>
&lt;ul>
&lt;li>길이는 타입의 일부, 슬라이스는 길이 제한이 없으므로 변수에 직접 저장하거나 함수 인수로 전달할 수 없다.&lt;/li>
&lt;li>슬라이스 레퍼런스는 팻 포인터로 슬라이스의 첫 번째 요소를 가리키는 포인터와 그 안에 있는 요소의 개수로 구성되는 2워드 크기의 값이다.&lt;/li>
&lt;/ul>
&lt;h2 id="이동-관련">이동 관련&lt;/h2>
&lt;ul>
&lt;li>러스트에서는 모든 이동이 원본을 미초기화 상태로 두는 바이트 단위의 얕은 복사다.&lt;/li>
&lt;li>복사는 원본의 초기화 상태를 유지한다는 점만 제외하면 이도오가 똑같다.&lt;/li>
&lt;li>이동과 레퍼런스 카운트 기반의 포인터는 소유 관계 트리의 경직성을 완화하는 두가지 방법이다.&lt;/li>
&lt;/ul>
&lt;h2 id="참조-관련">참조 관련&lt;/h2>
&lt;ul>
&lt;li>cpp의 역참조는 암시적으로 이루어지고, 러스트의 역참조는 명시적으로 이루어진다. 하지만 &lt;code>.&lt;/code>연산은 암시적 역참조를 해준다.&lt;/li>
&lt;li>특히나 &lt;code>.&lt;/code>연산자는 피연산자의 암묵적으로 피연산자의 레퍼런스를 차용할 수 있다.&lt;/li>
&lt;/ul>
&lt;h2 id="라이프타임-관련">라이프타임 관련&lt;/h2>
&lt;ul>
&lt;li>변수의 수명은 자신에게서 차용된 레퍼런스의 수명을 포함(contain)하거나, 에워싸야(enclose)한다.&lt;/li>
&lt;li>또 다른 제약 조건은, 변수에 레퍼런스를 저장할 때, 레퍼런스의 타입이 변수의 전체 수명, 즉 변수가 초기화되는 지점부터 마지막으로 사용되는 지점까지 내내 유효해야한다는 것이다.
&lt;img src="https://github.com/user-attachments/assets/d319448b-dfe6-4e12-844a-ca5c2ad77afe" alt="rustlifetime">&lt;/li>
&lt;li>&lt;code>f(p: &amp;amp;'static i32)&lt;/code> : 레퍼런스를 전역변수에 담아두려는 의도를 시그니처에 드러내지 않고서는 원하는 행동을 할 수 없다.&lt;/li>
&lt;li>반대로 &lt;code>f&amp;lt;'a&amp;gt;(p: &amp;amp;a' i32)&lt;/code> : 인수 p가 함수의 호출 구간보더 더 긴 수명을 가진 어딘가에 보관되는 일이 없다는 걸 알 수 있다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://github.com/user-attachments/assets/f8cd7d24-0a80-4af7-b667-bf277889c032" alt="lifetimerust">&lt;/p></description></item><item><title>비트마스킹 + dfs</title><link>https://smallzoodev.netlify.app/_wiki/boj-p2234/</link><pubDate>Thu, 29 May 2025 21:05:12 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p2234/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/CodingInterviewKotlin/blob/main/src/main/kotlin/problems/baekjoon/p2234/Main.kt">kotlin soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>비트마스킹 + dfs 풀이&lt;/li>
&lt;li>각 방의 크기를 전부 계산하고 방 번호를 마킹한다.&lt;/li>
&lt;li>방이 다른 경우 방을 합쳐보는 식으로 브루트 포스 탐색&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">package&lt;/span> &lt;span style="color:#fab387">problems.baekjoon.p2234&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">import&lt;/span> &lt;span style="color:#fab387">java.io.BufferedReader&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">import&lt;/span> &lt;span style="color:#fab387">java.io.InputStreamReader&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fun&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() = with(BufferedReader(InputStreamReader(&lt;span style="color:#f9e2af">System&lt;/span>.`in`))) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#f38ba8">(&lt;/span>&lt;span style="color:#fab387">x&lt;/span>, y) = readLine()&lt;span style="color:#89dceb;font-weight:bold">!!&lt;/span>.split(&lt;span style="color:#a6e3a1">&amp;#34; &amp;#34;&lt;/span>).map { &lt;span style="color:#cba6f7">it&lt;/span>.toInt() }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">graph&lt;/span> = mutableListOf&amp;lt;MutableList&amp;lt;Int&amp;gt;&amp;gt;()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> repeat(y) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graph.add(readLine()&lt;span style="color:#89dceb;font-weight:bold">!!&lt;/span>.split(&lt;span style="color:#a6e3a1">&amp;#34; &amp;#34;&lt;/span>).map { &lt;span style="color:#cba6f7">it&lt;/span>.toInt() }.toMutableList())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">roomId&lt;/span> = MutableList(y) { MutableList(x) { -&lt;span style="color:#fab387">1&lt;/span> } }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">roomSizes&lt;/span> = mutableListOf&amp;lt;Int&amp;gt;()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">var&lt;/span> &lt;span style="color:#fab387">roomCount&lt;/span> = &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span> until y) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (j &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span> until x) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (roomId[i][j] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> -&lt;span style="color:#fab387">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">size&lt;/span> = dfs(graph, roomId, i, j, y, x, roomCount)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> roomSizes.add(size)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> roomCount&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">maxRoomSize&lt;/span> = roomSizes.maxOrNull() &lt;span style="color:#89dceb;font-weight:bold">?:&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">var&lt;/span> &lt;span style="color:#fab387">maxAfterBreaking&lt;/span> = &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">movable&lt;/span> = arrayOf(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fab387">0&lt;/span> to -&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#6c7086;font-style:italic">// 서 (비트 0)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> -&lt;span style="color:#fab387">1&lt;/span> to &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#6c7086;font-style:italic">// 북 (비트 1)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#fab387">0&lt;/span> to &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#6c7086;font-style:italic">// 동 (비트 2)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#fab387">1&lt;/span> to &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#6c7086;font-style:italic">// 남 (비트 3)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span> until y) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (j &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span> until x) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (wall &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span> until &lt;span style="color:#fab387">4&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> ((&lt;span style="color:#fab387">1&lt;/span> shl wall) and graph[i][j] &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">ni&lt;/span> = i + movable[wall].first
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">nj&lt;/span> = j + movable[wall].second
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (ni &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> nj &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> ni &amp;lt; y &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> nj &amp;lt; x) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">room1&lt;/span> = roomId[i][j]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">room2&lt;/span> = roomId[ni][nj]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (room1 &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> room2) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">combinedSize&lt;/span> = roomSizes[room1] + roomSizes[room2]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxAfterBreaking = maxOf(maxAfterBreaking, combinedSize)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(roomCount)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(maxRoomSize)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(maxAfterBreaking)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fun&lt;/span> &lt;span style="color:#89b4fa">dfs&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graph: MutableList&amp;lt;MutableList&amp;lt;Int&amp;gt;&amp;gt;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> roomId: MutableList&amp;lt;MutableList&amp;lt;Int&amp;gt;&amp;gt;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y: Int,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x: Int,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> my: Int,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mx: Int,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> currentRoomId: Int
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>): Int {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">movable&lt;/span> = arrayOf(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fab387">0&lt;/span> to -&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#6c7086;font-style:italic">// 서 (비트 0)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> -&lt;span style="color:#fab387">1&lt;/span> to &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#6c7086;font-style:italic">// 북 (비트 1)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#fab387">0&lt;/span> to &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#6c7086;font-style:italic">// 동 (비트 2)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#fab387">1&lt;/span> to &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#6c7086;font-style:italic">// 남 (비트 3)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> roomId[y][x] = currentRoomId
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">var&lt;/span> &lt;span style="color:#fab387">roomSize&lt;/span> = &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span> until &lt;span style="color:#fab387">4&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> ((&lt;span style="color:#fab387">1&lt;/span> shl i) and graph[y][x] &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">ny&lt;/span> = y + movable[i].first
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">nx&lt;/span> = x + movable[i].second
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (ny &amp;lt; &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> nx &amp;lt; &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> ny &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> my &lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> nx &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> mx) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (roomId[ny][nx] &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> -&lt;span style="color:#fab387">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> roomSize &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> dfs(graph, roomId, ny, nx, my, mx, currentRoomId)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> roomSize
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>분산환경에서 결제 구현하기 💭</title><link>https://smallzoodev.netlify.app/_wiki/repair-center/</link><pubDate>Wed, 28 May 2025 00:51:19 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/repair-center/</guid><description>&lt;h2 id="as-is">As-Is&lt;/h2>
&lt;hr>
&lt;p>&lt;img src="https://github.com/user-attachments/assets/80460bf6-6f77-4671-bba9-953ef11e42a3" alt="pg">&lt;/p>
&lt;h3 id="일반적인-그리고-기존-결제-흐름">일반적인 그리고 기존 결제 흐름&lt;/h3>
&lt;ol>
&lt;li>클라이언트가 결제를 요청&lt;/li>
&lt;li>서버가 결제를 진행하는데 필요한 정보를 응답&lt;/li>
&lt;li>해당 내용을 토대로 pg사 호출&lt;/li>
&lt;li>pg사의 사용자 인증 이후 콜백&lt;/li>
&lt;li>콜백받은 정보를 상태로 저장하고 있던 정보와 대조하고, 문제없으면 pg사로 승인 api 호출&lt;/li>
&lt;li>pg사의 승인 응답&lt;/li>
&lt;li>승인 여부를 db에 저장 (결제 승인 응답, 로그, 대사작업에 필요한 정보 등)&lt;/li>
&lt;li>회계처리를 진행하는 서버에 저장&lt;/li>
&lt;/ol>
&lt;h2 id="to-be">To-Be&lt;/h2>
&lt;hr>
&lt;h3 id="새로운-요구사항들-배경">새로운 요구사항들 (배경)&lt;/h3>
&lt;ol>
&lt;li>회사 그룹의 오프라인 매장에서 판매된 상품까지 수선 서비스의 대상이 됨에 따라서 다른 계열사와의 협업이 필요하게 되었다.&lt;/li>
&lt;li>온오프라인 자사 상품을 관리하는 별도의 서버와 통신하며 구현해야 했다.&lt;/li>
&lt;li>의사결정된 내용은 비즈니스 로직과 기존 로직들은 기존처럼 처리하고 처리한 결과를 forward해서 on/offline 서비스에 저장, 그 외에 회계처리만 저쪽 서버에서 진행하기로 했다.&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>비즈니스 로직을 처리하고 포워드, 해당 서버로부터 전달 받은 데이터를 통해 비즈니스 로직을 처리하는건 별로 어려운 일은 아니었다. 기본적으로 동시성 이슈가 발생 할 일이 거의 없는 사용자 관련 데이터를 위주로 여러 데이터 소스에서 불러온 데이터를 기반으로 간단하게 검증하는 로직이 전부였다. 문제는 결제쪽이었는데..😕&lt;/p></description></item><item><title>dp 파이프 이동 1</title><link>https://smallzoodev.netlify.app/_wiki/boj-p17070/</link><pubDate>Sun, 25 May 2025 12:20:54 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p17070/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_17070.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>&lt;code>dp[y][x][state] = ways&lt;/code>&lt;/li>
&lt;li>지금 파이프 끝의 좌표와 상태에 도달할 수 있는 경우를 바텀업 방식으로 dp&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#[allow(clippy::all)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#[allow(unused_must_use, unused_doc_comments)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">solve&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>R: &lt;span style="color:#f9e2af">BufRead&lt;/span>, W: &lt;span style="color:#f9e2af">Write&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>(io: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f9e2af">mut&lt;/span> &lt;span style="color:#f9e2af">IO&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>R, W&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>) -&amp;gt; &lt;span style="color:#89dceb">Option&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>()&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io.get(&lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#cba6f7">usize&lt;/span>)&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> grid &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io.get(&lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#cba6f7">usize&lt;/span>; n]; n])&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 0 - horizontal, 1 - vertical, 2 - diagonal
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#6c7086;font-style:italic">// dp[i][j][파이프상태] = 경우의 수
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> dp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#cba6f7">usize&lt;/span>; &lt;span style="color:#fab387">3&lt;/span>]; n]; n];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 초기 상태: (0, 1)에 horizontal 파이프
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> dp[&lt;span style="color:#fab387">0&lt;/span>][&lt;span style="color:#fab387">1&lt;/span>][&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> j &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> grid[i][j] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">1&lt;/span> { &lt;span style="color:#cba6f7">continue&lt;/span>; } &lt;span style="color:#6c7086;font-style:italic">// 벽인 경우 건너뛰기
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 현재 위치에서 가능한 각 상태에 대해
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">for&lt;/span> state &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>&lt;span style="color:#fab387">3&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> dp[i][j][state] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span> { &lt;span style="color:#cba6f7">continue&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 다음 가능한 이동들 계산
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> moves &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> get_possible_moves(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>grid, i, j, n, state);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> PipeState(next_state, ny, nx) &lt;span style="color:#cba6f7">in&lt;/span> moves {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[ny][nx][next_state] &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> dp[i][j][state];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 목표 지점 (n-1, n-1)에 도달하는 모든 경우의 수 합산
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dp[n &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>][n &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>][&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dp[n &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>][n &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>][&lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dp[n &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>][n &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>][&lt;span style="color:#fab387">2&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> io.put(result).nl();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">struct&lt;/span> &lt;span style="color:#f9e2af">PipeState&lt;/span>(&lt;span style="color:#f38ba8">usize&lt;/span>, &lt;span style="color:#f38ba8">usize&lt;/span>, &lt;span style="color:#f38ba8">usize&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// (state, y, x)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">get_possible_moves&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> grid: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>[&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y: &lt;span style="color:#f38ba8">usize&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x: &lt;span style="color:#f38ba8">usize&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_size: &lt;span style="color:#f38ba8">usize&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current_state: &lt;span style="color:#f38ba8">usize&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) -&amp;gt; &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>PipeState&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> moves &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">Vec&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> max_size &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> grid[y][x &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> down &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> y &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> max_size &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> grid[y &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>][x] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> diag &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> max_size &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> y &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> max_size &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> grid[y][x &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> grid[y &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>][x] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> grid[y &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>][x &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 수평 이동 (현재가 수평 또는 대각선일 때)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> (current_state &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> current_state &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">2&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> moves.push(PipeState(&lt;span style="color:#fab387">0&lt;/span>, y, x &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 수직 이동 (현재가 수직 또는 대각선일 때)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> down &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> (current_state &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> current_state &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">2&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> moves.push(PipeState(&lt;span style="color:#fab387">1&lt;/span>, y &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>, x));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 대각선 이동 (모든 상태에서 가능)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> diag {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> moves.push(PipeState(&lt;span style="color:#fab387">2&lt;/span>, y &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>, x &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> moves
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>dp 외판원 문제 🤨</title><link>https://smallzoodev.netlify.app/_wiki/boj-p2098/</link><pubDate>Sun, 25 May 2025 10:55:39 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p2098/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_2098.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>못풀었다! 🥲&lt;/li>
&lt;li>비트마스킹을 써서 쓰는 풀이가 있는걸 알았는데, 그걸 떠올리지 못하고 시간을 보내다가 지쳐서 다른 코드를 참고했다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">tsp&lt;/span>(n: &lt;span style="color:#f38ba8">usize&lt;/span>, grid: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>[&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>]) -&amp;gt; &lt;span style="color:#f38ba8">usize&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// dp[mask][i] = 지금 위치가 i 이며, mask로 표현된 도시를 방문했을때 최소 비용
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> dp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#f38ba8">usize&lt;/span>::&lt;span style="color:#f9e2af">MAX&lt;/span>; n]; &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> n];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 0001 0번 도시만 방문한 비용 0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> dp[&lt;span style="color:#fab387">1&lt;/span>][&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 모든 방문 경로에서
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">for&lt;/span> mask &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">1&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>(&lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> n) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 해당 반복문의 시작 지점을 찾는다
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// mask &amp;amp; (1 &amp;lt;&amp;lt; i) == 0 : 방문하지 않은 도시를 체크한다. 즉 방문하지 않은 도시에서 출발할 수 없다.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#6c7086;font-style:italic">// dp[mask][i] == usize::MAX 아직 도달하지 못한 경로
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> (mask &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> (&lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> i)) &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> dp[mask][i] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>::&lt;span style="color:#f9e2af">MAX&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 지금기준의 방문경로(mask)와 시작점(i) 다음 지점(j) 최소 비용을 구하고 memo
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">for&lt;/span> j &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (mask &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> (&lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> j)) &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> grid[i][j] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> next_mask &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mask &lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> (&lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> j);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[next_mask][j] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dp[next_mask][j].min(dp[mask][i] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> grid[i][j]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> full_mask &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (&lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> n) &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>::&lt;span style="color:#f9e2af">MAX&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">1&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> dp[full_mask][i] &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>::&lt;span style="color:#f9e2af">MAX&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> grid[i][&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#89dceb">Some&lt;/span>(cost) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dp[full_mask][i].checked_add(grid[i][&lt;span style="color:#fab387">0&lt;/span>]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> result.min(cost);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>solution을 풀어서 설명하면 다음과 같다&lt;/p></description></item><item><title>dp 팁 유형 정리 📚</title><link>https://smallzoodev.netlify.app/_wiki/dp-%EC%A0%95%EB%A6%AC/</link><pubDate>Sun, 25 May 2025 09:44:08 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/dp-%EC%A0%95%EB%A6%AC/</guid><description>&lt;h2 id="topdown-vs-bottomup">Topdown vs Bottomup&lt;/h2>
&lt;h3 id="topdown">Topdown&lt;/h3>
&lt;ul>
&lt;li>보통 재귀적인 형식&lt;/li>
&lt;li>재귀함수 호출로 인한 오버헤드&lt;/li>
&lt;/ul>
&lt;h3 id="bottomup">Bottomup&lt;/h3>
&lt;ul>
&lt;li>보통 반복문으로&lt;/li>
&lt;li>dp[target]까지 하위 모든 값을 생성&lt;/li>
&lt;/ul></description></item><item><title>빡구현 bfs</title><link>https://smallzoodev.netlify.app/_wiki/boj-p16932/</link><pubDate>Tue, 20 May 2025 22:06:00 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p16932/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_16932.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>너무 피곤해서 오늘은 쉬운걸로 dp하나 그래프 하나 풀어야지 했는데, dp는 쉽게 골랐지만 bfs를 실패했다.&lt;/li>
&lt;li>구역별 번호를 메기고 구역별 크기를 메모한다.&lt;/li>
&lt;li>0으로 되어있는 좌표를 순회하며 이어붙일 수 있는 구역을 식별한다.&lt;/li>
&lt;li>해당 좌표에 이어붙일 수 있는 모든구역을 max_size로 갱신한다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 16932 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/16932 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::collections::{HashSet, VecDeque}; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::Read; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::Write; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock(); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock(); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new(); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap(); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines(); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> first_line: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .next() 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .unwrap() 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace() 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap()) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect(); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> max_y &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> first_line[&lt;span style="color:#fab387">0&lt;/span>]; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> max_x &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> first_line[&lt;span style="color:#fab387">1&lt;/span>]; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> grid: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[]; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> targets: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>(&lt;span style="color:#f38ba8">usize&lt;/span>, &lt;span style="color:#f38ba8">usize&lt;/span>)&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[]; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>max_y { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> tmp: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .next() 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .unwrap() 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace() 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap()) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect(); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> j &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>tmp.len() { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> tmp[j] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span> { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> targets.push((i, j)); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } } 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> grid.push(tmp); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> group_id &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">2&lt;/span>; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> group_sizes: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#fab387">0&lt;/span>]; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> group_sizes.push(&lt;span style="color:#fab387">0&lt;/span>); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> visited &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#fab387">false&lt;/span>; max_x]; max_y]; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>max_y { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> j &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>max_x { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> grid[i][j] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>visited[i][j] { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> size &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> bfs(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> grid, &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> visited, i, j, group_id, max_y, max_x); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> group_sizes.push(size); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> group_id &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } } } 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> max_size &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> directions &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [(&lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>), (&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>), (&lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>), (&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>)]; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>(y, x) &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>targets { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> adj &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> HashSet::new(); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>(dy, dx) &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>directions { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> ny &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> y &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">isize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dy; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> nx &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> x &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">isize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dx; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> ny &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> ny &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> max_y &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">isize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> nx &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> nx &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> max_x &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">isize&lt;/span> { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> ny &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> ny &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> nx &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> nx &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> grid[ny][nx] &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">2&lt;/span> { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> adj.insert(grid[ny][nx]); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } } } 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> total_size &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>group &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>adj { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total_size &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> group_sizes[group]; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_size &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> max_size.max(total_size); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, max_size).unwrap(); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">bfs&lt;/span>( 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> grid: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f9e2af">mut&lt;/span> [&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>], 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f9e2af">mut&lt;/span> [&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>], 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> start_y: &lt;span style="color:#f38ba8">usize&lt;/span>, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> start_x: &lt;span style="color:#f38ba8">usize&lt;/span>, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> group_id: &lt;span style="color:#f38ba8">usize&lt;/span>, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_y: &lt;span style="color:#f38ba8">usize&lt;/span>, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_x: &lt;span style="color:#f38ba8">usize&lt;/span>, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) -&amp;gt; &lt;span style="color:#f38ba8">usize&lt;/span> { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> queue &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> VecDeque::new(); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue.push_back((start_y, start_x)); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited[start_y][start_x] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">true&lt;/span>; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> grid[start_y][start_x] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> group_id; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> size &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> directions &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [(&lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>), (&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>), (&lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>), (&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>)]; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#89dceb">Some&lt;/span>((y, x)) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> queue.pop_front() { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>(dy, dx) &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>directions { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> ny &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> y &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">isize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dy; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> nx &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> x &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">isize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dx; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> ny &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> ny &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> max_y &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">isize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> nx &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> nx &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> max_x &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">isize&lt;/span> { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> ny &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> ny &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> nx &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> nx &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> grid[ny][nx] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>visited[ny][nx] { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited[ny][nx] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">true&lt;/span>; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> grid[ny][nx] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> group_id; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue.push_back((ny, nx)); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } } } } 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> size 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Rust Professional Code 🦀</title><link>https://smallzoodev.netlify.app/_wiki/rust-professional-code/</link><pubDate>Mon, 19 May 2025 16:11:34 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/rust-professional-code/</guid><description>&lt;h1 id="rust-professional-code">Rust Professional Code&lt;/h1>
&lt;blockquote>
&lt;p>Rust-Professional-Code 책에 대한 내용정리, 간단하고 필요한 부분만 정리하여 개인 참고용&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>지금 나에게도 중요한 내용들도 많지만, 당장 나에게 필요하지는 않은 큰 프로젝트를 관리하는 방법, 다른 언어 바이너리와의 통합과 같은 것들이 많다.&lt;/li>
&lt;li>언젠가는 필요해지겠지만 그러한 내용들은 그 즈음에 읽어가는게 낫다는 생각이 들어 필요한 부분만 리마인드용으로 발췌해서 정리하려 한다.&lt;/li>
&lt;/ul>
&lt;h2 id="chapter-4-데이터-구조">Chapter 4 데이터 구조&lt;/h2>
&lt;h3 id="string-str-str-satic-str에-대한-설명">String, str, &amp;amp;str, &amp;amp;&amp;lsquo;satic str에 대한 설명&lt;/h3>
&lt;blockquote>
&lt;p>문자열 타입들이 많아 혼란스럽지만, 기본데이터(연속적인 문자의 열)와 상호작용하는 인터페이스를 나눠서 생각하는 것이 중요하다. 러스트에는 한 종류의 문자열만 있지만, 문자열을 할당하고 해당 문자열의 참조를 처리하는데에는 여러 가지 방법이 있다.&lt;/p></description></item><item><title>SQL 안티 패턴!</title><link>https://smallzoodev.netlify.app/_wiki/sql-anti-patterns/</link><pubDate>Sun, 18 May 2025 14:24:57 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/sql-anti-patterns/</guid><description>sql 안티 패턴 책 매일 한 장씩 소감남기기</description></item><item><title>dp 알파벳 코드 해독</title><link>https://smallzoodev.netlify.app/_wiki/boj-p2011/</link><pubDate>Sun, 18 May 2025 11:51:46 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p2011/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_2011.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>점화식을 알면 쉬운 문제&lt;/li>
&lt;li>직전원소와 마지막 원소가 유효한 알파벳이 되면 dp[i] = dp[i-1] + dp[i-2]&lt;/li>
&lt;li>아니면 dp[i] = d[i-1]&lt;/li>
&lt;li>그리고 점화식도 예시케이스를 모두 작성하면 우연치 않게 보인다.&lt;/li>
&lt;li>dp문제라는 감만 잡으면 쉽게 풀 수 있다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 2011
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/2011
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> chars: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">char&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> n.chars().collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> chars.is_empty() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;0&amp;#34;&lt;/span>).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> chars[&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;0&amp;#39;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;0&amp;#34;&lt;/span>).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> dp: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#fab387">0&lt;/span>; chars.len() &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[&lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">1&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>chars.len() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> current &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> chars[i] &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">u8&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#f38ba8">b&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;0&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> current &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> dp[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> prev &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> chars[i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">u8&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#f38ba8">b&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;0&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> two_digit &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> prev &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#fab387">10&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> current;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> prev &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> two_digit &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">10&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> two_digit &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> &lt;span style="color:#fab387">26&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> dp[i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> dp[i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;0&amp;#34;&lt;/span>).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">%=&lt;/span> &lt;span style="color:#fab387">1000000&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, dp[chars.len()]).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>dp 광고 비용 계산</title><link>https://smallzoodev.netlify.app/_wiki/boj-p1106/</link><pubDate>Sat, 17 May 2025 19:30:11 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p1106/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_1106.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>이건 그냥 개념&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 1106 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/1106 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::cmp::min; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write}; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock(); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock(); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new(); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap(); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines(); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> costs: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>(&lt;span style="color:#f38ba8">usize&lt;/span>, &lt;span style="color:#f38ba8">usize&lt;/span>)&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[]; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> first_line: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .next() 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .unwrap() 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace() 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap()) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect(); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> target &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> first_line[&lt;span style="color:#fab387">0&lt;/span>]; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> first_line[&lt;span style="color:#fab387">1&lt;/span>]; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> _ &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> tmp: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .next() 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .unwrap() 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace() 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap()) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect(); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> costs.push((tmp[&lt;span style="color:#fab387">0&lt;/span>], tmp[&lt;span style="color:#fab387">1&lt;/span>])); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> max_target &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> target &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">101&lt;/span>; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> dp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#f38ba8">usize&lt;/span>::&lt;span style="color:#f9e2af">MAX&lt;/span>; max_target &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>]; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>(max_target) { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> dp[i] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>::&lt;span style="color:#f9e2af">MAX&lt;/span> { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">continue&lt;/span>; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>(cost, customers) &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>costs { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> next &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> customers; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> next &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> max_target { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[next] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> min(dp[next], dp[i] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> cost); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } } } 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> output &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dp[target&lt;span style="color:#89dceb;font-weight:bold">..=&lt;/span>max_target].iter().min().unwrap(); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, output).unwrap(); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fun&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() = with(BufferedReader(InputStreamReader(&lt;span style="color:#f9e2af">System&lt;/span>.`in`))) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">firstLine&lt;/span> = readLine()&lt;span style="color:#89dceb;font-weight:bold">!!&lt;/span>.split(&lt;span style="color:#a6e3a1">&amp;#34; &amp;#34;&lt;/span>).map { &lt;span style="color:#cba6f7">it&lt;/span>.toInt() }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">target&lt;/span> = firstLine[&lt;span style="color:#fab387">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">cnt&lt;/span> = firstLine[&lt;span style="color:#fab387">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">costs&lt;/span> = mutableListOf&amp;lt;Pair&amp;lt;Int, Int&amp;gt;&amp;gt;()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> repeat(cnt) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">tmp&lt;/span> = readLine()&lt;span style="color:#89dceb;font-weight:bold">!!&lt;/span>.split(&lt;span style="color:#a6e3a1">&amp;#34; &amp;#34;&lt;/span>).map { &lt;span style="color:#cba6f7">it&lt;/span>.toInt() }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> costs.add(Pair(tmp[&lt;span style="color:#fab387">0&lt;/span>], tmp[&lt;span style="color:#fab387">1&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">maxVal&lt;/span> = target * &lt;span style="color:#fab387">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">dp&lt;/span> = MutableList(maxVal) { &lt;span style="color:#f9e2af">Int&lt;/span>.MAX_VALUE }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[&lt;span style="color:#fab387">0&lt;/span>] = &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span> until maxVal) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (dp[i] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#f9e2af">Int&lt;/span>.MAX_VALUE) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> ((cost, customers) &lt;span style="color:#cba6f7">in&lt;/span> costs) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">next&lt;/span> = i + customers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (next &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> maxVal) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[next] = min(dp[next], dp[i] + cost)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">var&lt;/span> &lt;span style="color:#fab387">minCost&lt;/span> = &lt;span style="color:#f9e2af">Int&lt;/span>.MAX_VALUE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (i &lt;span style="color:#cba6f7">in&lt;/span> target&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>maxVal) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (dp[i] &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> &lt;span style="color:#f9e2af">Int&lt;/span>.MAX_VALUE) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> minCost = min(minCost, dp[i])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(minCost)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>dp 스케줄 문제</title><link>https://smallzoodev.netlify.app/_wiki/boj-p15486/</link><pubDate>Sat, 17 May 2025 19:02:28 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p15486/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_15486.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>이건 그냥 개념&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::cmp::max;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> n: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> schedule: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#fab387">0&lt;/span>; n];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> payments: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#fab387">0&lt;/span>; n];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> tmp_line: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .next()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .unwrap()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> schedule[i] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> tmp_line[&lt;span style="color:#fab387">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> payments[i] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> tmp_line[&lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> dp: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#fab387">0&lt;/span>; n &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> max_profit &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_profit &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> max(max_profit, dp[i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> end_day &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> schedule[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> end_day &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[end_day] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> max(dp[end_day], max_profit &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> payments[i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> output &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> max(max_profit, dp[n]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, output).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fun&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() = with(BufferedReader(InputStreamReader(&lt;span style="color:#f9e2af">System&lt;/span>.`in`))) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">n&lt;/span> = readLine()&lt;span style="color:#89dceb;font-weight:bold">!!&lt;/span>.toInt()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">days&lt;/span> = mutableListOf&amp;lt;Int&amp;gt;()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">costs&lt;/span> = mutableListOf&amp;lt;Int&amp;gt;()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> repeat(n) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">tmp&lt;/span> = readLine()&lt;span style="color:#89dceb;font-weight:bold">!!&lt;/span>.split(&lt;span style="color:#a6e3a1">&amp;#34; &amp;#34;&lt;/span>).map { &lt;span style="color:#cba6f7">it&lt;/span>.toInt() }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> days.add(tmp[&lt;span style="color:#fab387">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> costs.add(tmp[&lt;span style="color:#fab387">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">dp&lt;/span> = MutableList(n + &lt;span style="color:#fab387">1&lt;/span>) { &lt;span style="color:#fab387">0&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">var&lt;/span> &lt;span style="color:#fab387">maxProfit&lt;/span> = &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span> until n) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxProfit = max(maxProfit, dp[i])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">end&lt;/span> = i + days[i]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (end &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> n) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[end] = max(dp[end], maxProfit + costs[i])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">output&lt;/span> = max(maxProfit, dp[n])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>&lt;span style="color:#a6e3a1">$output&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>dp 동전 문제</title><link>https://smallzoodev.netlify.app/_wiki/boj-p2293/</link><pubDate>Sat, 17 May 2025 18:06:47 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p2293/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_2293.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>이건 그냥 개념&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 2293
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/2293
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> first_line: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .next()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .unwrap()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> first_line[&lt;span style="color:#fab387">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> k &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> first_line[&lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> coins: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> _ &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> tmp: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> coins.push(tmp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> dp: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">i32&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#fab387">0&lt;/span>; k &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>coin &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>coins {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> coin&lt;span style="color:#89dceb;font-weight:bold">..=&lt;/span>k {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i] &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> dp[i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> coin];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> output &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dp[k];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, output).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fun&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() = with(BufferedReader(InputStreamReader(&lt;span style="color:#f9e2af">System&lt;/span>.`in`))) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">st&lt;/span> = StringTokenizer(readLine())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">n&lt;/span> = st.nextToken().toInt()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">k&lt;/span> = st.nextToken().toInt()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">coins&lt;/span> = IntArray(n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span> until n) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> coins[i] = readLine().toInt()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">dp&lt;/span> = IntArray(k + &lt;span style="color:#fab387">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[&lt;span style="color:#fab387">0&lt;/span>] = &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (coin &lt;span style="color:#cba6f7">in&lt;/span> coins) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (i &lt;span style="color:#cba6f7">in&lt;/span> coin&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>k) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i] &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> dp[i - coin]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(dp[k])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>구현이 귀찮은 dfs 문제</title><link>https://smallzoodev.netlify.app/_wiki/boj-p2468/</link><pubDate>Fri, 16 May 2025 16:12:32 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p2468/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_2468.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>이건 그냥 개념&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 2468
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/2468
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::cmp::max;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> n: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> water_max: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> graph: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> tmp: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .next()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .unwrap()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> tmp_max &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> tmp.iter().max().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> water_max &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> max(water_max, &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>tmp_max);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graph.push(tmp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> output: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> s &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>water_max {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> rain_dropped_graph &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> rain_drop(n, &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>graph, s);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> count: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> j &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> rain_dropped_graph[i][j] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">1&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dfs(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> rain_dropped_graph, i, j);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> count &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> max(count, output);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, output).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">rain_drop&lt;/span>(size: &lt;span style="color:#f38ba8">usize&lt;/span>, graph: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>[&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>], height: &lt;span style="color:#f38ba8">usize&lt;/span>) -&amp;gt; &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> result: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>size {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> tmp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#fab387">0&lt;/span>; size];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> j &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>size {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> graph[i][j] &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> height {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp[j] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result.push(tmp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">dfs&lt;/span>(graph: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f9e2af">mut&lt;/span> &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span>, y: &lt;span style="color:#f38ba8">usize&lt;/span>, x: &lt;span style="color:#f38ba8">usize&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graph[y][x] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> dy: [&lt;span style="color:#f38ba8">i32&lt;/span>; &lt;span style="color:#fab387">4&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> dx: [&lt;span style="color:#f38ba8">i32&lt;/span>; &lt;span style="color:#fab387">4&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>&lt;span style="color:#fab387">4&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> ny &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> y &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">i32&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dy[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> nx &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> x &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">i32&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dx[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> ny &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> ny &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> graph.len() &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">i32&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> nx &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> nx &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> graph[&lt;span style="color:#fab387">0&lt;/span>].len() &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">i32&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> ny &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> ny &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> nx &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> nx &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> graph[ny][nx] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">1&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dfs(graph, ny, nx);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fun&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() = with(BufferedReader(InputStreamReader(&lt;span style="color:#f9e2af">System&lt;/span>.`in`))) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">maxLength&lt;/span> = readLine()&lt;span style="color:#89dceb;font-weight:bold">!!&lt;/span>.toInt()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">graph&lt;/span> = List(maxLength) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> readLine()&lt;span style="color:#89dceb;font-weight:bold">!!&lt;/span>.split(&lt;span style="color:#a6e3a1">&amp;#34; &amp;#34;&lt;/span>).map { &lt;span style="color:#cba6f7">it&lt;/span>.toInt() }.toMutableList()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">maxHeight&lt;/span> = graph.maxOf { &lt;span style="color:#cba6f7">it&lt;/span>.maxOrNull() &lt;span style="color:#89dceb;font-weight:bold">?:&lt;/span> &lt;span style="color:#fab387">0&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">output&lt;/span> = (&lt;span style="color:#fab387">0&lt;/span> until maxHeight).maxOf { k &lt;span style="color:#89dceb;font-weight:bold">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">tmp&lt;/span> = rainDrop(graph, k)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">var&lt;/span> &lt;span style="color:#fab387">count&lt;/span> = &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span> until maxLength) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (j &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span> until maxLength) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (tmp[i][j] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dfs(tmp, i, j)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }.coerceAtLeast(&lt;span style="color:#fab387">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>&lt;span style="color:#a6e3a1">$output&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fun&lt;/span> &lt;span style="color:#89b4fa">rainDrop&lt;/span>(graph: List&amp;lt;MutableList&amp;lt;Int&amp;gt;&amp;gt;, target: Int): MutableList&amp;lt;MutableList&amp;lt;Int&amp;gt;&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> graph.map { line &lt;span style="color:#89dceb;font-weight:bold">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> line.map { &lt;span style="color:#cba6f7">if&lt;/span> (&lt;span style="color:#cba6f7">it&lt;/span> &amp;gt; target) &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#cba6f7">else&lt;/span> &lt;span style="color:#fab387">0&lt;/span> }.toMutableList()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }.toMutableList()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fun&lt;/span> &lt;span style="color:#89b4fa">dfs&lt;/span>(visited: MutableList&amp;lt;MutableList&amp;lt;Int&amp;gt;&amp;gt;, y: Int, x: Int) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">directions&lt;/span> = listOf(&lt;span style="color:#fab387">1&lt;/span> to &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">0&lt;/span> to &lt;span style="color:#fab387">1&lt;/span>, -&lt;span style="color:#fab387">1&lt;/span> to &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">0&lt;/span> to -&lt;span style="color:#fab387">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited[y][x] = &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> directions.forEach { (dy, dx) &lt;span style="color:#89dceb;font-weight:bold">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">ny&lt;/span> = y + dy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">nx&lt;/span> = x + dx
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (ny &lt;span style="color:#cba6f7">in&lt;/span> visited.indices &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> nx &lt;span style="color:#cba6f7">in&lt;/span> visited[&lt;span style="color:#fab387">0&lt;/span>].indices &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> visited[ny][nx] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dfs(visited, ny, nx)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>bfs 최단거리</title><link>https://smallzoodev.netlify.app/_wiki/boj-p1697/</link><pubDate>Fri, 16 May 2025 16:10:03 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p1697/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_1697.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>이건 그냥 개념&lt;/li>
&lt;li>최단거리 = bfs&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 1697
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/1697
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::collections::VecDeque;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// let n: usize = lines.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> first_line: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .next()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .unwrap()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> first_line[&lt;span style="color:#fab387">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> k &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> first_line[&lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> output &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> bfs(n, k);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, output).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">bfs&lt;/span>(n: &lt;span style="color:#f38ba8">usize&lt;/span>, k: &lt;span style="color:#f38ba8">usize&lt;/span>) -&amp;gt; &lt;span style="color:#f38ba8">i32&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> max_location_size &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">100001&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> visited &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>; max_location_size];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> queue &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> VecDeque::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue.push_back(n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited[n] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#89dceb">Some&lt;/span>(current) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> queue.pop_front() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> current &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> k {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> visited[current];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> next_positions &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> current &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span> { &lt;span style="color:#89dceb">Some&lt;/span>(current &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>) } &lt;span style="color:#cba6f7">else&lt;/span> { &lt;span style="color:#89dceb">None&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> current &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> max_location_size &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Some&lt;/span>(current &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> current &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> max_location_size {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Some&lt;/span>(current &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#fab387">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>next &lt;span style="color:#cba6f7">in&lt;/span> next_positions.iter().flatten() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> visited[next] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited[next] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> visited[current] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue.push_back(next);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>dfs 기본문제</title><link>https://smallzoodev.netlify.app/_wiki/boj-p2606/</link><pubDate>Thu, 15 May 2025 21:17:52 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p2606/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_2606.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>이건 그냥 개념&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 2606
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/2606
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> n: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> m: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> graph: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#89b4fa">vec!&lt;/span>[]; n &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> _ &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>m {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> tmp: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> tn &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> tmp[&lt;span style="color:#fab387">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> tv &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> tmp[&lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graph[tn].push(tv);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graph[tv].push(tn);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> visited &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#fab387">false&lt;/span>; n &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dfs(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>graph, &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> visited, &lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 시작 컴퓨터(1번) 제외
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> output &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> visited.iter().skip(&lt;span style="color:#fab387">2&lt;/span>).filter(&lt;span style="color:#89dceb;font-weight:bold">|&amp;amp;&amp;amp;&lt;/span>v&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> v).count();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">writeln!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, output).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">dfs&lt;/span>(graph: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>[&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>], visited: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f9e2af">mut&lt;/span> [&lt;span style="color:#f38ba8">bool&lt;/span>], start: &lt;span style="color:#f38ba8">usize&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited[start] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>graph[start] {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>visited[i] {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dfs(graph, visited, i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>bfs 기본문제</title><link>https://smallzoodev.netlify.app/_wiki/boj-p2178/</link><pubDate>Thu, 15 May 2025 21:16:10 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p2178/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_2178.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>이건 그냥 개념&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 2178
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/2178
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::collections::VecDeque;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> first_line: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .next()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .unwrap()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> y &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> first_line[&lt;span style="color:#fab387">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> first_line[&lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> map: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> _ &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>y {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> line &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> row: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> line.chars()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>c&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> c.to_digit(&lt;span style="color:#fab387">10&lt;/span>).unwrap() &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map.push(row);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> output &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> bfs(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>map, y, x);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, output).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">bfs&lt;/span>(graph: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>[&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>], n: &lt;span style="color:#f38ba8">usize&lt;/span>, m: &lt;span style="color:#f38ba8">usize&lt;/span>) -&amp;gt; &lt;span style="color:#f38ba8">i32&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> dy &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> dx &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> dist: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">i32&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>; m]; n];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> queue: &lt;span style="color:#f9e2af">VecDeque&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>(&lt;span style="color:#f38ba8">usize&lt;/span>, &lt;span style="color:#f38ba8">usize&lt;/span>)&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> VecDeque::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dist[&lt;span style="color:#fab387">0&lt;/span>][&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue.push_back((&lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>queue.is_empty() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> (y, x) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> queue.pop_front().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> y &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> m &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> dist[y][x];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>&lt;span style="color:#fab387">4&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> ny &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> y &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">i32&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dy[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> nx &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> x &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">i32&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dx[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> ny &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> ny &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">i32&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> nx &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> nx &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> m &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">i32&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> ny &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> ny &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> nx &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> nx &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> dist[ny][nx] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> graph[ny][nx] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">1&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dist[ny][nx] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dist[y][x] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue.push_back((ny, nx));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>dfs, bfs 개념 문제</title><link>https://smallzoodev.netlify.app/_wiki/boj-p1260/</link><pubDate>Wed, 14 May 2025 21:45:10 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p1260/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_1260.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>이건 그냥 개념&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 1260
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/1260
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::collections::VecDeque;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, StdoutLock, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> first_line: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .next()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .unwrap()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> first_line[&lt;span style="color:#fab387">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> m &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> first_line[&lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> v &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> first_line[&lt;span style="color:#fab387">2&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> graph: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#89b4fa">vec!&lt;/span>[]; n &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> _ &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>m {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> edge: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .next()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .unwrap()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graph[edge[&lt;span style="color:#fab387">0&lt;/span>]].push(edge[&lt;span style="color:#fab387">1&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graph[edge[&lt;span style="color:#fab387">1&lt;/span>]].push(edge[&lt;span style="color:#fab387">0&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..=&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> graph[i].sort();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> visited &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#fab387">false&lt;/span>; n &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dfs(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>graph, &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> visited, v, n &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> stdout);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">writeln!&lt;/span>(stdout).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bfs(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>graph, v, n &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> stdout);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">writeln!&lt;/span>(stdout).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">dfs&lt;/span>(graph: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>[&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>], visited: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f9e2af">mut&lt;/span> [&lt;span style="color:#f38ba8">bool&lt;/span>], start: &lt;span style="color:#f38ba8">usize&lt;/span>, max: &lt;span style="color:#f38ba8">usize&lt;/span>, stdout: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f9e2af">mut&lt;/span> StdoutLock) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited[start] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{} &amp;#34;&lt;/span>, start).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>next &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>graph[start] {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>visited[next] {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dfs(graph, visited, next, max, stdout);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">bfs&lt;/span>(graph: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>[&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>], start: &lt;span style="color:#f38ba8">usize&lt;/span>, max: &lt;span style="color:#f38ba8">usize&lt;/span>, stdout: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f9e2af">mut&lt;/span> StdoutLock) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> visited &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#fab387">false&lt;/span>; max];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> queue &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> VecDeque::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited[start] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{} &amp;#34;&lt;/span>, start).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue.push_back(start);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>queue.is_empty() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> current &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> queue.pop_front().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>next &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>graph[current] {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>visited[next] {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited[next] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{} &amp;#34;&lt;/span>, next).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue.push_back(next);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>투포인터 부분수열</title><link>https://smallzoodev.netlify.app/_wiki/boj-p1806/</link><pubDate>Tue, 13 May 2025 21:25:56 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p1806/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_1806.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>부분수열로 특정 값 이상을 달성하게 만들어 각 부분수열의 크기의 최소값을 구하는 문제&lt;/li>
&lt;li>left, right 를 0에서 시작하고,&lt;/li>
&lt;li>right를 전진시키고,&lt;/li>
&lt;li>특정값 이상이 된다면 left를 땡겨와서&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 1806
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/1806
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::cmp::min;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> meta_line: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .next()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .unwrap()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> meta_line[&lt;span style="color:#fab387">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> s &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> meta_line[&lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> nums: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .next()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .unwrap()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">1&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> nums[&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> s {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;1&amp;#34;&lt;/span>).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;0&amp;#34;&lt;/span>).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> min_length &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>::&lt;span style="color:#f9e2af">MAX&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> current_sum &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current_sum &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> nums[right];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> current_sum &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> s &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> right {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> min_length &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> min(min_length, right &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current_sum &lt;span style="color:#89dceb;font-weight:bold">-=&lt;/span> nums[left];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> min_length &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>::&lt;span style="color:#f9e2af">MAX&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;0&amp;#34;&lt;/span>).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, min_length).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>투포인터, 회문 판별</title><link>https://smallzoodev.netlify.app/_wiki/boj-p17609/</link><pubDate>Tue, 13 May 2025 21:19:10 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p17609/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_17609.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>투포인터 팰린드롬 판별 문제&lt;/li>
&lt;li>동일한 로직의 팰린드롬을 두번 구현해서 한 문자를 제거하도록 수정한다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 17609
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/17609
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> n: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> _ &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> tmp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> is_palindrome(tmp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">writeln!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, result).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">is_palindrome&lt;/span>(case: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f38ba8">str&lt;/span>) -&amp;gt; &lt;span style="color:#f38ba8">usize&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> chars: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">char&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> case.chars().collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> chars.len() &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> right {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> chars[left] &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> chars[right] {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> skip_left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> is_sub_palindrome(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>chars, left &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>, right);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> skip_right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> is_sub_palindrome(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>chars, left, right &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> skip_left &lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> skip_right {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fab387">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#89dceb;font-weight:bold">-=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">is_sub_palindrome&lt;/span>(chars: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>[&lt;span style="color:#f38ba8">char&lt;/span>], &lt;span style="color:#cba6f7">mut&lt;/span> left: &lt;span style="color:#f38ba8">usize&lt;/span>, &lt;span style="color:#cba6f7">mut&lt;/span> right: &lt;span style="color:#f38ba8">usize&lt;/span>) -&amp;gt; &lt;span style="color:#f38ba8">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> right {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> chars[left] &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> chars[right] {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#fab387">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#89dceb;font-weight:bold">-=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fab387">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>투포인터 1</title><link>https://smallzoodev.netlify.app/_wiki/boj-p2003/</link><pubDate>Mon, 12 May 2025 21:50:19 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p2003/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_2003.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>투포인터 기본&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 2003
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/2003
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> meta_line: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> meta_line[&lt;span style="color:#fab387">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> m &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> meta_line[&lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> nums: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> sum &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> right &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sum &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> nums[right];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> sum &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> m &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> right {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> sum &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> m {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sum &lt;span style="color:#89dceb;font-weight:bold">-=&lt;/span> nums[left];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, count).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>파라메트릭 서치 3</title><link>https://smallzoodev.netlify.app/_wiki/boj-p13397/</link><pubDate>Mon, 12 May 2025 21:37:30 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p13397/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_13397.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>파라메트릭서치&lt;/li>
&lt;li>파라메트릭 서치로 &amp;lsquo;분류&amp;rsquo;되는 문제인걸 알아서 겨우 푼 것 같다.&lt;/li>
&lt;li>이런 방법을 생각할 수 있을까 싶으면서도&lt;/li>
&lt;li>뭔가 조금 더 최적화된 브루트포스 풀이를 생각하면 좋은 것 같다&lt;/li>
&lt;li>브루트포스 &amp;gt; dp &amp;gt; 파라메트릭 이순서로 가능? 하면서 생각해보면 좋을것같다.&lt;/li>
&lt;li>can_split 함수는 그리디로 구현했다.
&lt;ul>
&lt;li>새로운 원소마다 최대값 최소값을 갱신해서 만약 지금 상태의 배열이 파라메트릭으로 선정된 최대값보다 작다면 원소를 더 추가하고&lt;/li>
&lt;li>크다면 새로운 배열을 생성한다.&lt;/li>
&lt;li>결국 배열을 전부 만들었을때, 조건을 달성했는지 판별한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 13397
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/13397
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::cmp::{max, min};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> meta_line: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> _n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> meta_line[&lt;span style="color:#fab387">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> m &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> meta_line[&lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> nums: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> nums.iter().min() &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> nums.iter().max() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">writeln!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;0&amp;#34;&lt;/span>).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> left: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>nums.iter().max().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> output &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> right;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> right {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (left &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> right) &lt;span style="color:#89dceb;font-weight:bold">/&lt;/span> &lt;span style="color:#fab387">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> can_split(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>nums, m, mid) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, output).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">can_split&lt;/span>(nums: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>[&lt;span style="color:#f38ba8">usize&lt;/span>], m: &lt;span style="color:#f38ba8">usize&lt;/span>, max_score: &lt;span style="color:#f38ba8">usize&lt;/span>) -&amp;gt; &lt;span style="color:#f38ba8">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> count: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> count_min &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> nums[&lt;span style="color:#fab387">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> count_max &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> nums[&lt;span style="color:#fab387">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">1&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>nums.len() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> tmp_min &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> min(count_min, nums[i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> tmp_max &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> max(count_max, nums[i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> tmp_max &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> tmp_min &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> max_score {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count_min &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> nums[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count_max &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> nums[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count_min &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> tmp_min;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count_max &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> tmp_max;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>파라메트릭 서치2</title><link>https://smallzoodev.netlify.app/_wiki/boj-p2110/</link><pubDate>Fri, 09 May 2025 22:40:24 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p2110/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_3020.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>파라메트릭서치 2&lt;/li>
&lt;li>없으면 뭔가 방법이 있었을까 싶은데 잘 떠오르지는 않는다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 2110
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/2110
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> first_line &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> parts: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">u64&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> first_line
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> parts[&lt;span style="color:#fab387">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> c &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> parts[&lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> houses: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">u64&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> tmp: &lt;span style="color:#f38ba8">u64&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> houses.push(tmp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> houses.sort_unstable();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> houses[houses.len() &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> houses[&lt;span style="color:#fab387">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> right {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (left &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> right) &lt;span style="color:#89dceb;font-weight:bold">/&lt;/span> &lt;span style="color:#fab387">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> can_install(mid, &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>houses, c) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, result).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">can_install&lt;/span>(distance: &lt;span style="color:#f38ba8">u64&lt;/span>, houses: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>[&lt;span style="color:#f38ba8">u64&lt;/span>], c: &lt;span style="color:#f38ba8">u64&lt;/span>) -&amp;gt; &lt;span style="color:#f38ba8">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> last_position &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> houses[&lt;span style="color:#fab387">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>house &lt;span style="color:#cba6f7">in&lt;/span> houses.iter().skip(&lt;span style="color:#fab387">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> house &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> last_position &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> distance {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> last_position &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> house;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> count &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> c {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#fab387">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fab387">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>파라메트릭 서치</title><link>https://smallzoodev.netlify.app/_wiki/boj-p2805/</link><pubDate>Fri, 09 May 2025 22:09:25 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p2805/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_2805.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>파라메트릭서치&lt;/li>
&lt;li>이건 처음 보는 것 같다.&lt;/li>
&lt;li>이분탐색의 응용&lt;/li>
&lt;li>t/f 평가값중 마지막 t의 평가값을 찾는다.&lt;/li>
&lt;li>상황 자체를 일종의 정렬된 배열로 보면 편하다고 한다.&lt;/li>
&lt;li>&lt;a href="https://gliver.tistory.com/31">https://gliver.tistory.com/31&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 2805
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/2805
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> first_line &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> parts: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">u64&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> first_line
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> _n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> parts[&lt;span style="color:#fab387">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> need &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> parts[&lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> trees: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">u64&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>trees.iter().max().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> right {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (left &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> right) &lt;span style="color:#89dceb;font-weight:bold">/&lt;/span> &lt;span style="color:#fab387">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> amount: &lt;span style="color:#f38ba8">u64&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> trees.iter()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&amp;amp;&lt;/span>height&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> height &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> mid { height &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> mid } &lt;span style="color:#cba6f7">else&lt;/span> { &lt;span style="color:#fab387">0&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .sum();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> amount &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> need {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, result).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>기본 이분탐색 문제! 2</title><link>https://smallzoodev.netlify.app/_wiki/boj-p3020/</link><pubDate>Fri, 09 May 2025 15:15:21 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p3020/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_3020.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>이분탐색 문제&lt;/li>
&lt;li>뭔가 카테고리가 분류되지 않았다면 다른걸로 풀었을지도&lt;/li>
&lt;li>정렬 후, 나는 높이의 인덱스가 부딪히지 않는 벽의 숫자가 된다. (그걸 길이에서 빼줌)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 3020
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/3020
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> first_line &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> parts: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> first_line
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> parts[&lt;span style="color:#fab387">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> h &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> parts[&lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> bottom &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">Vec&lt;/span>::with_capacity(n &lt;span style="color:#89dceb;font-weight:bold">/&lt;/span> &lt;span style="color:#fab387">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> top &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">Vec&lt;/span>::with_capacity(n &lt;span style="color:#89dceb;font-weight:bold">/&lt;/span> &lt;span style="color:#fab387">2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> height: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bottom.push(height);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> top.push(height);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bottom.sort_unstable();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> top.sort_unstable();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> min_obstacles &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> n;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> fly_height &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">1&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..=&lt;/span>h {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> bottom_hits &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> bottom.len() &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> lower_bound(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>bottom, fly_height);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> top_hits &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> top.len() &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> lower_bound(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>top, h &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> fly_height &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> total_hits &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> bottom_hits &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> top_hits;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> total_hits &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> min_obstacles {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> min_obstacles &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> total_hits;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> total_hits &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> min_obstacles {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">writeln!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{} {}&amp;#34;&lt;/span>, min_obstacles, count).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">lower_bound&lt;/span>(arr: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>[&lt;span style="color:#f38ba8">usize&lt;/span>], target: &lt;span style="color:#f38ba8">usize&lt;/span>) -&amp;gt; &lt;span style="color:#f38ba8">usize&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> arr.len();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> right {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (left &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> right) &lt;span style="color:#89dceb;font-weight:bold">/&lt;/span> &lt;span style="color:#fab387">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> arr[mid] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> target {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>기본 이분탐색 문제!</title><link>https://smallzoodev.netlify.app/_wiki/boj-p1920/</link><pubDate>Wed, 07 May 2025 22:42:46 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p1920/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_1920.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>바이너리서치로 남겨진 문제인데 바이너리서치는 실패했다.&lt;/li>
&lt;li>입출력최적화를 마지막에해서 뭐가 원인인지는 못밝혔다.&lt;/li>
&lt;li>그래서 그냥 바이너리서치는 구현해둠&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 1920
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/1920
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::collections::HashSet;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, BufRead, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> stdin.lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> stdout.lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> line &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_line(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> line).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> line.clear();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_line(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> line).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> nums: &lt;span style="color:#f9e2af">HashSet&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">i32&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> line.split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> line.clear();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_line(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> line).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> line.clear();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_line(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> line).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> num &lt;span style="color:#cba6f7">in&lt;/span> line.split_whitespace() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> target: &lt;span style="color:#f38ba8">i32&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> num.parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> nums.contains(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>target) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result.push_str(&lt;span style="color:#a6e3a1">&amp;#34;1&lt;/span>&lt;span style="color:#89b4fa">\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result.push_str(&lt;span style="color:#a6e3a1">&amp;#34;0&lt;/span>&lt;span style="color:#89b4fa">\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, result).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// fn binary_search(arr: &amp;amp;[i32], target: i32) -&amp;gt; bool {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// let mut left = 0;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// let mut right = arr.len() - 1;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// while left &amp;lt;= right {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// let mid = left + (right - left) / 2;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// if arr[mid] == target {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// return true;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// if arr[mid] &amp;lt; target {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// left = mid + 1;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// } else {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// if mid == 0 {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// break;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// right = mid - 1;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// }
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>dp? 백트래킹?</title><link>https://smallzoodev.netlify.app/_wiki/leet-generate-parentheses/</link><pubDate>Wed, 07 May 2025 22:30:43 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/leet-generate-parentheses/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/l_generate_parentheses.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>릿코드 dp문제&lt;/li>
&lt;li>근데 왜 이게 dp지..&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// LeetCode - generate-parentheses 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://leetcode.com/problems/generate-parentheses/description/?envType=problem-list-v2&amp;amp;envId=dynamic-programming 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#6c7086">/** 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086">Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses. 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086">Example 1: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086">Input: n = 3 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086">Output: [&amp;#34;((()))&amp;#34;,&amp;#34;(()())&amp;#34;,&amp;#34;(())()&amp;#34;,&amp;#34;()(())&amp;#34;,&amp;#34;()()()&amp;#34;] 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086">Example 2: 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086">Input: n = 1 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086">Output: [&amp;#34;()&amp;#34;] 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086">*/&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">struct&lt;/span> &lt;span style="color:#f9e2af">Solution&lt;/span>; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">impl&lt;/span> Solution { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">new&lt;/span>() -&amp;gt; &lt;span style="color:#f9e2af">Self&lt;/span> { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Solution 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">pub&lt;/span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">generate_parenthesis&lt;/span>(n: &lt;span style="color:#f38ba8">i32&lt;/span>) -&amp;gt; &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#89dceb">String&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">Vec&lt;/span>::new(); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> current &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new(); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Self&lt;/span>::backtrack(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> result, &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> current, &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>, n &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">backtrack&lt;/span>(result: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f9e2af">mut&lt;/span> &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#89dceb">String&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>, current: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f9e2af">mut&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>, open: &lt;span style="color:#f38ba8">usize&lt;/span>, close: &lt;span style="color:#f38ba8">usize&lt;/span>, max: &lt;span style="color:#f38ba8">usize&lt;/span>) { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> current.len() &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> max &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#fab387">2&lt;/span> { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result.push(current.clone()); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> open &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> max { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current.push(&lt;span style="color:#a6e3a1">&amp;#39;(&amp;#39;&lt;/span>); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Self&lt;/span>::backtrack(result, current, open &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>, close, max); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current.pop(); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> close &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> open { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current.push(&lt;span style="color:#a6e3a1">&amp;#39;)&amp;#39;&lt;/span>); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Self&lt;/span>::backtrack(result, current, open, close &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>, max); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current.pop(); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } }} 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>백트래킹을 이용한 스도쿠 솔버</title><link>https://smallzoodev.netlify.app/_wiki/boj-p2580/</link><pubDate>Tue, 06 May 2025 18:34:42 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p2580/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_2580.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>구현이 귀찮은 것 빼면 그냥 평이한 백트래킹&lt;/li>
&lt;li>타겟(빈칸)을 따로 추출한다.&lt;/li>
&lt;li>횡, 종, 중앙값 기준으로 넣을 수 있는 숫자 후보를 추출한다.&lt;/li>
&lt;li>타겟 배열의 인덱스 기준으로 후보숫자를 전부 넣어보며 백트래킹&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 2580
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/2580
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">const&lt;/span> &lt;span style="color:#f9e2af">MAX_LEN&lt;/span>: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">9&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> sudoku_board: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> targets: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>(&lt;span style="color:#f38ba8">usize&lt;/span>, &lt;span style="color:#f38ba8">usize&lt;/span>)&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>&lt;span style="color:#f9e2af">MAX_LEN&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> tmp: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse::&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> j &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>tmp.len() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> tmp[j] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> targets.push((i, j));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sudoku_board.push(tmp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> solve(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> sudoku_board, &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>targets, &lt;span style="color:#fab387">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> row &lt;span style="color:#cba6f7">in&lt;/span> sudoku_board {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> line &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> row.iter().map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.to_string()).collect::&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>_&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span>().join(&lt;span style="color:#a6e3a1">&amp;#34; &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">writeln!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, line).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">solve&lt;/span>(board: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f9e2af">mut&lt;/span> [&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>], targets: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>[(&lt;span style="color:#f38ba8">usize&lt;/span>, &lt;span style="color:#f38ba8">usize&lt;/span>)], idx: &lt;span style="color:#f38ba8">usize&lt;/span>) -&amp;gt; &lt;span style="color:#f38ba8">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> idx &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> targets.len() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#fab387">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> (y, x) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> targets[idx];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> used &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">false&lt;/span>; &lt;span style="color:#f9e2af">MAX_LEN&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> check_horizon(board, &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> used, y);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> check_vertical(board, &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> used, x);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> check_inside(board, &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> used, (y, x));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">1&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..=&lt;/span>&lt;span style="color:#f9e2af">MAX_LEN&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> used[i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>] {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> board[y][x] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> i;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> solve(board, targets, idx &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#fab387">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> board[y][x] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fab387">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">check_horizon&lt;/span>(board: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>[&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>], used: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f9e2af">mut&lt;/span> [&lt;span style="color:#f38ba8">bool&lt;/span>], y: &lt;span style="color:#f38ba8">usize&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>&lt;span style="color:#f9e2af">MAX_LEN&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> tmp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> board[y][i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> tmp &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> used[tmp &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">check_vertical&lt;/span>(board: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>[&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>], used: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f9e2af">mut&lt;/span> [&lt;span style="color:#f38ba8">bool&lt;/span>], x: &lt;span style="color:#f38ba8">usize&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>&lt;span style="color:#f9e2af">MAX_LEN&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> tmp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> board[i][x];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> tmp &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> used[tmp &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">check_inside&lt;/span>(board: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>[&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>], used: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f9e2af">mut&lt;/span> [&lt;span style="color:#f38ba8">bool&lt;/span>], target: (&lt;span style="color:#f38ba8">usize&lt;/span>, &lt;span style="color:#f38ba8">usize&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> block_start_y &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (target.&lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">/&lt;/span> &lt;span style="color:#fab387">3&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#fab387">3&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> block_start_x &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (target.&lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">/&lt;/span> &lt;span style="color:#fab387">3&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#fab387">3&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> dy &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>&lt;span style="color:#fab387">3&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> dx &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>&lt;span style="color:#fab387">3&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> ny &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> block_start_y &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dy;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> nx &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> block_start_x &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dx;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> tmp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> board[ny][nx];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> tmp &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> &lt;span style="color:#fab387">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> used[tmp &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>오늘 가장 어려웠던 dp문제</title><link>https://smallzoodev.netlify.app/_wiki/boj-p11054/</link><pubDate>Tue, 06 May 2025 18:28:44 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p11054/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_11054.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>각각의 원소에 대한 i 까지의 lis, i부터의 lds를 구해서 각각의 dp배열에 저장한다.&lt;/li>
&lt;li>그리고 요구받은 인덱스에 대해서 lis + lds - 1을 리턴&lt;/li>
&lt;li>일단 위의 아이디어를 못떠울려서 엄청 해맸고,&lt;/li>
&lt;li>구현도 역순의 인덱스가 너무 헷갈려서 많이 해맸다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 11054
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/11054
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::cmp::max;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> n: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> inputs: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> dp_inc &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#fab387">1&lt;/span>; n];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> dp_dec &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#fab387">1&lt;/span>; n];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> j &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>i {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> inputs[i] &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> inputs[j] {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp_inc[i] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> max(dp_inc[i], dp_inc[j] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> (&lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n).rev() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> j &lt;span style="color:#cba6f7">in&lt;/span> (i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>)&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> inputs[i] &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> inputs[j] {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp_dec[i] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> max(dp_dec[i], dp_dec[j] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> output &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> output.max(dp_inc[i] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dp_dec[i] &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, output).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>대표적인 그리디 문제</title><link>https://smallzoodev.netlify.app/_wiki/boj-p1931/</link><pubDate>Tue, 06 May 2025 18:25:48 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p1931/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_1931.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>그리디는 매번 반복하지만, 그리디로 풀린다는 감각을 갖는게 어렵고 헷갈리는 것 같다.&lt;/li>
&lt;li>대신 확실해지면 구현은 쉽다.&lt;/li>
&lt;li>종료시간, 시작시간 순으로 스케줄을 정렬하고&lt;/li>
&lt;li>종료시간이 가장 빠른 순으로 마지막 원소와 valid하여 결과에 추가, 마지막으로 결과 배열을 반환한다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 1931
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/1931
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> n: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> schedules: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>(&lt;span style="color:#f38ba8">usize&lt;/span>, &lt;span style="color:#f38ba8">usize&lt;/span>)&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> tmp: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap().split_whitespace().map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap()).collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> schedules.push((tmp[&lt;span style="color:#fab387">0&lt;/span>], tmp[&lt;span style="color:#fab387">1&lt;/span>]));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> schedules.sort_by(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>a, b&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a.&lt;span style="color:#fab387">1.&lt;/span>cmp(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>b.&lt;span style="color:#fab387">1&lt;/span>).then_with(&lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> a.&lt;span style="color:#fab387">0.&lt;/span>cmp(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>b.&lt;span style="color:#fab387">0&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> result: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>(&lt;span style="color:#f38ba8">usize&lt;/span>, &lt;span style="color:#f38ba8">usize&lt;/span>)&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result.push(schedules[&lt;span style="color:#fab387">0&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">1&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> tmp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> schedules[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> former &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> result.last().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> tmp.&lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> former.&lt;span style="color:#fab387">1&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result.push(tmp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> output &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> result.len();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, output).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>간단한 dfs + backtracking 문제</title><link>https://smallzoodev.netlify.app/_wiki/boj-p1987/</link><pubDate>Tue, 06 May 2025 18:21:05 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p1987/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_1987.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>뭔가 갑자기 그래프 dfs문제가 나오길래 다른 좋은 방법이 있나 하고 찾아봄&lt;/li>
&lt;li>나는 dfs를 풀었다.&lt;/li>
&lt;li>아마 백트래킹때문에 완탐으로 분류된듯?&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 1987
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/1987
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">const&lt;/span> &lt;span style="color:#f9e2af">DY&lt;/span>: [&lt;span style="color:#f38ba8">i32&lt;/span>; &lt;span style="color:#fab387">4&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">const&lt;/span> &lt;span style="color:#f9e2af">DX&lt;/span>: [&lt;span style="color:#f38ba8">i32&lt;/span>; &lt;span style="color:#fab387">4&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> board: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">char&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> (y, _x): (&lt;span style="color:#f38ba8">usize&lt;/span>, &lt;span style="color:#f38ba8">usize&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> iter &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .next()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .unwrap()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse::&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>().unwrap());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (iter.next().unwrap(), iter.next().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> _i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>y {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> tmp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap().chars().collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> board.push(tmp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> visited &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">false&lt;/span>; &lt;span style="color:#fab387">26&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited[(board[&lt;span style="color:#fab387">0&lt;/span>][&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">u8&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#f38ba8">b&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;A&amp;#39;&lt;/span>) &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> output &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dfs(board.as_slice(), &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> visited, &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, output).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">dfs&lt;/span>(board: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>[&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">char&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>], visited: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f9e2af">mut&lt;/span> [&lt;span style="color:#f38ba8">bool&lt;/span>; &lt;span style="color:#fab387">26&lt;/span>], y: &lt;span style="color:#f38ba8">usize&lt;/span>, x: &lt;span style="color:#f38ba8">usize&lt;/span>, current_length: &lt;span style="color:#f38ba8">usize&lt;/span>) -&amp;gt; &lt;span style="color:#f38ba8">usize&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> max_path &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> current_length;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> max_y &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> board.len() &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">i32&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> max_x &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> board[&lt;span style="color:#fab387">0&lt;/span>].len() &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">i32&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>&lt;span style="color:#fab387">4&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> ty &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> y &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">i32&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#f9e2af">DY&lt;/span>[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> tx &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> x &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">i32&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#f9e2af">DX&lt;/span>[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> ty &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> ty &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> max_y &lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> tx &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> tx &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> max_x {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> ny &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> ty &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> nx &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> tx &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> next_char &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> board[ny][nx];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> idx &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (next_char &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">u8&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#f38ba8">b&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;A&amp;#39;&lt;/span>) &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> visited[idx] {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited[idx] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> length &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dfs(board, visited, ny, nx, current_length &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_path &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> max_path.max(length);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited[idx] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_path
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>피보 형식의 dp 2</title><link>https://smallzoodev.netlify.app/_wiki/boj-p2133/</link><pubDate>Tue, 06 May 2025 18:16:10 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p2133/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_2133.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>점화식을 세우는 전형적인 dp 문제&lt;/li>
&lt;li>n이 홀수면 채울 수 없으므로 바로 0 출력&lt;/li>
&lt;li>n = 2일 때 기본 케이스는 3가지&lt;/li>
&lt;li>n = 4일 때는 기본 케이스 3 * dp[2] + 특이 케이스(2) 1개 → 총 11개&lt;/li>
&lt;li>점화식은 dp[n] = dp[n - 2] * 3 + (dp[n - 4] + dp[n - 6] + … + dp[0]) * 2 와 같음&lt;/li>
&lt;li>특이 케이스는 n이 4 이상일 때부터 등장하며, 매번 2씩 곱해진다&lt;/li>
&lt;li>dp[0] = 1을 기준으로 초기값 설정하는 것이 핵심 (dp[0]은 안씀)&lt;/li>
&lt;li>반복문은 짝수 단위로만 진행되어야 하므로 step_by(2) 사용해야 한다&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 2133
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/2133
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> n: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> &lt;span style="color:#fab387">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">writeln!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;0&amp;#34;&lt;/span>).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> dp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#fab387">0&lt;/span>; n &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[&lt;span style="color:#fab387">2&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">3&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> (&lt;span style="color:#fab387">4&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..=&lt;/span>n).step_by(&lt;span style="color:#fab387">2&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dp[i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">2&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#fab387">3&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> j &lt;span style="color:#cba6f7">in&lt;/span> (&lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..=&lt;/span>i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">4&lt;/span>).step_by(&lt;span style="color:#fab387">2&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i] &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> dp[j] &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#fab387">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, dp[n]).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>dp 컴퓨터 리스타트</title><link>https://smallzoodev.netlify.app/_wiki/boj-p7579/</link><pubDate>Tue, 06 May 2025 18:08:38 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p7579/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_7579.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>Rust는 브루트포스(백트래킹)로도 종종 통과되길래 처음에는 그렇게 접근했지만, 이 문제에서는 시간 초과가 발생함. (주석 처리한 부분이 그 코드)&lt;/li>
&lt;li>이 문제는 전형적인 0-1 Knapsack 문제다.&lt;/li>
&lt;li>핵심 아이디어:
&lt;ol>
&lt;li>&lt;strong>모든 비용(코스트)에 대해 만들 수 있는 최대 메모리 바이트&lt;/strong>를 dp로 구함&lt;/li>
&lt;li>이 dp 배열에서 target_bytes 이상을 만족하는 &lt;strong>최소 비용&lt;/strong>을 찾아냄&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>dp[i]는 비용이 i일 때 확보 가능한 최대 메모리를 의미함&lt;/li>
&lt;li>최종적으로 dp 배열을 순회하면서 target_bytes 이상 확보되는 지점 중 가장 작은 비용(cost)을 answer로 출력&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 7579
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/7579
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::cmp::{max, min};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> parts: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> (n, target_bytes) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (parts[&lt;span style="color:#fab387">0&lt;/span>], parts[&lt;span style="color:#fab387">1&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> input_bytes: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> input_restarts: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> max_cost: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input_restarts.iter().sum();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> dp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#fab387">0&lt;/span>; max_cost &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> mem &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input_bytes[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> cost &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input_restarts[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> j &lt;span style="color:#cba6f7">in&lt;/span> (cost&lt;span style="color:#89dceb;font-weight:bold">..=&lt;/span>max_cost).rev() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[j] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> max(dp[j], dp[j &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> cost] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> mem);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> answer &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>::&lt;span style="color:#f9e2af">MAX&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> cost &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..=&lt;/span>max_cost {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> dp[cost] &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> target_bytes {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> answer &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> min(answer, cost);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, answer).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// fn get_minimum_bytes_to_restart(
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// inputs: &amp;amp;[(usize, usize)],
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// target_bytes: usize,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// tmp: &amp;amp;mut Vec&amp;lt;(usize, usize)&amp;gt;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// idx: usize,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// ) -&amp;gt; usize {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// let (sum_bytes, sum_costs): (usize, usize) = tmp.iter()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// .fold((0, 0), |(a, b), (x, y)| (a + x, b + y));
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// if sum_bytes &amp;gt;= target_bytes {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// return sum_costs;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// let mut result = usize::MAX;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// for i in idx..inputs.len() {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// tmp.push(inputs[i]);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// result = min(result, get_minimum_bytes_to_restart(inputs, target_bytes, tmp, i + 1));
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// tmp.pop();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// result
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// }
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fun&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() = with(BufferedReader(InputStreamReader(&lt;span style="color:#f9e2af">System&lt;/span>.`in`))) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">firstLine&lt;/span> = readLine()&lt;span style="color:#89dceb;font-weight:bold">!!&lt;/span>.split(&lt;span style="color:#a6e3a1">&amp;#34; &amp;#34;&lt;/span>).map { &lt;span style="color:#cba6f7">it&lt;/span>.toInt() }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">target&lt;/span> = firstLine[&lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">capa&lt;/span> = readLine()&lt;span style="color:#89dceb;font-weight:bold">!!&lt;/span>.split(&lt;span style="color:#a6e3a1">&amp;#34; &amp;#34;&lt;/span>).map { &lt;span style="color:#cba6f7">it&lt;/span>.toInt() }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">cost&lt;/span> = readLine()&lt;span style="color:#89dceb;font-weight:bold">!!&lt;/span>.split(&lt;span style="color:#a6e3a1">&amp;#34; &amp;#34;&lt;/span>).map { &lt;span style="color:#cba6f7">it&lt;/span>.toInt() }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">maxCost&lt;/span> = cost.sum();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">dp&lt;/span> = MutableList(maxCost + &lt;span style="color:#fab387">1&lt;/span>) { &lt;span style="color:#fab387">0&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span> until capa.size) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (j &lt;span style="color:#cba6f7">in&lt;/span> maxCost downTo cost[i]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[j] = max(dp[j], dp[j - cost[i]] + capa[i])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">var&lt;/span> &lt;span style="color:#fab387">answer&lt;/span> = &lt;span style="color:#f9e2af">Int&lt;/span>.MAX_VALUE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (cost &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0.&lt;/span>.maxCost) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (dp[cost] &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> target) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> answer = min(answer, cost)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>&lt;span style="color:#a6e3a1">$answer&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>dp 피보나치 문제</title><link>https://smallzoodev.netlify.app/_wiki/boj-p11726/</link><pubDate>Mon, 05 May 2025 22:13:27 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p11726/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_11726.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>전형적인 dp fibo 문제&lt;/li>
&lt;li>사실 이런건 dp로의 의의보다는 그냥 문제의 요구사항을 수학적으로 피보나치를 요구하는게 맞는지 확인하면 끝인것같다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 11726
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/11726
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> n: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">1&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">writeln!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;1&amp;#34;&lt;/span>).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> dp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#fab387">0&lt;/span>; n &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[&lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[&lt;span style="color:#fab387">2&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">3&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..=&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (dp[i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dp[i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">2&lt;/span>]) &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#fab387">10007&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">writeln!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, dp[n]).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>dp, 최고합 부분수열 찾기</title><link>https://smallzoodev.netlify.app/_wiki/boj-p1912/</link><pubDate>Mon, 05 May 2025 22:09:34 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p1912/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_1912.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>dp문제&lt;/li>
&lt;li>생각이 꼬이면 빅트롤을 한다.&lt;/li>
&lt;li>주석의 풀이가 틀렸지만 이상한짓을 한 코드&lt;/li>
&lt;li>기본적으로 수열, dp, psum을 생각하며 조급하게 굴다가 의미없는짓을 세번이나 했다.&lt;/li>
&lt;li>복기하면
&lt;ul>
&lt;li>psum을 구할 필요가 없었다.&lt;/li>
&lt;li>구간합중 가장 큰 수열값으로 브루트포스 풀이를 했다.&lt;/li>
&lt;li>직전 구간합과 지금 구하고자 하는 값과의 연관관계에 집중을 전혀 하지 못했다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 1912
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/1912
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::cmp::max;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> _n: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> inputs: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">i32&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 지금까지 발견된 최대 부분합
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> max_so_far &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> inputs[&lt;span style="color:#fab387">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 현재 위치에서 끝나는 최대 부분합
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> max_ending_here &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> inputs[&lt;span style="color:#fab387">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">1&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>inputs.len() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_ending_here &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> max(inputs[i], max_ending_here &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> inputs[i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_so_far &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> max(max_so_far, max_ending_here);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, max_so_far).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// fn main() {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// let mut stdin = io::stdin().lock();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// let mut stdout = io::stdout().lock();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// let mut input = String::new();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// stdin.read_to_string(&amp;amp;mut input).unwrap();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// let mut lines = input.lines();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// let n: usize = lines.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// let mut inputs: Vec&amp;lt;i32&amp;gt; = lines.next().unwrap()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// .split_whitespace()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// .map(|x| x.parse().unwrap())
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// .collect();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// let mut p_sum = vec![0; inputs.len()];
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// let mut dp = vec![0; inputs.len()];
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// p_sum[0] = inputs[0];
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// dp[0] = inputs[0];
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// for i in 1..inputs.len() {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// p_sum[i] = p_sum[i - 1] + inputs[i];
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// for i in 1..inputs.len() {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// let mut tmp_max = p_sum[i];
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// for j in 0..i {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// tmp_max = max(p_sum[i] - p_sum[j], tmp_max)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// dp[i] = tmp_max;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">//
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// let output = dp.iter().max().unwrap();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// write!(stdout, &amp;#34;{}&amp;#34;, output).unwrap();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// }
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>브루트포스 게임</title><link>https://smallzoodev.netlify.app/_wiki/boj-p3085/</link><pubDate>Mon, 05 May 2025 22:06:48 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p3085/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_3085.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>부르트 포스 문제&lt;/li>
&lt;li>구현이 귀찮지만 입력이 제한되어있다.&lt;/li>
&lt;li>브루트포스 말고 다른 방법이 안떠오르면 바로 진행하면 됨&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 3085
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/3085
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::cmp::max;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> n: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> board: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">char&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> _i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> tmp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap().chars().collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> board.push(tmp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> max_count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> count_serial(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>board, n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> j &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> board[i].swap(j, j &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> max(max_count, count_serial(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>board, n));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> board[i].swap(j, j &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> j &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span> n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> temp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> board[i][j];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> board[i][j] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> board[i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>][j];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> board[i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>][j] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> temp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> max(max_count, count_serial(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>board, n));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> temp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> board[i][j];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> board[i][j] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> board[i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>][j];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> board[i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>][j] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> temp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, max_count).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">count_serial&lt;/span>(inputs: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>[&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">char&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>], len: &lt;span style="color:#f38ba8">usize&lt;/span>) -&amp;gt; &lt;span style="color:#f38ba8">i32&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> max_count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> row &lt;span style="color:#cba6f7">in&lt;/span> inputs.iter().take(len) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> current_count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> j &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">1&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>len {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> row.len() &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> row[j] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> row[j&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>] {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current_count &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> max(max_count, current_count);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current_count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> max(max_count, current_count);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> j &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>len {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> current_count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">1&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>len {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> inputs.len() &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> inputs[i].len() &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> inputs[i&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>].len() &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> inputs[i][j] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> inputs[i&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>][j] {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current_count &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> max(max_count, current_count);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current_count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> max(max_count, current_count);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_count
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Python PS 정리 🔄</title><link>https://smallzoodev.netlify.app/_wiki/python-ps/</link><pubDate>Sat, 03 May 2025 11:28:36 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/python-ps/</guid><description>&lt;h1 id="파이썬-ps-1단계-기초-문법-완전정복">파이썬 PS 1단계: 기초 문법 완전정복&lt;/h1>
&lt;h2 id="-1-입출력-처리">📥 1. 입출력 처리&lt;/h2>
&lt;h3 id="기본-입력">기본 입력&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 한 줄 입력&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">int&lt;/span>(&lt;span style="color:#89dceb">input&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">input&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a, b &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">map&lt;/span>(&lt;span style="color:#89dceb">int&lt;/span>, &lt;span style="color:#89dceb">input&lt;/span>()&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>split())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 여러 줄 입력&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> _ &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(&lt;span style="color:#89dceb">int&lt;/span>(&lt;span style="color:#89dceb">input&lt;/span>()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 리스트 한번에 입력&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>numbers &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">list&lt;/span>(&lt;span style="color:#89dceb">map&lt;/span>(&lt;span style="color:#89dceb">int&lt;/span>, &lt;span style="color:#89dceb">input&lt;/span>()&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>split()))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="빠른-입력-sysstdin">빠른 입력 (sys.stdin)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">import&lt;/span> &lt;span style="color:#fab387">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">input&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> sys&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>stdin&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>readline
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 주의: readline()은 개행문자를 포함하므로&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">int&lt;/span>(&lt;span style="color:#89dceb">input&lt;/span>()) &lt;span style="color:#6c7086;font-style:italic"># 숫자는 자동으로 개행문자 제거&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">input&lt;/span>()&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>strip() &lt;span style="color:#6c7086;font-style:italic"># 문자열은 strip() 필요&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="출력-최적화">출력 최적화&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 기본 출력&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">print&lt;/span>(result)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">print&lt;/span>(a, b, c) &lt;span style="color:#6c7086;font-style:italic"># 공백으로 구분&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">print&lt;/span>(a, b, c, sep&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;, &amp;#39;&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># 구분자 지정&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 빠른 출력 (대량 데이터)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">import&lt;/span> &lt;span style="color:#fab387">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">print&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> sys&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>stdout&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>write
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 사용 시 개행문자 직접 추가 필요: print(str(result) + &amp;#39;\n&amp;#39;)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 여러 줄 출력&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>results &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> results&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(&lt;span style="color:#89dceb">str&lt;/span>(i))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span>&lt;span style="color:#89b4fa">\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>join(results))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-입출력-주요-함정">🚨 입출력 주요 함정&lt;/h3>
&lt;ul>
&lt;li>&lt;code>input().split()&lt;/code>의 결과는 문자열 리스트&lt;/li>
&lt;li>&lt;code>sys.stdin.readline()&lt;/code>은 개행문자 포함&lt;/li>
&lt;li>대량 출력 시 &lt;code>print()&lt;/code> 여러 번보다 한 번에 출력이 빠름&lt;/li>
&lt;/ul>
&lt;h2 id="-2-문자열string-핵심-메서드">🔤 2. 문자열(String) 핵심 메서드&lt;/h2>
&lt;h3 id="기본-조작">기본 조작&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>s &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Hello World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 길이와 인덱싱&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">len&lt;/span>(s) &lt;span style="color:#6c7086;font-style:italic"># 11&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s[&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#6c7086;font-style:italic"># &amp;#39;H&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s[&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#6c7086;font-style:italic"># &amp;#39;d&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s[&lt;span style="color:#fab387">1&lt;/span>:&lt;span style="color:#fab387">5&lt;/span>] &lt;span style="color:#6c7086;font-style:italic"># &amp;#39;ello&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 대소문자 변환&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>upper() &lt;span style="color:#6c7086;font-style:italic"># &amp;#39;HELLO WORLD&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>lower() &lt;span style="color:#6c7086;font-style:italic"># &amp;#39;hello world&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>capitalize() &lt;span style="color:#6c7086;font-style:italic"># &amp;#39;Hello world&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>title() &lt;span style="color:#6c7086;font-style:italic"># &amp;#39;Hello World&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 공백 처리&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>strip() &lt;span style="color:#6c7086;font-style:italic"># 양쪽 공백 제거&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>lstrip() &lt;span style="color:#6c7086;font-style:italic"># 왼쪽 공백 제거&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>rstrip() &lt;span style="color:#6c7086;font-style:italic"># 오른쪽 공백 제거&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="검색과-분할">검색과 분할&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>s &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;hello world hello&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 검색&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>find(&lt;span style="color:#a6e3a1">&amp;#39;world&amp;#39;&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># 6 (첫 번째 인덱스)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>find(&lt;span style="color:#a6e3a1">&amp;#39;xyz&amp;#39;&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># -1 (없음)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>index(&lt;span style="color:#a6e3a1">&amp;#39;world&amp;#39;&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># 6 (없으면 ValueError)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>count(&lt;span style="color:#a6e3a1">&amp;#39;hello&amp;#39;&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 분할과 결합&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>split() &lt;span style="color:#6c7086;font-style:italic"># [&amp;#39;hello&amp;#39;, &amp;#39;world&amp;#39;, &amp;#39;hello&amp;#39;]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>split(&lt;span style="color:#a6e3a1">&amp;#39;l&amp;#39;&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># [&amp;#39;he&amp;#39;, &amp;#39;&amp;#39;, &amp;#39;o wor&amp;#39;, &amp;#39;d he&amp;#39;, &amp;#39;&amp;#39;, &amp;#39;o&amp;#39;]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e3a1">&amp;#39; &amp;#39;&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>join([&lt;span style="color:#a6e3a1">&amp;#39;a&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;b&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;c&amp;#39;&lt;/span>]) &lt;span style="color:#6c7086;font-style:italic"># &amp;#39;a b c&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 치환&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>replace(&lt;span style="color:#a6e3a1">&amp;#39;hello&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;hi&amp;#39;&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># &amp;#39;hi world hi&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>replace(&lt;span style="color:#a6e3a1">&amp;#39;l&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;L&amp;#39;&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># &amp;#39;heLLo world hello&amp;#39; (최대 2개만)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="판별-메서드">판별 메서드&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 문자 종류 판별&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e3a1">&amp;#39;123&amp;#39;&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>isdigit() &lt;span style="color:#6c7086;font-style:italic"># True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e3a1">&amp;#39;abc&amp;#39;&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>isalpha() &lt;span style="color:#6c7086;font-style:italic"># True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e3a1">&amp;#39;abc123&amp;#39;&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>isalnum() &lt;span style="color:#6c7086;font-style:italic"># True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e3a1">&amp;#39; &amp;#39;&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>isspace() &lt;span style="color:#6c7086;font-style:italic"># True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 패턴 판별&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e3a1">&amp;#39;hello&amp;#39;&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>startswith(&lt;span style="color:#a6e3a1">&amp;#39;he&amp;#39;&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e3a1">&amp;#39;world&amp;#39;&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>endswith(&lt;span style="color:#a6e3a1">&amp;#39;ld&amp;#39;&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># True&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-문자열-주요-함정">🚨 문자열 주요 함정&lt;/h3>
&lt;ul>
&lt;li>문자열은 불변(immutable) → 수정 시 새 객체 생성&lt;/li>
&lt;li>&lt;code>split()&lt;/code>과 &lt;code>split(' ')&lt;/code>는 다름 (연속 공백 처리 방식)&lt;/li>
&lt;li>대량 문자열 연결 시 &lt;code>''.join(list)&lt;/code>가 &lt;code>+&lt;/code> 연산보다 빠름&lt;/li>
&lt;/ul>
&lt;h2 id="-3-리스트list-핵심-메서드">📋 3. 리스트(List) 핵심 메서드&lt;/h2>
&lt;h3 id="기본-생성과-조작">기본 생성과 조작&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr2 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> n &lt;span style="color:#6c7086;font-style:italic"># 크기 n인 0으로 초기화된 리스트&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>matrix &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [[&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> m &lt;span style="color:#cba6f7">for&lt;/span> _ &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(n)] &lt;span style="color:#6c7086;font-style:italic"># 2차원 리스트&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 추가와 삭제&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(&lt;span style="color:#fab387">6&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># 끝에 추가: [1,2,3,4,5,6]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>insert(&lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># 인덱스 0에 삽입: [0,1,2,3,4,5,6]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>extend([&lt;span style="color:#fab387">7&lt;/span>, &lt;span style="color:#fab387">8&lt;/span>]) &lt;span style="color:#6c7086;font-style:italic"># 리스트 확장: [0,1,2,3,4,5,6,7,8]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>pop() &lt;span style="color:#6c7086;font-style:italic"># 마지막 요소 제거 후 반환: 8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>pop(&lt;span style="color:#fab387">0&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># 인덱스 0 요소 제거 후 반환: 0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>remove(&lt;span style="color:#fab387">3&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># 값 3인 첫 번째 요소 제거&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="정렬과-검색">정렬과 검색&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>arr &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 정렬&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>sort() &lt;span style="color:#6c7086;font-style:italic"># 원본 수정: [1,1,3,4,5]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sorted_arr &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">sorted&lt;/span>(arr) &lt;span style="color:#6c7086;font-style:italic"># 새 리스트 반환&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>sort(reverse&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">True&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># 내림차순: [5,4,3,1,1]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>sort(key&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#89dceb">len&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># 문자열 길이로 정렬&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 검색&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>index(&lt;span style="color:#fab387">4&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># 4의 인덱스: 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>count(&lt;span style="color:#fab387">1&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># 1의 개수: 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fab387">4&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> arr &lt;span style="color:#6c7086;font-style:italic"># True&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="슬라이싱과-복사">슬라이싱과 복사&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>arr &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 슬라이싱&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr[&lt;span style="color:#fab387">1&lt;/span>:&lt;span style="color:#fab387">4&lt;/span>] &lt;span style="color:#6c7086;font-style:italic"># [2, 3, 4]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr[:&lt;span style="color:#fab387">3&lt;/span>] &lt;span style="color:#6c7086;font-style:italic"># [1, 2, 3]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr[&lt;span style="color:#fab387">2&lt;/span>:] &lt;span style="color:#6c7086;font-style:italic"># [3, 4, 5]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr[::&lt;span style="color:#fab387">2&lt;/span>] &lt;span style="color:#6c7086;font-style:italic"># [1, 3, 5] (2칸씩)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr[::&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#6c7086;font-style:italic"># [5, 4, 3, 2, 1] (뒤집기)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 복사&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>shallow &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> arr[:] &lt;span style="color:#6c7086;font-style:italic"># 얕은 복사&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>deep &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [x &lt;span style="color:#cba6f7">for&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> arr] &lt;span style="color:#6c7086;font-style:italic"># 리스트 컴프리헨션으로 복사&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">import&lt;/span> &lt;span style="color:#fab387">copy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>deep_copy &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> copy&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>deepcopy(arr) &lt;span style="color:#6c7086;font-style:italic"># 깊은 복사&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="리스트-컴프리헨션">리스트 컴프리헨션&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 기본 형태&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>squares &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [x&lt;span style="color:#89dceb;font-weight:bold">**&lt;/span>&lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#cba6f7">for&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">10&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>evens &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [x &lt;span style="color:#cba6f7">for&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">20&lt;/span>) &lt;span style="color:#cba6f7">if&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 중첩 루프&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pairs &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [(x, y) &lt;span style="color:#cba6f7">for&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">3&lt;/span>) &lt;span style="color:#cba6f7">for&lt;/span> y &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">3&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 조건부 표현식&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [x &lt;span style="color:#cba6f7">if&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#cba6f7">else&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#cba6f7">for&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> [&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>]]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-리스트-주요-함정">🚨 리스트 주요 함정&lt;/h3>
&lt;ul>
&lt;li>&lt;code>[[0] * m] * n&lt;/code>은 같은 리스트 객체를 n번 참조 (얕은 복사)&lt;/li>
&lt;li>&lt;code>sort()&lt;/code>는 원본 수정, &lt;code>sorted()&lt;/code>는 새 리스트 반환&lt;/li>
&lt;li>리스트 중간 삽입/삭제는 O(n) 시간복잡도&lt;/li>
&lt;/ul>
&lt;h2 id="-4-딕셔너리dictionary-핵심-메서드">📖 4. 딕셔너리(Dictionary) 핵심 메서드&lt;/h2>
&lt;h3 id="기본-조작-1">기본 조작&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#a6e3a1">&amp;#39;a&amp;#39;&lt;/span>: &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;b&amp;#39;&lt;/span>: &lt;span style="color:#fab387">2&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d2 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">dict&lt;/span>(a&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">1&lt;/span>, b&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d3 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">dict&lt;/span>([(&lt;span style="color:#a6e3a1">&amp;#39;a&amp;#39;&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>), (&lt;span style="color:#a6e3a1">&amp;#39;b&amp;#39;&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>)])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 접근과 수정&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d[&lt;span style="color:#a6e3a1">&amp;#39;a&amp;#39;&lt;/span>] &lt;span style="color:#6c7086;font-style:italic"># 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>get(&lt;span style="color:#a6e3a1">&amp;#39;c&amp;#39;&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># 키 &amp;#39;c&amp;#39;가 없으면 0 반환&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d[&lt;span style="color:#a6e3a1">&amp;#39;c&amp;#39;&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">3&lt;/span> &lt;span style="color:#6c7086;font-style:italic"># 새 키-값 추가&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>update({&lt;span style="color:#a6e3a1">&amp;#39;d&amp;#39;&lt;/span>: &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;e&amp;#39;&lt;/span>: &lt;span style="color:#fab387">5&lt;/span>}) &lt;span style="color:#6c7086;font-style:italic"># 여러 키-값 추가&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="조회와-순회">조회와 순회&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>d &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#a6e3a1">&amp;#39;a&amp;#39;&lt;/span>: &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;b&amp;#39;&lt;/span>: &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;c&amp;#39;&lt;/span>: &lt;span style="color:#fab387">3&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 키, 값, 항목 조회&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>keys() &lt;span style="color:#6c7086;font-style:italic"># dict_keys([&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>values() &lt;span style="color:#6c7086;font-style:italic"># dict_values([1, 2, 3])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>d&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>items() &lt;span style="color:#6c7086;font-style:italic"># dict_items([(&amp;#39;a&amp;#39;, 1), (&amp;#39;b&amp;#39;, 2), (&amp;#39;c&amp;#39;, 3)])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 순회&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> key &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> d: &lt;span style="color:#6c7086;font-style:italic"># 키 순회&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(key, d[key])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> key, value &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> d&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>items(): &lt;span style="color:#6c7086;font-style:italic"># 키-값 쌍 순회&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(key, value)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 존재 확인&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e3a1">&amp;#39;a&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> d &lt;span style="color:#6c7086;font-style:italic"># True (키 존재 확인)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> d&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>values() &lt;span style="color:#6c7086;font-style:italic"># True (값 존재 확인)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="고급-활용">고급 활용&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># defaultdict 활용&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">from&lt;/span> &lt;span style="color:#fab387">collections&lt;/span> &lt;span style="color:#94e2d5">import&lt;/span> defaultdict
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dd &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> defaultdict(&lt;span style="color:#89dceb">int&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># 기본값 0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dd &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> defaultdict(&lt;span style="color:#89dceb">list&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># 기본값 빈 리스트&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># Counter 활용&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">from&lt;/span> &lt;span style="color:#fab387">collections&lt;/span> &lt;span style="color:#94e2d5">import&lt;/span> Counter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>counter &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> Counter([&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># Counter({3: 3, 2: 2, 1: 1})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>counter&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>most_common(&lt;span style="color:#fab387">2&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># [(3, 3), (2, 2)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 딕셔너리 컴프리헨션&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>squares &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {x: x&lt;span style="color:#89dceb;font-weight:bold">**&lt;/span>&lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#cba6f7">for&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">5&lt;/span>)}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filtered &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {k: v &lt;span style="color:#cba6f7">for&lt;/span> k, v &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> d&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>items() &lt;span style="color:#cba6f7">if&lt;/span> v &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">1&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-딕셔너리-주요-함정">🚨 딕셔너리 주요 함정&lt;/h3>
&lt;ul>
&lt;li>존재하지 않는 키 접근 시 KeyError → &lt;code>get()&lt;/code> 사용 권장&lt;/li>
&lt;li>Python 3.7+ 에서 딕셔너리는 삽입 순서 보장&lt;/li>
&lt;li>순회 중 딕셔너리 크기 변경 시 오류 발생 가능&lt;/li>
&lt;/ul>
&lt;h2 id="-5-집합set-핵심-메서드">🔢 5. 집합(Set) 핵심 메서드&lt;/h2>
&lt;h3 id="기본-조작-2">기본 조작&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 생성&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s2 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">set&lt;/span>([&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>]) &lt;span style="color:#6c7086;font-style:italic"># {1, 2, 3} (중복 제거)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>empty_set &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">set&lt;/span>() &lt;span style="color:#6c7086;font-style:italic"># 빈 집합 ({}는 딕셔너리)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 추가와 제거&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>add(&lt;span style="color:#fab387">6&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># 요소 추가&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>update([&lt;span style="color:#fab387">7&lt;/span>, &lt;span style="color:#fab387">8&lt;/span>]) &lt;span style="color:#6c7086;font-style:italic"># 여러 요소 추가&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>remove(&lt;span style="color:#fab387">5&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># 요소 제거 (없으면 KeyError)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>discard(&lt;span style="color:#fab387">5&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># 요소 제거 (없어도 오류 없음)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>pop() &lt;span style="color:#6c7086;font-style:italic"># 임의 요소 제거 후 반환&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>clear() &lt;span style="color:#6c7086;font-style:italic"># 모든 요소 제거&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="집합-연산">집합 연산&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>a &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>b &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>, &lt;span style="color:#fab387">6&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 합집합&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a &lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> b &lt;span style="color:#6c7086;font-style:italic"># {1, 2, 3, 4, 5, 6}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>union(b)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 교집합&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> b &lt;span style="color:#6c7086;font-style:italic"># {3, 4}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>intersection(b)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 차집합&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> b &lt;span style="color:#6c7086;font-style:italic"># {1, 2}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>difference(b)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 대칭차집합&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a &lt;span style="color:#89dceb;font-weight:bold">^&lt;/span> b &lt;span style="color:#6c7086;font-style:italic"># {1, 2, 5, 6}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>symmetric_difference(b)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 부분집합 판별&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>}&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>issubset({&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>}) &lt;span style="color:#6c7086;font-style:italic"># True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>}&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>issuperset({&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>}) &lt;span style="color:#6c7086;font-style:italic"># True&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-집합-주요-함정">🚨 집합 주요 함정&lt;/h3>
&lt;ul>
&lt;li>빈 집합은 &lt;code>set()&lt;/code>, &lt;code>{}&lt;/code>는 빈 딕셔너리&lt;/li>
&lt;li>집합은 순서가 없음 → 인덱싱 불가&lt;/li>
&lt;li>해시 가능한 객체만 저장 가능 (list는 불가, tuple은 가능)&lt;/li>
&lt;/ul>
&lt;h2 id="-6-조건문과-반복문-고급-활용">🔄 6. 조건문과 반복문 고급 활용&lt;/h2>
&lt;h3 id="조건문-최적화">조건문 최적화&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 삼항 연산자&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> value &lt;span style="color:#cba6f7">if&lt;/span> condition &lt;span style="color:#cba6f7">else&lt;/span> default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 다중 조건&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">if&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> b &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> c: &lt;span style="color:#6c7086;font-style:italic"># a &amp;lt; b and b &amp;lt; c와 동일&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># in 연산자 활용&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">if&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> [&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>]: &lt;span style="color:#6c7086;font-style:italic"># 리스트보다 집합이 빠름&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">if&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>}: &lt;span style="color:#6c7086;font-style:italic"># O(1) vs O(n)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="반복문-패턴">반복문 패턴&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># enumerate로 인덱스와 값 동시 순회&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> i, value &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">enumerate&lt;/span>(arr):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;Index &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>i&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">: &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>value&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># zip으로 여러 리스트 동시 순회&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>names &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#a6e3a1">&amp;#39;Alice&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;Bob&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;Charlie&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ages &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">25&lt;/span>, &lt;span style="color:#fab387">30&lt;/span>, &lt;span style="color:#fab387">35&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> name, age &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">zip&lt;/span>(names, ages):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>name&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1"> is &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>age&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1"> years old&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># range 활용&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">10&lt;/span>): &lt;span style="color:#6c7086;font-style:italic"># 0~9&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">11&lt;/span>): &lt;span style="color:#6c7086;font-style:italic"># 1~10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">10&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>): &lt;span style="color:#6c7086;font-style:italic"># 0,2,4,6,8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 역순 반복&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(n&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>): &lt;span style="color:#6c7086;font-style:italic"># n-1부터 0까지&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">reversed&lt;/span>(&lt;span style="color:#89dceb">range&lt;/span>(n)): &lt;span style="color:#6c7086;font-style:italic"># 위와 동일&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="반복-제어">반복 제어&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># break와 continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">10&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">3&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">continue&lt;/span> &lt;span style="color:#6c7086;font-style:italic"># 3은 건너뛰기&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">7&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">break&lt;/span> &lt;span style="color:#6c7086;font-style:italic"># 7에서 종료&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># else절 활용 (break로 종료되지 않았을 때만 실행)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">5&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">10&lt;/span>: &lt;span style="color:#6c7086;font-style:italic"># 이 조건은 만족되지 않음&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;반복문이 완전히 종료됨&amp;#34;&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># 실행됨&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-7-함수와-람다-표현식">⚡ 7. 함수와 람다 표현식&lt;/h2>
&lt;h3 id="함수-정의와-활용">함수 정의와 활용&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 기본 함수&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">gcd&lt;/span>(a, b):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> b:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a, b &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> b, a &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 기본값 매개변수&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">power&lt;/span>(base, exp&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">2&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> base &lt;span style="color:#89dceb;font-weight:bold">**&lt;/span> exp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 가변 인수&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">sum_all&lt;/span>(&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>args):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">sum&lt;/span>(args)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">print_info&lt;/span>(&lt;span style="color:#89dceb;font-weight:bold">**&lt;/span>kwargs):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> key, value &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> kwargs&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>items():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>key&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">: &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>value&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="람다-표현식">람다 표현식&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 기본 람다&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>square &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">lambda&lt;/span> x: x &lt;span style="color:#89dceb;font-weight:bold">**&lt;/span> &lt;span style="color:#fab387">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>add &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">lambda&lt;/span> x, y: x &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 정렬에서 람다 활용&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>students &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [(&lt;span style="color:#a6e3a1">&amp;#39;Alice&amp;#39;&lt;/span>, &lt;span style="color:#fab387">85&lt;/span>), (&lt;span style="color:#a6e3a1">&amp;#39;Bob&amp;#39;&lt;/span>, &lt;span style="color:#fab387">90&lt;/span>), (&lt;span style="color:#a6e3a1">&amp;#39;Charlie&amp;#39;&lt;/span>, &lt;span style="color:#fab387">78&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>students&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>sort(key&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#cba6f7">lambda&lt;/span> x: x[&lt;span style="color:#fab387">1&lt;/span>]) &lt;span style="color:#6c7086;font-style:italic"># 점수로 정렬&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># map, filter, reduce와 함께&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>numbers &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>squares &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">list&lt;/span>(&lt;span style="color:#89dceb">map&lt;/span>(&lt;span style="color:#cba6f7">lambda&lt;/span> x: x&lt;span style="color:#89dceb;font-weight:bold">**&lt;/span>&lt;span style="color:#fab387">2&lt;/span>, numbers))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>evens &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">list&lt;/span>(&lt;span style="color:#89dceb">filter&lt;/span>(&lt;span style="color:#cba6f7">lambda&lt;/span> x: x &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>, numbers))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">from&lt;/span> &lt;span style="color:#fab387">functools&lt;/span> &lt;span style="color:#94e2d5">import&lt;/span> reduce
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>product &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> reduce(&lt;span style="color:#cba6f7">lambda&lt;/span> x, y: x &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> y, numbers)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="내장-함수-활용">내장 함수 활용&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 수학 함수&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">abs&lt;/span>(&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">5&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># 5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">min&lt;/span>(&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">max&lt;/span>([&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>]) &lt;span style="color:#6c7086;font-style:italic"># 3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">sum&lt;/span>([&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>]) &lt;span style="color:#6c7086;font-style:italic"># 6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">pow&lt;/span>(&lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># 8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 형변환&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">int&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;123&amp;#39;&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># 123&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">float&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;3.14&amp;#39;&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># 3.14&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">str&lt;/span>(&lt;span style="color:#fab387">123&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># &amp;#39;123&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">bool&lt;/span>(&lt;span style="color:#fab387">0&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 유용한 함수들&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">len&lt;/span>([&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>]) &lt;span style="color:#6c7086;font-style:italic"># 3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">type&lt;/span>(&lt;span style="color:#fab387">123&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># &amp;lt;class &amp;#39;int&amp;#39;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">isinstance&lt;/span>(&lt;span style="color:#fab387">123&lt;/span>, &lt;span style="color:#89dceb">int&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># True&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-8-예외처리-기본">🛡️ 8. 예외처리 기본&lt;/h2>
&lt;h3 id="try-except-패턴">try-except 패턴&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 기본 예외처리&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">10&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">/&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">except&lt;/span> &lt;span style="color:#fab387">ZeroDivisionError&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 여러 예외 처리&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> value &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">int&lt;/span>(&lt;span style="color:#89dceb">input&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">10&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">/&lt;/span> value
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">except&lt;/span> (&lt;span style="color:#fab387">ValueError&lt;/span>, &lt;span style="color:#fab387">ZeroDivisionError&lt;/span>) &lt;span style="color:#cba6f7">as&lt;/span> e:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;오류 발생: &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>e&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># else와 finally&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> file &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">open&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;data.txt&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;r&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">except&lt;/span> &lt;span style="color:#fab387">FileNotFoundError&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;파일을 찾을 수 없습니다&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> data &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> file&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>read() &lt;span style="color:#6c7086;font-style:italic"># 예외가 없을 때만 실행&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">finally&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;file&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">locals&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> file&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>close() &lt;span style="color:#6c7086;font-style:italic"># 항상 실행&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ps에서-자주-사용하는-예외처리">PS에서 자주 사용하는 예외처리&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 안전한 입력 처리&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">safe_input&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">int&lt;/span>(&lt;span style="color:#89dceb">input&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">except&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 리스트 인덱스 안전 접근&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">safe_get&lt;/span>(lst, index, default&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">None&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> lst[index]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">except&lt;/span> &lt;span style="color:#fab387">IndexError&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 딕셔너리 안전 접근 (get() 메서드가 더 나음)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">safe_dict_get&lt;/span>(d, key, default&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">0&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> d[key]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">except&lt;/span> &lt;span style="color:#fab387">KeyError&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> default
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-1단계-핵심-요약">📝 1단계 핵심 요약&lt;/h2>
&lt;h3 id="꼭-기억해야-할-패턴">꼭 기억해야 할 패턴&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>빠른 입출력&lt;/strong>: &lt;code>sys.stdin.readline&lt;/code>과 &lt;code>strip()&lt;/code>&lt;/li>
&lt;li>&lt;strong>문자열 처리&lt;/strong>: &lt;code>split()&lt;/code>, &lt;code>join()&lt;/code>, &lt;code>replace()&lt;/code>&lt;/li>
&lt;li>&lt;strong>리스트 조작&lt;/strong>: 컴프리헨션, 슬라이싱, &lt;code>sort()&lt;/code> vs &lt;code>sorted()&lt;/code>&lt;/li>
&lt;li>&lt;strong>딕셔너리&lt;/strong>: &lt;code>get()&lt;/code>, &lt;code>defaultdict&lt;/code>, &lt;code>Counter&lt;/code>&lt;/li>
&lt;li>&lt;strong>집합 연산&lt;/strong>: 중복 제거, 교집합/합집합&lt;/li>
&lt;li>&lt;strong>반복문&lt;/strong>: &lt;code>enumerate()&lt;/code>, &lt;code>zip()&lt;/code>, &lt;code>range()&lt;/code>&lt;/li>
&lt;/ol>
&lt;h3 id="자주-하는-실수들">자주 하는 실수들&lt;/h3>
&lt;ul>
&lt;li>2차원 리스트 생성 시 얕은 복사&lt;/li>
&lt;li>문자열 불변성 무시&lt;/li>
&lt;li>딕셔너리 KeyError&lt;/li>
&lt;li>빈 집합을 &lt;code>{}&lt;/code>로 생성&lt;/li>
&lt;li>&lt;code>input()&lt;/code>과 &lt;code>sys.stdin.readline()&lt;/code>의 차이점&lt;/li>
&lt;/ul>
&lt;h1 id="파이썬-ps-2단계-다른-언어-개발자를-위한-파이썬-특화-기법">파이썬 PS 2단계: 다른 언어 개발자를 위한 파이썬 특화 기법&lt;/h1>
&lt;h2 id="-1-분기문과-제어문---파이썬만의-특징">🔀 1. 분기문과 제어문 - 파이썬만의 특징&lt;/h2>
&lt;h3 id="조건문의-파이썬스러운-표현">조건문의 파이썬스러운 표현&lt;/h3>
&lt;h4 id="삼항-연산자-ternary-operator">삼항 연산자 (Ternary Operator)&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 기본 형태&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> value_if_true &lt;span style="color:#cba6f7">if&lt;/span> condition &lt;span style="color:#cba6f7">else&lt;/span> value_if_false
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 실용 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>max_val &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> a &lt;span style="color:#cba6f7">if&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> b &lt;span style="color:#cba6f7">else&lt;/span> b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>status &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;pass&amp;#34;&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> score &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">60&lt;/span> &lt;span style="color:#cba6f7">else&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;fail&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sign &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> num &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#cba6f7">else&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 중첩 삼항 연산자 (권장하지 않음)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>grade &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;A&amp;#34;&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> score &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">90&lt;/span> &lt;span style="color:#cba6f7">else&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;B&amp;#34;&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> score &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">80&lt;/span> &lt;span style="color:#cba6f7">else&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;C&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># Java/C++ 개발자 주의: 파이썬은 ? : 연산자가 없음&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># Java: int result = condition ? value1 : value2;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># Python: result = value1 if condition else value2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="truthyfalsy-값-활용">Truthy/Falsy 값 활용&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 파이썬에서 False로 평가되는 값들&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>falsy_values &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">False&lt;/span>, &lt;span style="color:#fab387">None&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">0.0&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>, [], {}, &lt;span style="color:#89dceb">set&lt;/span>()]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 실용적인 활용&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">process_data&lt;/span>(data):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">not&lt;/span> data: &lt;span style="color:#6c7086;font-style:italic"># 빈 리스트, None, 빈 문자열 모두 처리&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;No data&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;Processing &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>&lt;span style="color:#89dceb">len&lt;/span>(data)&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1"> items&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 기본값 설정 패턴&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>name &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input_name &lt;span style="color:#89dceb;font-weight:bold">or&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Anonymous&amp;#34;&lt;/span> &lt;span style="color:#6c7086;font-style:italic"># input_name이 빈 문자열이면 &amp;#34;Anonymous&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>items &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> user_items &lt;span style="color:#89dceb;font-weight:bold">or&lt;/span> [] &lt;span style="color:#6c7086;font-style:italic"># user_items가 None이면 빈 리스트&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># Java/C++과 다른 점: 0, 빈 컬렉션도 False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># Java: if (list.size() &amp;gt; 0) vs Python: if list:&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="체이닝-비교-chained-comparisons">체이닝 비교 (Chained Comparisons)&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 파이썬만의 독특한 기능&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>age &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">25&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#fab387">18&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> age &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#fab387">65&lt;/span>: &lt;span style="color:#6c7086;font-style:italic"># Java/C++: if (age &amp;gt;= 18 &amp;amp;&amp;amp; age &amp;lt; 65)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Working age&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 여러 조건 체이닝&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">if&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> b &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> c &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> d: &lt;span style="color:#6c7086;font-style:italic"># 모든 부등호가 성립해야 함&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Ascending order&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 실용 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">is_valid_score&lt;/span>(score):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> score &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> &lt;span style="color:#fab387">100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">is_triangle&lt;/span>(a, b, c):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> b &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> c &lt;span style="color:#89dceb;font-weight:bold">and&lt;/span> b &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> c &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">and&lt;/span> c &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 주의: 복잡한 체이닝은 가독성을 해칠 수 있음&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="match-case-문-python-310">match-case 문 (Python 3.10+)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># Switch-case의 파이썬 버전&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">handle_http_status&lt;/span>(status):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">match&lt;/span> status:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> &lt;span style="color:#fab387">200&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;OK&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> &lt;span style="color:#fab387">404&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Not Found&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> &lt;span style="color:#fab387">500&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> &lt;span style="color:#fab387">502&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> &lt;span style="color:#fab387">503&lt;/span>: &lt;span style="color:#6c7086;font-style:italic"># 여러 값 매칭&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Server Error&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> status &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#fab387">400&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> status &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#fab387">500&lt;/span>: &lt;span style="color:#6c7086;font-style:italic"># 조건부 매칭&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Client Error&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> _: &lt;span style="color:#6c7086;font-style:italic"># default case&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Unknown Status&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 패턴 매칭 활용&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">process_data&lt;/span>(data):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">match&lt;/span> data:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> []: &lt;span style="color:#6c7086;font-style:italic"># 빈 리스트&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Empty list&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> [x]: &lt;span style="color:#6c7086;font-style:italic"># 원소 하나인 리스트&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;Single item: &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>x&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> [x, y]: &lt;span style="color:#6c7086;font-style:italic"># 원소 두 개인 리스트&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;Two items: &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>x&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">, &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>y&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> [x, &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>rest]: &lt;span style="color:#6c7086;font-style:italic"># 첫 번째 원소와 나머지&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;First: &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>x&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">, Rest: &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>rest&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> {&lt;span style="color:#a6e3a1">&amp;#34;type&amp;#34;&lt;/span>: &lt;span style="color:#a6e3a1">&amp;#34;user&amp;#34;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#34;name&amp;#34;&lt;/span>: name}: &lt;span style="color:#6c7086;font-style:italic"># 딕셔너리 패턴&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;User: &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>name&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> _:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Unknown pattern&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-2-반복문---파이썬의-강력한-이터레이션">🔄 2. 반복문 - 파이썬의 강력한 이터레이션&lt;/h2>
&lt;h3 id="for문의-다양한-활용">for문의 다양한 활용&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 기본 for문 (Java/C++와 다른 점)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># Java: for(int i = 0; i &amp;lt; 10; i++)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># Python: for i in range(10)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 인덱스와 값 동시 접근&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fruits &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#a6e3a1">&amp;#39;apple&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;banana&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;cherry&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> i, fruit &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">enumerate&lt;/span>(fruits):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>i&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">: &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>fruit&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 시작 인덱스 지정&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> i, fruit &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">enumerate&lt;/span>(fruits, &lt;span style="color:#fab387">1&lt;/span>): &lt;span style="color:#6c7086;font-style:italic"># 1부터 시작&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>i&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">: &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>fruit&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 여러 시퀀스 동시 순회&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>names &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#a6e3a1">&amp;#39;Alice&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;Bob&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;Charlie&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ages &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">25&lt;/span>, &lt;span style="color:#fab387">30&lt;/span>, &lt;span style="color:#fab387">35&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> name, age &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">zip&lt;/span>(names, ages):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>name&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1"> is &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>age&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1"> years old&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 길이가 다른 시퀀스 처리&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">from&lt;/span> &lt;span style="color:#fab387">itertools&lt;/span> &lt;span style="color:#94e2d5">import&lt;/span> zip_longest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> name, age &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> zip_longest(names, ages, fillvalue&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;Unknown&amp;#34;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>name&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">: &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>age&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="range의-고급-활용">range의 고급 활용&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 기본 range 패턴&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">10&lt;/span>): &lt;span style="color:#6c7086;font-style:italic"># 0~9&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">11&lt;/span>): &lt;span style="color:#6c7086;font-style:italic"># 1~10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">10&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>): &lt;span style="color:#6c7086;font-style:italic"># 0,2,4,6,8 (step=2)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 역순 반복&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">10&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>): &lt;span style="color:#6c7086;font-style:italic"># 10,9,8,...,1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">reversed&lt;/span>(&lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">10&lt;/span>)): &lt;span style="color:#6c7086;font-style:italic"># 9,8,7,...,0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 실용적인 패턴들&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 2차원 배열 순회&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>matrix &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [[&lt;span style="color:#fab387">1&lt;/span>,&lt;span style="color:#fab387">2&lt;/span>,&lt;span style="color:#fab387">3&lt;/span>], [&lt;span style="color:#fab387">4&lt;/span>,&lt;span style="color:#fab387">5&lt;/span>,&lt;span style="color:#fab387">6&lt;/span>], [&lt;span style="color:#fab387">7&lt;/span>,&lt;span style="color:#fab387">8&lt;/span>,&lt;span style="color:#fab387">9&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#89dceb">len&lt;/span>(matrix)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#89dceb">len&lt;/span>(matrix[i])):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(matrix[i][j])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 더 파이썬스러운 방법&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> row &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> matrix:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> cell &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> row:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(cell)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 인덱스가 필요한 경우&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> i, row &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">enumerate&lt;/span>(matrix):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> j, cell &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">enumerate&lt;/span>(row):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;matrix[&lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>i&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">][&lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>j&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">] = &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>cell&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="while문과-제어">while문과 제어&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># while-else 패턴 (다른 언어에 없는 기능)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">find_factor&lt;/span>(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> n:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;Found factor: &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>i&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>: &lt;span style="color:#6c7086;font-style:italic"># break로 빠져나오지 않았을 때 실행&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>n&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1"> is prime&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># for-else도 동일하게 작동&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">search_item&lt;/span>(items, target):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> item &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> items:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> item &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> target:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;Found &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>target&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>target&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1"> not found&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 무한루프 패턴&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">while&lt;/span> &lt;span style="color:#fab387">True&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user_input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">input&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Enter command (quit to exit): &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> user_input &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;quit&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> process_command(user_input)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-3-슈가-신택스-syntactic-sugar">🍬 3. 슈가 신택스 (Syntactic Sugar)&lt;/h2>
&lt;h3 id="리스트-컴프리헨션의-고급-활용">리스트 컴프리헨션의 고급 활용&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 기본 컴프리헨션&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>squares &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [x&lt;span style="color:#89dceb;font-weight:bold">**&lt;/span>&lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#cba6f7">for&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">10&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>evens &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [x &lt;span style="color:#cba6f7">for&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">20&lt;/span>) &lt;span style="color:#cba6f7">if&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 중첩 루프 컴프리헨션&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>matrix &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [[i&lt;span style="color:#89dceb;font-weight:bold">+&lt;/span>j &lt;span style="color:#cba6f7">for&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">3&lt;/span>)] &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">3&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 결과: [[0,1,2], [1,2,3], [2,3,4]]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 조건부 표현식과 함께&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [x &lt;span style="color:#cba6f7">if&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#cba6f7">else&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#cba6f7">for&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> [&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 복잡한 조건&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>filtered &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [x &lt;span style="color:#cba6f7">for&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">100&lt;/span>) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">and&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#fab387">3&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">and&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">10&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 중첩 리스트 평탄화&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nested &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [[&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>], [&lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>], [&lt;span style="color:#fab387">5&lt;/span>, &lt;span style="color:#fab387">6&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>flattened &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [item &lt;span style="color:#cba6f7">for&lt;/span> sublist &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> nested &lt;span style="color:#cba6f7">for&lt;/span> item &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> sublist]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 결과: [1, 2, 3, 4, 5, 6]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 문자열 처리&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>words &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#a6e3a1">&amp;#34;hello&amp;#34;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#34;world&amp;#34;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#34;python&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lengths &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#89dceb">len&lt;/span>(word) &lt;span style="color:#cba6f7">for&lt;/span> word &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> words]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>capitals &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [word&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>upper() &lt;span style="color:#cba6f7">for&lt;/span> word &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> words &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(word) &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">4&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="딕셔너리와-집합-컴프리헨션">딕셔너리와 집합 컴프리헨션&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 딕셔너리 컴프리헨션&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>squares_dict &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {x: x&lt;span style="color:#89dceb;font-weight:bold">**&lt;/span>&lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#cba6f7">for&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">5&lt;/span>)}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 결과: {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 조건부 딕셔너리 컴프리헨션&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>word_lengths &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {word: &lt;span style="color:#89dceb">len&lt;/span>(word) &lt;span style="color:#cba6f7">for&lt;/span> word &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> words &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(word) &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">3&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 딕셔너리 변환&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>original &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#a6e3a1">&amp;#39;a&amp;#39;&lt;/span>: &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;b&amp;#39;&lt;/span>: &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;c&amp;#39;&lt;/span>: &lt;span style="color:#fab387">3&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>reversed_dict &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {v: k &lt;span style="color:#cba6f7">for&lt;/span> k, v &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> original&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>items()}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 집합 컴프리헨션&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>unique_lengths &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#89dceb">len&lt;/span>(word) &lt;span style="color:#cba6f7">for&lt;/span> word &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> words}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 실용적인 예시: 단어 빈도 계산&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>text &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;hello world hello python world&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>word_count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {word: text&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>split()&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>count(word) &lt;span style="color:#cba6f7">for&lt;/span> word &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">set&lt;/span>(text&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>split())}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="언패킹과-패킹">언패킹과 패킹&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 기본 언패킹&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>point &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (&lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>x, y &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> point
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 확장 언패킹 (Python 3+)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>numbers &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>first, &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>middle, last &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> numbers &lt;span style="color:#6c7086;font-style:italic"># first=1, middle=[2,3,4], last=5&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>first, second, &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>rest &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> numbers &lt;span style="color:#6c7086;font-style:italic"># first=1, second=2, rest=[3,4,5]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 함수 인수 언패킹&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">greet&lt;/span>(name, age, city):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;Hello &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>name&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">, &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>age&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1"> years old from &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>city&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>person &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (&lt;span style="color:#a6e3a1">&amp;#34;Alice&amp;#34;&lt;/span>, &lt;span style="color:#fab387">25&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#34;Seoul&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>greet(&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>person) &lt;span style="color:#6c7086;font-style:italic"># 튜플 언패킹&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>person_dict &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#a6e3a1">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#a6e3a1">&amp;#34;Bob&amp;#34;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#34;age&amp;#34;&lt;/span>: &lt;span style="color:#fab387">30&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#34;city&amp;#34;&lt;/span>: &lt;span style="color:#a6e3a1">&amp;#34;Busan&amp;#34;&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>greet(&lt;span style="color:#89dceb;font-weight:bold">**&lt;/span>person_dict) &lt;span style="color:#6c7086;font-style:italic"># 딕셔너리 언패킹&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 변수 교환&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a, b &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> b, a &lt;span style="color:#6c7086;font-style:italic"># Java/C++: temp = a; a = b; b = temp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 여러 변수 동시 할당&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>a &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> b &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> c &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>x, y, z &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="walrus-연산자----python-38">Walrus 연산자 (:=) - Python 3.8+&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 할당과 동시에 조건 검사&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">if&lt;/span> (n &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(some_list)) &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">10&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;List is too long (&lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>n&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1"> elements)&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># while 루프에서 유용&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">while&lt;/span> (line &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> &lt;span style="color:#89dceb">input&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Enter something: &amp;#34;&lt;/span>)) &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;quit&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;You entered: &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>line&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 리스트 컴프리헨션에서 중복 계산 방지&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 나쁜 예: expensive_function이 두 번 호출됨&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>results &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [expensive_function(x) &lt;span style="color:#cba6f7">for&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> data &lt;span style="color:#cba6f7">if&lt;/span> expensive_function(x) &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 좋은 예: walrus 연산자로 한 번만 호출&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>results &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [y &lt;span style="color:#cba6f7">for&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> data &lt;span style="color:#cba6f7">if&lt;/span> (y &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> expensive_function(x)) &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-4-파이썬-특징적인-부분들">🐍 4. 파이썬 특징적인 부분들&lt;/h2>
&lt;h3 id="동적-타이핑의-활용">동적 타이핑의 활용&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 같은 변수에 다른 타입 할당 가능 (Java/C++와 다름)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>var &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">42&lt;/span> &lt;span style="color:#6c7086;font-style:italic"># int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>var &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;hello&amp;#34;&lt;/span> &lt;span style="color:#6c7086;font-style:italic"># str&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>var &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>] &lt;span style="color:#6c7086;font-style:italic"># list&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 타입 힌트 (Python 3.5+) - 실행에는 영향 없음&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">greet&lt;/span>(name: &lt;span style="color:#89dceb">str&lt;/span>, age: &lt;span style="color:#89dceb">int&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#89dceb">str&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;Hello &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>name&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">, you are &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>age&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1"> years old&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># isinstance를 이용한 타입 체크&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">process_input&lt;/span>(data):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb">isinstance&lt;/span>(data, &lt;span style="color:#89dceb">str&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> data&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>upper()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">elif&lt;/span> &lt;span style="color:#89dceb">isinstance&lt;/span>(data, &lt;span style="color:#89dceb">list&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(data)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">elif&lt;/span> &lt;span style="color:#89dceb">isinstance&lt;/span>(data, (&lt;span style="color:#89dceb">int&lt;/span>, &lt;span style="color:#89dceb">float&lt;/span>)): &lt;span style="color:#6c7086;font-style:italic"># 여러 타입 체크&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> data &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#fab387">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#fab387">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 덕 타이핑 (Duck Typing)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">print_items&lt;/span>(container):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 리스트든 튜플이든 문자열이든 이터러블이면 작동&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> item &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> container:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(item)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="다중-할당과-특수한-값들">다중 할당과 특수한 값들&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># None 값 처리 (Java의 null과 유사하지만 다름)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">safe_divide&lt;/span>(a, b):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">/&lt;/span> b &lt;span style="color:#cba6f7">if&lt;/span> b &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#cba6f7">else&lt;/span> &lt;span style="color:#fab387">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> safe_divide(&lt;span style="color:#fab387">10&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">if&lt;/span> result &lt;span style="color:#89dceb;font-weight:bold">is&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">not&lt;/span> &lt;span style="color:#fab387">None&lt;/span>: &lt;span style="color:#6c7086;font-style:italic"># == None이 아닌 is를 사용&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;Result: &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>result&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 다중 할당의 활용&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">get_min_max&lt;/span>(numbers):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">min&lt;/span>(numbers), &lt;span style="color:#89dceb">max&lt;/span>(numbers)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>min_val, max_val &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> get_min_max([&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">9&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 언더스코어로 무시할 값 표시&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>_, max_val &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> get_min_max(numbers) &lt;span style="color:#6c7086;font-style:italic"># 최솟값 무시&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>first, _, third &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># 두 번째 값 무시&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="메서드-체이닝과-fluent-interface">메서드 체이닝과 fluent interface&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 문자열 메서드 체이닝&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>text &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34; Hello World &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> text&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>strip()&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>lower()&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>replace(&lt;span style="color:#a6e3a1">&amp;#34; &amp;#34;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#34;_&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 결과: &amp;#34;hello_world&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 리스트 메서드는 체이닝 불가 (대부분 None 반환)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 나쁜 예&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># numbers = [3, 1, 4, 1, 5].sort().reverse() # AttributeError!&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 올바른 예&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>numbers &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>numbers&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>sort()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>numbers&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>reverse()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 또는 함수형 스타일&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>numbers &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">sorted&lt;/span>([&lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>], reverse&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">True&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="컨텍스트-매니저-with-문">컨텍스트 매니저 (with 문)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 파일 처리 (자동으로 파일 닫기)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">with&lt;/span> &lt;span style="color:#89dceb">open&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;data.txt&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;r&amp;#39;&lt;/span>) &lt;span style="color:#cba6f7">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> content &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> f&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>read()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 파일이 자동으로 닫힘&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 여러 파일 동시 처리&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">with&lt;/span> &lt;span style="color:#89dceb">open&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;input.txt&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;r&amp;#39;&lt;/span>) &lt;span style="color:#cba6f7">as&lt;/span> infile, &lt;span style="color:#89dceb">open&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;output.txt&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;w&amp;#39;&lt;/span>) &lt;span style="color:#cba6f7">as&lt;/span> outfile:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> outfile&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>write(infile&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>read()&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>upper())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 커스텀 컨텍스트 매니저&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">from&lt;/span> &lt;span style="color:#fab387">contextlib&lt;/span> &lt;span style="color:#94e2d5">import&lt;/span> contextmanager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89b4fa;font-weight:bold">@contextmanager&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">timer&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#94e2d5">import&lt;/span> &lt;span style="color:#fab387">time&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> start &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> time&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Timer started&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">yield&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">finally&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> end &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> time&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;Elapsed time: &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>end &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> start&lt;span style="color:#a6e3a1">:&lt;/span>&lt;span style="color:#a6e3a1">.2f&lt;/span>&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">s&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 사용&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">with&lt;/span> timer():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 시간을 측정할 코드&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> time&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>sleep(&lt;span style="color:#fab387">1&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-5-함수형-프로그래밍과-람다">🔧 5. 함수형 프로그래밍과 람다&lt;/h2>
&lt;h3 id="람다-함수의-다양한-활용">람다 함수의 다양한 활용&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 기본 람다&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>square &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">lambda&lt;/span> x: x &lt;span style="color:#89dceb;font-weight:bold">**&lt;/span> &lt;span style="color:#fab387">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>add &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">lambda&lt;/span> x, y: x &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> y
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 정렬에서 람다 활용&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>students &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [(&lt;span style="color:#a6e3a1">&amp;#39;Alice&amp;#39;&lt;/span>, &lt;span style="color:#fab387">85&lt;/span>), (&lt;span style="color:#a6e3a1">&amp;#39;Bob&amp;#39;&lt;/span>, &lt;span style="color:#fab387">90&lt;/span>), (&lt;span style="color:#a6e3a1">&amp;#39;Charlie&amp;#39;&lt;/span>, &lt;span style="color:#fab387">78&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 이름으로 정렬&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>students&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>sort(key&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#cba6f7">lambda&lt;/span> student: student[&lt;span style="color:#fab387">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 점수로 정렬 (내림차순)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>students&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>sort(key&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#cba6f7">lambda&lt;/span> student: student[&lt;span style="color:#fab387">1&lt;/span>], reverse&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 복잡한 정렬 기준&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [(&lt;span style="color:#a6e3a1">&amp;#39;A&amp;#39;&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">100&lt;/span>), (&lt;span style="color:#a6e3a1">&amp;#39;B&amp;#39;&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">85&lt;/span>), (&lt;span style="color:#a6e3a1">&amp;#39;A&amp;#39;&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">95&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 첫 번째 필드로 정렬, 같으면 세 번째 필드로 정렬&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>sort(key&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#cba6f7">lambda&lt;/span> x: (x[&lt;span style="color:#fab387">0&lt;/span>], x[&lt;span style="color:#fab387">2&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 조건부 람다&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>get_grade &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">lambda&lt;/span> score: &lt;span style="color:#a6e3a1">&amp;#39;A&amp;#39;&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> score &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">90&lt;/span> &lt;span style="color:#cba6f7">else&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;B&amp;#39;&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> score &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">80&lt;/span> &lt;span style="color:#cba6f7">else&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;C&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="map-filter-reduce-함수형-패턴">map, filter, reduce 함수형 패턴&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># map: 모든 요소에 함수 적용&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>numbers &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>squares &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">list&lt;/span>(&lt;span style="color:#89dceb">map&lt;/span>(&lt;span style="color:#cba6f7">lambda&lt;/span> x: x&lt;span style="color:#89dceb;font-weight:bold">**&lt;/span>&lt;span style="color:#fab387">2&lt;/span>, numbers))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 결과: [1, 4, 9, 16, 25]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 여러 시퀀스에 적용&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nums1 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nums2 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>, &lt;span style="color:#fab387">6&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sums &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">list&lt;/span>(&lt;span style="color:#89dceb">map&lt;/span>(&lt;span style="color:#cba6f7">lambda&lt;/span> x, y: x &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> y, nums1, nums2))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 결과: [5, 7, 9]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># filter: 조건을 만족하는 요소만 선택&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>evens &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">list&lt;/span>(&lt;span style="color:#89dceb">filter&lt;/span>(&lt;span style="color:#cba6f7">lambda&lt;/span> x: x &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>, numbers))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 결과: [2, 4]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># reduce: 누적 연산&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">from&lt;/span> &lt;span style="color:#fab387">functools&lt;/span> &lt;span style="color:#94e2d5">import&lt;/span> reduce
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>product &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> reduce(&lt;span style="color:#cba6f7">lambda&lt;/span> x, y: x &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> y, numbers) &lt;span style="color:#6c7086;font-style:italic"># 1*2*3*4*5 = 120&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>max_val &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> reduce(&lt;span style="color:#cba6f7">lambda&lt;/span> x, y: x &lt;span style="color:#cba6f7">if&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> y &lt;span style="color:#cba6f7">else&lt;/span> y, numbers)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 실용적인 예시: 단어에서 모음 제거&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">remove_vowels&lt;/span>(text):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vowels &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;aeiouAEIOU&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>join(&lt;span style="color:#89dceb">filter&lt;/span>(&lt;span style="color:#cba6f7">lambda&lt;/span> char: char &lt;span style="color:#89dceb;font-weight:bold">not&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> vowels, text))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 중첩 함수와 클로저&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">make_multiplier&lt;/span>(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#cba6f7">lambda&lt;/span> x: x &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>double &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> make_multiplier(&lt;span style="color:#fab387">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>triple &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> make_multiplier(&lt;span style="color:#fab387">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">print&lt;/span>(double(&lt;span style="color:#fab387">5&lt;/span>)) &lt;span style="color:#6c7086;font-style:italic"># 10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">print&lt;/span>(triple(&lt;span style="color:#fab387">5&lt;/span>)) &lt;span style="color:#6c7086;font-style:italic"># 15&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="고차-함수-패턴">고차 함수 패턴&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 함수를 인수로 받는 함수&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">apply_operation&lt;/span>(numbers, operation):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> [operation(x) &lt;span style="color:#cba6f7">for&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> numbers]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 사용 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result1 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> apply_operation([&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>], &lt;span style="color:#cba6f7">lambda&lt;/span> x: x&lt;span style="color:#89dceb;font-weight:bold">**&lt;/span>&lt;span style="color:#fab387">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result2 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> apply_operation([&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>], &lt;span style="color:#cba6f7">lambda&lt;/span> x: x &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#fab387">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 함수를 반환하는 함수&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">create_validator&lt;/span>(min_val, max_val):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">validator&lt;/span>(value):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> min_val &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> value &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> max_val
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> validator
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>age_validator &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> create_validator(&lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">120&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>score_validator &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> create_validator(&lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">100&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 데코레이터 기본 이해&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">timing_decorator&lt;/span>(func):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">wrapper&lt;/span>(&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>args, &lt;span style="color:#89dceb;font-weight:bold">**&lt;/span>kwargs):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#94e2d5">import&lt;/span> &lt;span style="color:#fab387">time&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> start &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> time&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> func(&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>args, &lt;span style="color:#89dceb;font-weight:bold">**&lt;/span>kwargs)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> end &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> time&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>time()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>func&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>&lt;span style="color:#f5e0dc">__name__&lt;/span>&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1"> took &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>end &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> start&lt;span style="color:#a6e3a1">:&lt;/span>&lt;span style="color:#a6e3a1">.4f&lt;/span>&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">s&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> result
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> wrapper
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89b4fa;font-weight:bold">@timing_decorator&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">slow_function&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#94e2d5">import&lt;/span> &lt;span style="color:#fab387">time&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> time&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>sleep(&lt;span style="color:#fab387">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Done&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-6-자료구조-유용한-패턴들">📊 6. 자료구조 유용한 패턴들&lt;/h2>
&lt;h3 id="딕셔너리-고급-패턴">딕셔너리 고급 패턴&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 패턴 1: 키가 있으면 값 증가, 없으면 1로 설정&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 방법 1: get() 사용&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> item &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> items:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count[item] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> count&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>get(item, &lt;span style="color:#fab387">0&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 방법 2: setdefault() 사용&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> item &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> items:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>setdefault(item, &lt;span style="color:#fab387">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count[item] &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 방법 3: defaultdict 사용 (가장 깔끔)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">from&lt;/span> &lt;span style="color:#fab387">collections&lt;/span> &lt;span style="color:#94e2d5">import&lt;/span> defaultdict
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> defaultdict(&lt;span style="color:#89dceb">int&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> item &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> items:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count[item] &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 방법 4: Counter 사용 (가장 파이썬스러움)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">from&lt;/span> &lt;span style="color:#fab387">collections&lt;/span> &lt;span style="color:#94e2d5">import&lt;/span> Counter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> Counter(items)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 패턴 2: 그룹핑&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 학생들을 성적별로 그룹핑&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>students &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [(&lt;span style="color:#a6e3a1">&amp;#39;Alice&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;A&amp;#39;&lt;/span>), (&lt;span style="color:#a6e3a1">&amp;#39;Bob&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;B&amp;#39;&lt;/span>), (&lt;span style="color:#a6e3a1">&amp;#39;Charlie&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;A&amp;#39;&lt;/span>), (&lt;span style="color:#a6e3a1">&amp;#39;David&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;B&amp;#39;&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># defaultdict로 그룹핑&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">from&lt;/span> &lt;span style="color:#fab387">collections&lt;/span> &lt;span style="color:#94e2d5">import&lt;/span> defaultdict
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>groups &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> defaultdict(&lt;span style="color:#89dceb">list&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> name, grade &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> students:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> groups[grade]&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(name)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 결과: {&amp;#39;A&amp;#39;: [&amp;#39;Alice&amp;#39;, &amp;#39;Charlie&amp;#39;], &amp;#39;B&amp;#39;: [&amp;#39;Bob&amp;#39;, &amp;#39;David&amp;#39;]}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># itertools.groupby 사용 (정렬된 데이터)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">from&lt;/span> &lt;span style="color:#fab387">itertools&lt;/span> &lt;span style="color:#94e2d5">import&lt;/span> groupby
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>students&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>sort(key&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#cba6f7">lambda&lt;/span> x: x[&lt;span style="color:#fab387">1&lt;/span>]) &lt;span style="color:#6c7086;font-style:italic"># 성적으로 정렬 먼저&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>groups &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {grade: [name &lt;span style="color:#cba6f7">for&lt;/span> name, _ &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> group] 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> grade, group &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> groupby(students, key&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#cba6f7">lambda&lt;/span> x: x[&lt;span style="color:#fab387">1&lt;/span>])}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="리스트와-큐-스택-패턴">리스트와 큐, 스택 패턴&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 스택 패턴 (LIFO)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>stack &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>stack&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(&lt;span style="color:#fab387">1&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># push&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>stack&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(&lt;span style="color:#fab387">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>item &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> stack&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>pop() &lt;span style="color:#6c7086;font-style:italic"># pop (2)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 큐 패턴 (FIFO) - deque 사용 권장&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">from&lt;/span> &lt;span style="color:#fab387">collections&lt;/span> &lt;span style="color:#94e2d5">import&lt;/span> deque
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>queue &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> deque()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>queue&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(&lt;span style="color:#fab387">1&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># enqueue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>queue&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(&lt;span style="color:#fab387">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>item &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> queue&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>popleft() &lt;span style="color:#6c7086;font-style:italic"># dequeue (1)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 우선순위 큐&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">import&lt;/span> &lt;span style="color:#fab387">heapq&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>heap &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>heapq&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>heappush(heap, (priority, item))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>priority, item &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> heapq&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>heappop(heap)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 최대 힙 구현 (음수 이용)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>max_heap &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>heapq&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>heappush(max_heap, &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>value)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>max_value &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>heapq&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>heappop(max_heap)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 리스트의 고급 조작&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 특정 조건의 모든 요소 제거&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>numbers &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>, &lt;span style="color:#fab387">6&lt;/span>, &lt;span style="color:#fab387">7&lt;/span>, &lt;span style="color:#fab387">8&lt;/span>, &lt;span style="color:#fab387">9&lt;/span>, &lt;span style="color:#fab387">10&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 홀수만 남기기&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>numbers &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [x &lt;span style="color:#cba6f7">for&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> numbers &lt;span style="color:#cba6f7">if&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 또는 filter 사용&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>numbers &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">list&lt;/span>(&lt;span style="color:#89dceb">filter&lt;/span>(&lt;span style="color:#cba6f7">lambda&lt;/span> x: x &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">1&lt;/span>, numbers))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 리스트에서 중복 제거 (순서 유지)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">remove_duplicates&lt;/span>(lst):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> seen &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">set&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> item &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> lst:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> item &lt;span style="color:#89dceb;font-weight:bold">not&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> seen:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> seen&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>add(item)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(item)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> result
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 또는 dict.fromkeys() 트릭 (Python 3.7+)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>unique_list &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">list&lt;/span>(&lt;span style="color:#89dceb">dict&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>fromkeys(original_list))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="집합-연산-고급-활용">집합 연산 고급 활용&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 집합의 강력한 연산들&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set1 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set2 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>, &lt;span style="color:#fab387">6&lt;/span>, &lt;span style="color:#fab387">7&lt;/span>, &lt;span style="color:#fab387">8&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 교집합: 공통 원소&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>common &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> set1 &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> set2 &lt;span style="color:#6c7086;font-style:italic"># {4, 5}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 합집합: 모든 원소&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>all_items &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> set1 &lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> set2 &lt;span style="color:#6c7086;font-style:italic"># {1, 2, 3, 4, 5, 6, 7, 8}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 차집합: set1에만 있는 원소&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>only_in_set1 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> set1 &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> set2 &lt;span style="color:#6c7086;font-style:italic"># {1, 2, 3}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 대칭차집합: 둘 중 하나에만 있는 원소&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>symmetric_diff &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> set1 &lt;span style="color:#89dceb;font-weight:bold">^&lt;/span> set2 &lt;span style="color:#6c7086;font-style:italic"># {1, 2, 3, 6, 7, 8}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 실용적인 활용: 두 리스트의 공통 원소 찾기&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>list1 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>list2 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>, &lt;span style="color:#fab387">6&lt;/span>, &lt;span style="color:#fab387">7&lt;/span>, &lt;span style="color:#fab387">8&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>common_elements &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">list&lt;/span>(&lt;span style="color:#89dceb">set&lt;/span>(list1) &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#89dceb">set&lt;/span>(list2))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 중복 원소 찾기&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">find_duplicates&lt;/span>(lst):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> seen &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">set&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> duplicates &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">set&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> item &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> lst:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> item &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> seen:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> duplicates&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>add(item)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> seen&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>add(item)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">list&lt;/span>(duplicates)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="collections-모듈의-특수-자료구조">collections 모듈의 특수 자료구조&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">from&lt;/span> &lt;span style="color:#fab387">collections&lt;/span> &lt;span style="color:#94e2d5">import&lt;/span> namedtuple, OrderedDict, ChainMap
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># namedtuple: 필드명이 있는 튜플&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Point &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> namedtuple(&lt;span style="color:#a6e3a1">&amp;#39;Point&amp;#39;&lt;/span>, [&lt;span style="color:#a6e3a1">&amp;#39;x&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;y&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>p &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> Point(&lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">print&lt;/span>(p&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>x, p&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>y) &lt;span style="color:#6c7086;font-style:italic"># 3 4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">print&lt;/span>(p[&lt;span style="color:#fab387">0&lt;/span>], p[&lt;span style="color:#fab387">1&lt;/span>]) &lt;span style="color:#6c7086;font-style:italic"># 3 4 (인덱스로도 접근 가능)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># Student 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Student &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> namedtuple(&lt;span style="color:#a6e3a1">&amp;#39;Student&amp;#39;&lt;/span>, [&lt;span style="color:#a6e3a1">&amp;#39;name&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;age&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;grade&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alice &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> Student(&lt;span style="color:#a6e3a1">&amp;#39;Alice&amp;#39;&lt;/span>, &lt;span style="color:#fab387">20&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;A&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>alice&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>name&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1"> got &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>alice&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>grade&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># OrderedDict: 삽입 순서 유지 (Python 3.7+에서는 일반 dict도 순서 유지)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">from&lt;/span> &lt;span style="color:#fab387">collections&lt;/span> &lt;span style="color:#94e2d5">import&lt;/span> OrderedDict
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ordered &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> OrderedDict()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ordered[&lt;span style="color:#a6e3a1">&amp;#39;first&amp;#39;&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ordered[&lt;span style="color:#a6e3a1">&amp;#39;second&amp;#39;&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ordered[&lt;span style="color:#a6e3a1">&amp;#39;third&amp;#39;&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># ChainMap: 여러 딕셔너리를 하나처럼 사용&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>default_config &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#a6e3a1">&amp;#39;timeout&amp;#39;&lt;/span>: &lt;span style="color:#fab387">30&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;retries&amp;#39;&lt;/span>: &lt;span style="color:#fab387">3&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>user_config &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#a6e3a1">&amp;#39;timeout&amp;#39;&lt;/span>: &lt;span style="color:#fab387">60&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>config &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> ChainMap(user_config, default_config)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">print&lt;/span>(config[&lt;span style="color:#a6e3a1">&amp;#39;timeout&amp;#39;&lt;/span>]) &lt;span style="color:#6c7086;font-style:italic"># 60 (user_config가 우선)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">print&lt;/span>(config[&lt;span style="color:#a6e3a1">&amp;#39;retries&amp;#39;&lt;/span>]) &lt;span style="color:#6c7086;font-style:italic"># 3 (default_config에서)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-7-실전-활용-패턴-모음">🎯 7. 실전 활용 패턴 모음&lt;/h2>
&lt;h3 id="파일-처리-패턴">파일 처리 패턴&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 파일 읽기 패턴들&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 전체 파일 읽기&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">with&lt;/span> &lt;span style="color:#89dceb">open&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;file.txt&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;r&amp;#39;&lt;/span>, encoding&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;utf-8&amp;#39;&lt;/span>) &lt;span style="color:#cba6f7">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> content &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> f&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>read()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 줄 단위로 읽기&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">with&lt;/span> &lt;span style="color:#89dceb">open&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;file.txt&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;r&amp;#39;&lt;/span>, encoding&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;utf-8&amp;#39;&lt;/span>) &lt;span style="color:#cba6f7">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> f&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>readlines() &lt;span style="color:#6c7086;font-style:italic"># 개행문자 포함&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [line&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>strip() &lt;span style="color:#cba6f7">for&lt;/span> line &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> lines] &lt;span style="color:#6c7086;font-style:italic"># 개행문자 제거&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 한 줄씩 처리 (메모리 효율적)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">with&lt;/span> &lt;span style="color:#89dceb">open&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;file.txt&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;r&amp;#39;&lt;/span>, encoding&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;utf-8&amp;#39;&lt;/span>) &lt;span style="color:#cba6f7">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> line &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> process_line(line&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>strip())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># CSV 처리&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">import&lt;/span> &lt;span style="color:#fab387">csv&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">with&lt;/span> &lt;span style="color:#89dceb">open&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;data.csv&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;r&amp;#39;&lt;/span>, encoding&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;utf-8&amp;#39;&lt;/span>) &lt;span style="color:#cba6f7">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reader &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> csv&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>DictReader(f)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> row &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> reader:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(row[&lt;span style="color:#a6e3a1">&amp;#39;name&amp;#39;&lt;/span>], row[&lt;span style="color:#a6e3a1">&amp;#39;age&amp;#39;&lt;/span>])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="에러-처리-패턴">에러 처리 패턴&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 기본 try-except 패턴&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> risky_operation()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">except&lt;/span> SpecificError &lt;span style="color:#cba6f7">as&lt;/span> e:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> handle_specific_error(e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">except&lt;/span> (ErrorType1, ErrorType2) &lt;span style="color:#cba6f7">as&lt;/span> e:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> handle_multiple_errors(e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">except&lt;/span> &lt;span style="color:#fab387">Exception&lt;/span> &lt;span style="color:#cba6f7">as&lt;/span> e:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> handle_generic_error(e)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 예외가 발생하지 않았을 때&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> success_handler(result)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">finally&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 항상 실행&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cleanup()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># EAFP (Easier to Ask for Forgiveness than Permission) 패턴&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 파이썬스러운 방법&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> my_dict[key]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">except&lt;/span> &lt;span style="color:#fab387">KeyError&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> default_value
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># vs LBYL (Look Before You Leap) - 덜 파이썬스러움&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">if&lt;/span> key &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> my_dict:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> my_dict[key]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> default_value
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="성능-최적화-팁">성능 최적화 팁&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 문자열 연결 최적화&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 나쁜 예 (O(n²))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> word &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> words:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> word &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34; &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 좋은 예 (O(n))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34; &amp;#34;&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>join(words)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 리스트 내포 vs map/filter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 리스트 내포가 일반적으로 더 빠름&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>squares1 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [x&lt;span style="color:#89dceb;font-weight:bold">**&lt;/span>&lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#cba6f7">for&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">1000&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>squares2 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">list&lt;/span>(&lt;span style="color:#89dceb">map&lt;/span>(&lt;span style="color:#cba6f7">lambda&lt;/span> x: x&lt;span style="color:#89dceb;font-weight:bold">**&lt;/span>&lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">1000&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 집합 멤버십 테스트&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 리스트: O(n), 집합: O(1)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>large_list &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">list&lt;/span>(&lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">10000&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>large_set &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">set&lt;/span>(&lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">10000&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 느림&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#fab387">9999&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> large_list:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 빠름&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#fab387">9999&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> large_set:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 딕셔너리 vs 리스트 검색&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># key로 검색할 때는 딕셔너리가 훨씬 빠름&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data_dict &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {i: &lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;value_&lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>i&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">1000&lt;/span>)}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data_list &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [(i, &lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;value_&lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>i&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>) &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">1000&lt;/span>)]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="-3단계-핵심-요약">📝 3단계 핵심 요약&lt;/h2>
&lt;h3 id="javac-개발자가-주의할-점">Java/C++ 개발자가 주의할 점&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>타입 시스템&lt;/strong>: 동적 타이핑, isinstance() 활용&lt;/li>
&lt;li>&lt;strong>반복문&lt;/strong>: range() 사용법, enumerate/zip 활용&lt;/li>
&lt;li>&lt;strong>조건문&lt;/strong>: Truthy/Falsy 개념, 체이닝 비교&lt;/li>
&lt;li>&lt;strong>메모리 관리&lt;/strong>: 가비지 컬렉션 자동, with문 활용&lt;/li>
&lt;/ol>
&lt;h3 id="파이썬다운-코딩-스타일">파이썬다운 코딩 스타일&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>EAFP over LBYL&lt;/strong>: 예외 처리 우선&lt;/li>
&lt;li>&lt;strong>컴프리헨션 활용&lt;/strong>: 리스트/딕셔너리/집합 컴프리헨션&lt;/li>
&lt;li>&lt;strong>언패킹 활용&lt;/strong>: 튜플/딕셔너리 언패킹&lt;/li>
&lt;li>&lt;strong>내장 함수 활용&lt;/strong>: map, filter, zip, enumerate&lt;/li>
&lt;/ol>
&lt;h3 id="자주-사용하는-패턴-체크리스트">자주 사용하는 패턴 체크리스트&lt;/h3>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;code>collections.Counter&lt;/code>로 빈도 계산&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;code>collections.defaultdict&lt;/code>로 그룹핑&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;code>enumerate()&lt;/code>로 인덱스와 값 동시 접근&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;code>zip()&lt;/code>으로 여러 시퀀스 동시 순회&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 리스트 컴프리헨션으로 변환과 필터링&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;code>any()&lt;/code>/&lt;code>all()&lt;/code>로 조건 검사&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> &lt;code>*args&lt;/code>/&lt;code>**kwargs&lt;/code>로 가변 인수 처리&lt;/li>
&lt;/ul>
&lt;h1 id="파이썬-ps-3단계-ps-핵심-패턴">파이썬 PS 3단계: PS 핵심 패턴&lt;/h1>
&lt;h2 id="-1-탐색-알고리즘-dfsbfs-템플릿">🔍 1. 탐색 알고리즘 (DFS/BFS 템플릿)&lt;/h2>
&lt;h3 id="dfs-깊이-우선-탐색">DFS (깊이 우선 탐색)&lt;/h3>
&lt;h4 id="재귀적-dfs">재귀적 DFS&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">dfs_recursive&lt;/span>(graph, start, visited&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">None&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> visited &lt;span style="color:#89dceb;font-weight:bold">is&lt;/span> &lt;span style="color:#fab387">None&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">set&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>add(start)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(start) &lt;span style="color:#6c7086;font-style:italic"># 방문 처리&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> neighbor &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> graph[start]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> neighbor &lt;span style="color:#89dceb;font-weight:bold">not&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> visited:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dfs_recursive(graph, neighbor, visited)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> visited
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 사용 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>graph &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#39;A&amp;#39;&lt;/span>: [&lt;span style="color:#a6e3a1">&amp;#39;B&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;C&amp;#39;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#39;B&amp;#39;&lt;/span>: [&lt;span style="color:#a6e3a1">&amp;#39;A&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;D&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;E&amp;#39;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#39;C&amp;#39;&lt;/span>: [&lt;span style="color:#a6e3a1">&amp;#39;A&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;F&amp;#39;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#39;D&amp;#39;&lt;/span>: [&lt;span style="color:#a6e3a1">&amp;#39;B&amp;#39;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#39;E&amp;#39;&lt;/span>: [&lt;span style="color:#a6e3a1">&amp;#39;B&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;F&amp;#39;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#39;F&amp;#39;&lt;/span>: [&lt;span style="color:#a6e3a1">&amp;#39;C&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;E&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="스택을-이용한-dfs">스택을 이용한 DFS&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">dfs_iterative&lt;/span>(graph, start):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">set&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stack &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [start]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> stack:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vertex &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> stack&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>pop()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> vertex &lt;span style="color:#89dceb;font-weight:bold">not&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> visited:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>add(vertex)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(vertex) &lt;span style="color:#6c7086;font-style:italic"># 방문 처리&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 역순으로 추가 (재귀와 같은 순서로 방문하기 위해)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> neighbor &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">reversed&lt;/span>(graph[vertex]):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> neighbor &lt;span style="color:#89dceb;font-weight:bold">not&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> visited:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stack&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(neighbor)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> visited
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2차원-격자에서-dfs">2차원 격자에서 DFS&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">dfs_grid&lt;/span>(grid, start_row, start_col, visited):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rows, cols &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(grid), &lt;span style="color:#89dceb">len&lt;/span>(grid[&lt;span style="color:#fab387">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 경계 체크 및 방문 체크&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (start_row &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">or&lt;/span> start_row &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> rows &lt;span style="color:#89dceb;font-weight:bold">or&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> start_col &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">or&lt;/span> start_col &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> cols &lt;span style="color:#89dceb;font-weight:bold">or&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited[start_row][start_col] &lt;span style="color:#89dceb;font-weight:bold">or&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> grid[start_row][start_col] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>): &lt;span style="color:#6c7086;font-style:italic"># 0은 벽이라 가정&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited[start_row][start_col] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;방문: (&lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>start_row&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">, &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>start_col&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">)&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 4방향 탐색 (상, 하, 좌, 우)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> directions &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [(&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>), (&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>), (&lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>), (&lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> dr, dc &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> directions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dfs_grid(grid, start_row &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dr, start_col &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dc, visited)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 사용 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>grid &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>visited &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [[&lt;span style="color:#fab387">False&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(grid[&lt;span style="color:#fab387">0&lt;/span>]) &lt;span style="color:#cba6f7">for&lt;/span> _ &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#89dceb">len&lt;/span>(grid))]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="bfs-너비-우선-탐색">BFS (너비 우선 탐색)&lt;/h3>
&lt;h4 id="기본-bfs">기본 BFS&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">from&lt;/span> &lt;span style="color:#fab387">collections&lt;/span> &lt;span style="color:#94e2d5">import&lt;/span> deque
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">bfs&lt;/span>(graph, start):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">set&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> deque([start])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>add(start)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> queue:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vertex &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> queue&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>popleft()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(vertex) &lt;span style="color:#6c7086;font-style:italic"># 방문 처리&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> neighbor &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> graph[vertex]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> neighbor &lt;span style="color:#89dceb;font-weight:bold">not&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> visited:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>add(neighbor)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(neighbor)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> visited
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="최단거리를-구하는-bfs">최단거리를 구하는 BFS&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">bfs_shortest_path&lt;/span>(graph, start, end):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">set&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> deque([(start, &lt;span style="color:#fab387">0&lt;/span>)]) &lt;span style="color:#6c7086;font-style:italic"># (노드, 거리)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>add(start)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> queue:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vertex, distance &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> queue&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>popleft()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> vertex &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> end:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> distance
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> neighbor &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> graph[vertex]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> neighbor &lt;span style="color:#89dceb;font-weight:bold">not&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> visited:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>add(neighbor)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append((neighbor, distance &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#6c7086;font-style:italic"># 경로가 없음&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2차원-격자에서-bfs">2차원 격자에서 BFS&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">bfs_grid&lt;/span>(grid, start_row, start_col):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rows, cols &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(grid), &lt;span style="color:#89dceb">len&lt;/span>(grid[&lt;span style="color:#fab387">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [[&lt;span style="color:#fab387">False&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> cols &lt;span style="color:#cba6f7">for&lt;/span> _ &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(rows)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> deque([(start_row, start_col, &lt;span style="color:#fab387">0&lt;/span>)]) &lt;span style="color:#6c7086;font-style:italic"># (행, 열, 거리)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited[start_row][start_col] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> directions &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [(&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>), (&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>), (&lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>), (&lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> queue:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> row, col, dist &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> queue&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>popleft()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#f38ba8">f&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;방문: (&lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>row&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">, &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>col&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">), 거리: &lt;/span>&lt;span style="color:#a6e3a1">{&lt;/span>dist&lt;span style="color:#a6e3a1">}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> dr, dc &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> directions:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> new_row, new_col &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> row &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dr, col &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (&lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> new_row &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> rows &lt;span style="color:#89dceb;font-weight:bold">and&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> new_col &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> cols &lt;span style="color:#89dceb;font-weight:bold">and&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">not&lt;/span> visited[new_row][new_col] &lt;span style="color:#89dceb;font-weight:bold">and&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> grid[new_row][new_col] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">1&lt;/span>): &lt;span style="color:#6c7086;font-style:italic"># 1은 이동 가능한 칸&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visited[new_row][new_col] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> queue&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append((new_row, new_col, dist &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-dfsbfs-주요-함정">🚨 DFS/BFS 주요 함정&lt;/h3>
&lt;ul>
&lt;li>재귀 DFS의 스택 오버플로우 (Python 기본 재귀 한도: 1000)&lt;/li>
&lt;li>&lt;code>sys.setrecursionlimit(10**6)&lt;/code> 설정 필요한 경우&lt;/li>
&lt;li>BFS에서 &lt;code>deque&lt;/code> 사용 필수 (list의 pop(0)은 O(n))&lt;/li>
&lt;li>방문 체크를 큐에 넣을 때 vs 큐에서 뺄 때의 차이점&lt;/li>
&lt;/ul>
&lt;h2 id="-2-정렬과-이진탐색-패턴">📊 2. 정렬과 이진탐색 패턴&lt;/h2>
&lt;h3 id="다양한-정렬-기법">다양한 정렬 기법&lt;/h3>
&lt;h4 id="기본-정렬">기본 정렬&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 리스트 정렬&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>, &lt;span style="color:#fab387">9&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">6&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>sort() &lt;span style="color:#6c7086;font-style:italic"># 원본 수정&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sorted_arr &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">sorted&lt;/span>(arr) &lt;span style="color:#6c7086;font-style:italic"># 새 리스트 반환&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 역순 정렬&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>sort(reverse&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">True&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="커스텀-정렬">커스텀 정렬&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 튜플 정렬 (여러 기준)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>students &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [(&lt;span style="color:#a6e3a1">&amp;#39;Alice&amp;#39;&lt;/span>, &lt;span style="color:#fab387">85&lt;/span>, &lt;span style="color:#fab387">20&lt;/span>), (&lt;span style="color:#a6e3a1">&amp;#39;Bob&amp;#39;&lt;/span>, &lt;span style="color:#fab387">90&lt;/span>, &lt;span style="color:#fab387">19&lt;/span>), (&lt;span style="color:#a6e3a1">&amp;#39;Charlie&amp;#39;&lt;/span>, &lt;span style="color:#fab387">85&lt;/span>, &lt;span style="color:#fab387">21&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 점수 내림차순, 같으면 나이 오름차순&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>students&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>sort(key&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#cba6f7">lambda&lt;/span> x: (&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>x[&lt;span style="color:#fab387">1&lt;/span>], x[&lt;span style="color:#fab387">2&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 문자열 길이로 정렬&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>words &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#a6e3a1">&amp;#39;apple&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;pie&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;banana&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;book&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>words&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>sort(key&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#89dceb">len&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 절댓값으로 정렬&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>numbers &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">5&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>numbers&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>sort(key&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#89dceb">abs&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="안정-정렬-vs-불안정-정렬">안정 정렬 vs 불안정 정렬&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># Python의 sort()는 stable sort (같은 값의 원래 순서 유지)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [(&lt;span style="color:#a6e3a1">&amp;#39;A&amp;#39;&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>), (&lt;span style="color:#a6e3a1">&amp;#39;B&amp;#39;&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>), (&lt;span style="color:#a6e3a1">&amp;#39;C&amp;#39;&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>), (&lt;span style="color:#a6e3a1">&amp;#39;D&amp;#39;&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>data&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>sort(key&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#cba6f7">lambda&lt;/span> x: x[&lt;span style="color:#fab387">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 결과: [(&amp;#39;A&amp;#39;, 1), (&amp;#39;C&amp;#39;, 1), (&amp;#39;B&amp;#39;, 2), (&amp;#39;D&amp;#39;, 2)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># A와 C의 순서, B와 D의 순서가 유지됨&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="이진탐색-binary-search">이진탐색 (Binary Search)&lt;/h3>
&lt;h4 id="기본-이진탐색">기본 이진탐색&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">binary_search&lt;/span>(arr, target):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left, right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#89dceb">len&lt;/span>(arr) &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> right:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mid &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (left &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> right) &lt;span style="color:#89dceb;font-weight:bold">//&lt;/span> &lt;span style="color:#fab387">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> arr[mid] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> target:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> mid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">elif&lt;/span> arr[mid] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> target:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#6c7086;font-style:italic"># 찾지 못함&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 내장 함수 사용&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">import&lt;/span> &lt;span style="color:#fab387">bisect&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>, &lt;span style="color:#fab387">7&lt;/span>, &lt;span style="color:#fab387">9&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>index &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> bisect&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>bisect_left(arr, &lt;span style="color:#fab387">5&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># 5가 들어갈 위치&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="lower-bound--upper-bound">Lower Bound / Upper Bound&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">lower_bound&lt;/span>(arr, target):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;target 이상인 첫 번째 원소의 인덱스&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left, right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#89dceb">len&lt;/span>(arr)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> right:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mid &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (left &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> right) &lt;span style="color:#89dceb;font-weight:bold">//&lt;/span> &lt;span style="color:#fab387">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> arr[mid] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> target:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> left
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">upper_bound&lt;/span>(arr, target):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;target 초과인 첫 번째 원소의 인덱스&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left, right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#89dceb">len&lt;/span>(arr)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> right:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mid &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (left &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> right) &lt;span style="color:#89dceb;font-weight:bold">//&lt;/span> &lt;span style="color:#fab387">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> arr[mid] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> target:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> left
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># bisect 모듈 활용&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">import&lt;/span> &lt;span style="color:#fab387">bisect&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>arr &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lower &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> bisect&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>bisect_left(arr, &lt;span style="color:#fab387">2&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>upper &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> bisect&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>bisect_right(arr, &lt;span style="color:#fab387">2&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># 4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> upper &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> lower &lt;span style="color:#6c7086;font-style:italic"># 2의 개수: 3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="매개변수-탐색-parametric-search">매개변수 탐색 (Parametric Search)&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">parametric_search&lt;/span>(check_function, left, right):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e3a1"> check_function(x)가 True가 되는 최소값을 찾는 이진탐색
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e3a1"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> right:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mid &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (left &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> right) &lt;span style="color:#89dceb;font-weight:bold">//&lt;/span> &lt;span style="color:#fab387">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> check_function(mid):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> result
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 예시: 나무 자르기 문제&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">can_cut_wood&lt;/span>(trees, height, target):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;높이 height로 잘랐을 때 target 이상의 나무를 얻을 수 있는지&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">sum&lt;/span>(&lt;span style="color:#89dceb">max&lt;/span>(&lt;span style="color:#fab387">0&lt;/span>, tree &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> height) &lt;span style="color:#cba6f7">for&lt;/span> tree &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> trees)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> total &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> target
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>trees &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">20&lt;/span>, &lt;span style="color:#fab387">15&lt;/span>, &lt;span style="color:#fab387">10&lt;/span>, &lt;span style="color:#fab387">17&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>target &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>max_height &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> parametric_search(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">lambda&lt;/span> h: can_cut_wood(trees, h, target), 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#89dceb">max&lt;/span>(trees)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-정렬이진탐색-주요-함정">🚨 정렬/이진탐색 주요 함정&lt;/h3>
&lt;ul>
&lt;li>이진탐색 전 반드시 정렬 필요&lt;/li>
&lt;li>&lt;code>left &amp;lt;= right&lt;/code> vs &lt;code>left &amp;lt; right&lt;/code> 조건 차이&lt;/li>
&lt;li>무한루프 방지를 위한 mid 계산 주의&lt;/li>
&lt;li>overflow 방지: &lt;code>mid = left + (right - left) // 2&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="-3-투-포인터-슬라이딩-윈도우">👥 3. 투 포인터, 슬라이딩 윈도우&lt;/h2>
&lt;h3 id="투-포인터-기법">투 포인터 기법&lt;/h3>
&lt;h4 id="기본-투-포인터">기본 투 포인터&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">two_sum_sorted&lt;/span>(arr, target):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;정렬된 배열에서 합이 target인 두 수 찾기&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left, right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#89dceb">len&lt;/span>(arr) &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> right:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current_sum &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> arr[left] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> arr[right]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> current_sum &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> target:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> [left, right]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">elif&lt;/span> current_sum &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> target:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#89dceb;font-weight:bold">-=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> [&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#6c7086;font-style:italic"># 찾지 못함&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="연속-부분배열의-합">연속 부분배열의 합&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">subarray_sum&lt;/span>(arr, target):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;합이 target인 연속 부분배열의 개수&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current_sum &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#89dceb">len&lt;/span>(arr)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current_sum &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> arr[right]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 합이 target보다 클 때 left 포인터 이동&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> current_sum &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> target &lt;span style="color:#89dceb;font-weight:bold">and&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> right:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current_sum &lt;span style="color:#89dceb;font-weight:bold">-=&lt;/span> arr[left]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> current_sum &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> target:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> count
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="서로-다른-문자의-최장-부분문자열">서로 다른 문자의 최장 부분문자열&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">longest_unique_substring&lt;/span>(s):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;서로 다른 문자로만 이루어진 최장 부분문자열의 길이&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_length &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> char_set &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">set&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#89dceb">len&lt;/span>(s)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 중복 문자가 나올 때까지 left 이동&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> s[right] &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> char_set:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> char_set&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>remove(s[left])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> char_set&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>add(s[right])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_length &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">max&lt;/span>(max_length, right &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> max_length
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="슬라이딩-윈도우">슬라이딩 윈도우&lt;/h3>
&lt;h4 id="고정-크기-윈도우">고정 크기 윈도우&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">max_sum_subarray&lt;/span>(arr, k):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;크기가 k인 부분배열의 최대 합&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(arr) &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> k:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 첫 번째 윈도우의 합&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window_sum &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">sum&lt;/span>(arr[:k])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_sum &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> window_sum
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 윈도우를 슬라이딩하면서 합 계산&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(k, &lt;span style="color:#89dceb">len&lt;/span>(arr)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window_sum &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> window_sum &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> arr[i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> k] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> arr[i]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_sum &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">max&lt;/span>(max_sum, window_sum)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> max_sum
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="가변-크기-윈도우">가변 크기 윈도우&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">min_window_sum&lt;/span>(arr, target):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;합이 target 이상인 최소 길이 부분배열&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> min_length &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">float&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;inf&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current_sum &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#89dceb">len&lt;/span>(arr)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current_sum &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> arr[right]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 조건을 만족하는 동안 윈도우 크기 줄이기&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> current_sum &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> target:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> min_length &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">min&lt;/span>(min_length, right &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current_sum &lt;span style="color:#89dceb;font-weight:bold">-=&lt;/span> arr[left]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> min_length &lt;span style="color:#cba6f7">if&lt;/span> min_length &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> &lt;span style="color:#89dceb">float&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;inf&amp;#39;&lt;/span>) &lt;span style="color:#cba6f7">else&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="문자열에서-패턴-매칭">문자열에서 패턴 매칭&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">find_anagrams&lt;/span>(s, p):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;문자열 s에서 p의 anagram인 부분문자열의 시작 인덱스들&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#94e2d5">from&lt;/span> &lt;span style="color:#fab387">collections&lt;/span> &lt;span style="color:#94e2d5">import&lt;/span> Counter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(p) &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(s):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p_count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> Counter(p)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window_count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> Counter()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#89dceb">len&lt;/span>(s)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 윈도우에 문자 추가&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window_count[s[i]] &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 윈도우 크기가 p의 길이와 같아지면&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(p) &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> window_count &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> p_count:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(p) &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 윈도우에서 첫 번째 문자 제거&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left_char &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s[i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(p) &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window_count[left_char] &lt;span style="color:#89dceb;font-weight:bold">-=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> window_count[left_char] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">del&lt;/span> window_count[left_char]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> result
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-투-포인터슬라이딩-윈도우-주요-함정">🚨 투 포인터/슬라이딩 윈도우 주요 함정&lt;/h3>
&lt;ul>
&lt;li>포인터 이동 조건을 명확히 정의&lt;/li>
&lt;li>윈도우 크기 조절 시 경계 조건 주의&lt;/li>
&lt;li>Counter나 딕셔너리 사용 시 0이 되는 키 처리&lt;/li>
&lt;/ul>
&lt;h2 id="-4-그리디-알고리즘-패턴">🏃 4. 그리디 알고리즘 패턴&lt;/h2>
&lt;h3 id="기본-그리디-패턴">기본 그리디 패턴&lt;/h3>
&lt;h4 id="활동-선택-문제">활동 선택 문제&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">activity_selection&lt;/span>(activities):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;끝나는 시간이 빠른 순으로 최대한 많은 활동 선택&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># (시작시간, 끝시간) 튜플 리스트를 끝시간 기준으로 정렬&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> activities&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>sort(key&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#cba6f7">lambda&lt;/span> x: x[&lt;span style="color:#fab387">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> selected &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [activities[&lt;span style="color:#fab387">0&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> last_end_time &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> activities[&lt;span style="color:#fab387">0&lt;/span>][&lt;span style="color:#fab387">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> start, end &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> activities[&lt;span style="color:#fab387">1&lt;/span>:]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> start &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> last_end_time: &lt;span style="color:#6c7086;font-style:italic"># 겹치지 않으면 선택&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> selected&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append((start, end))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> last_end_time &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> end
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> selected
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 사용 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>activities &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [(&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>), (&lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>), (&lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">6&lt;/span>), (&lt;span style="color:#fab387">5&lt;/span>, &lt;span style="color:#fab387">7&lt;/span>), (&lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">9&lt;/span>), (&lt;span style="color:#fab387">5&lt;/span>, &lt;span style="color:#fab387">9&lt;/span>), (&lt;span style="color:#fab387">6&lt;/span>, &lt;span style="color:#fab387">10&lt;/span>), (&lt;span style="color:#fab387">8&lt;/span>, &lt;span style="color:#fab387">11&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> activity_selection(activities)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="거스름돈-문제">거스름돈 문제&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">make_change&lt;/span>(amount, coins):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;가장 적은 개수의 동전으로 거스름돈 만들기 (그리디 조건 만족 시)&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> coins&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>sort(reverse&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">True&lt;/span>) &lt;span style="color:#6c7086;font-style:italic"># 큰 동전부터&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> coin &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> coins:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> amount &lt;span style="color:#89dceb;font-weight:bold">//&lt;/span> coin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> count &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>extend([coin] &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> count)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> amount &lt;span style="color:#89dceb;font-weight:bold">%=&lt;/span> coin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> amount &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> result &lt;span style="color:#cba6f7">if&lt;/span> amount &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#cba6f7">else&lt;/span> [] &lt;span style="color:#6c7086;font-style:italic"># 만들 수 없으면 빈 리스트&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 사용 예시&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>coins &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">500&lt;/span>, &lt;span style="color:#fab387">100&lt;/span>, &lt;span style="color:#fab387">50&lt;/span>, &lt;span style="color:#fab387">10&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>change &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> make_change(&lt;span style="color:#fab387">1260&lt;/span>, coins)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="최소-신장-트리-크루스칼">최소 신장 트리 (크루스칼)&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">find_parent&lt;/span>(parent, x):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;Union-Find의 find 연산&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> parent[x] &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> x:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parent[x] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> find_parent(parent, parent[x])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> parent[x]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">union_parent&lt;/span>(parent, rank, a, b):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;Union-Find의 union 연산&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> find_parent(parent, a)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> find_parent(parent, b)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> rank[a] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> rank[b]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parent[a] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> b
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">elif&lt;/span> rank[a] &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> rank[b]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parent[b] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parent[b] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rank[a] &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">kruskal&lt;/span>(n, edges):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;크루스칼 알고리즘으로 최소 신장 트리&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 간선을 비용 순으로 정렬&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> edges&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>sort(key&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#cba6f7">lambda&lt;/span> x: x[&lt;span style="color:#fab387">2&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> parent &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">list&lt;/span>(&lt;span style="color:#89dceb">range&lt;/span>(n))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rank &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mst &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total_cost &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> a, b, cost &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> edges:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> find_parent(parent, a) &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> find_parent(parent, b):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> union_parent(parent, rank, a, b)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mst&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append((a, b, cost))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> total_cost &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> cost
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> mst, total_cost
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="그리디-선택의-정당성-증명-패턴">그리디 선택의 정당성 증명 패턴&lt;/h3>
&lt;h4 id="회의실-배정">회의실 배정&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">meeting_rooms&lt;/span>(meetings):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;최소한의 회의실로 모든 회의 배정&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#94e2d5">import&lt;/span> &lt;span style="color:#fab387">heapq&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">not&lt;/span> meetings:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 시작시간 기준으로 정렬&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> meetings&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>sort(key&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#cba6f7">lambda&lt;/span> x: x[&lt;span style="color:#fab387">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 각 회의실의 끝나는 시간을 저장하는 최소 힙&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> heap &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> start, end &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> meetings:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 가장 빨리 끝나는 회의실이 현재 회의 시작 전에 끝나면&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> heap &lt;span style="color:#89dceb;font-weight:bold">and&lt;/span> heap[&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> start:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> heapq&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>heappop(heap)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> heapq&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>heappush(heap, end)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(heap) &lt;span style="color:#6c7086;font-style:italic"># 필요한 회의실 개수&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-그리디-주요-함정">🚨 그리디 주요 함정&lt;/h3>
&lt;ul>
&lt;li>그리디 선택이 항상 최적해를 보장하지 않음&lt;/li>
&lt;li>반례를 찾아 그리디 조건 확인 필요&lt;/li>
&lt;li>정렬 기준을 신중하게 선택&lt;/li>
&lt;/ul>
&lt;h2 id="-5-동적계획법dp-기본-패턴">🧮 5. 동적계획법(DP) 기본 패턴&lt;/h2>
&lt;h3 id="기본-dp-패턴">기본 DP 패턴&lt;/h3>
&lt;h4 id="피보나치-수열">피보나치 수열&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># Top-down (메모이제이션)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">fibonacci_memo&lt;/span>(n, memo&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>{}):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> memo:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> memo[n]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> memo[n] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> fibonacci_memo(n&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>, memo) &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> fibonacci_memo(n&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">2&lt;/span>, memo)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> memo[n]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># Bottom-up (테이블 방식)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">fibonacci_dp&lt;/span>(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> (n &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[&lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">2&lt;/span>, n &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dp[i&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dp[i&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">2&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> dp[n]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 공간 최적화&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">fibonacci_optimized&lt;/span>(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prev2, prev1 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">2&lt;/span>, n &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> current &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> prev1 &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> prev2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prev2, prev1 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> prev1, current
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> prev1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="0-1-배낭-문제">0-1 배낭 문제&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">knapsack_01&lt;/span>(weights, values, capacity):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;0-1 배낭 문제&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(weights)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># dp[i][w] = i번째 물건까지 고려했을 때 무게 w 이하로 얻을 수 있는 최대 가치&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [[&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> (capacity &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>) &lt;span style="color:#cba6f7">for&lt;/span> _ &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(n &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">1&lt;/span>, n &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> w &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">1&lt;/span>, capacity &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># i번째 물건을 넣지 않는 경우&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i][w] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dp[i&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>][w]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># i번째 물건을 넣는 경우 (무게가 허용되면)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> weights[i&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> w:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i][w] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">max&lt;/span>(dp[i][w], 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>][w&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>weights[i&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>]] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> values[i&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> dp[n][capacity]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 공간 최적화 버전&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">knapsack_01_optimized&lt;/span>(weights, values, capacity):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> (capacity &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#89dceb">len&lt;/span>(weights)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 뒤에서부터 갱신 (중복 사용 방지)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> w &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(capacity, weights[i] &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[w] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">max&lt;/span>(dp[w], dp[w &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> weights[i]] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> values[i])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> dp[capacity]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="최장-증가-부분-수열-lis">최장 증가 부분 수열 (LIS)&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">lis_dp&lt;/span>(arr):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;O(n²) 동적계획법&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(arr)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> n &lt;span style="color:#6c7086;font-style:italic"># dp[i] = i번째 원소를 마지막으로 하는 LIS 길이&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">1&lt;/span>, n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(i):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> arr[j] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> arr[i]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">max&lt;/span>(dp[i], dp[j] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">max&lt;/span>(dp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">lis_binary_search&lt;/span>(arr):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;O(n log n) 이진탐색&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#94e2d5">import&lt;/span> &lt;span style="color:#fab387">bisect&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tails &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [] &lt;span style="color:#6c7086;font-style:italic"># tails[i] = 길이 i+1인 증가수열의 마지막 원소 중 최솟값&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> num &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> arr:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pos &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> bisect&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>bisect_left(tails, num)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> pos &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(tails):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tails&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(num)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tails[pos] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> num
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(tails)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="편집-거리-edit-distance">편집 거리 (Edit Distance)&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">edit_distance&lt;/span>(str1, str2):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;두 문자열 간의 편집 거리 (삽입, 삭제, 교체)&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> m, n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(str1), &lt;span style="color:#89dceb">len&lt;/span>(str2)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># dp[i][j] = str1[:i]를 str2[:j]로 변환하는 최소 연산 수&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [[&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> (n &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>) &lt;span style="color:#cba6f7">for&lt;/span> _ &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(m &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 초기화: 빈 문자열로 변환&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(m &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i][&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> i &lt;span style="color:#6c7086;font-style:italic"># 모두 삭제&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(n &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[&lt;span style="color:#fab387">0&lt;/span>][j] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> j &lt;span style="color:#6c7086;font-style:italic"># 모두 삽입&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">1&lt;/span>, m &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">1&lt;/span>, n &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> str1[i&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> str2[j&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i][j] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dp[i&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>][j&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#6c7086;font-style:italic"># 문자가 같으면 그대로&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i][j] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#89dceb">min&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>][j], &lt;span style="color:#6c7086;font-style:italic"># 삭제&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i][j&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>], &lt;span style="color:#6c7086;font-style:italic"># 삽입&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>][j&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#6c7086;font-style:italic"># 교체&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> dp[m][n]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="dp-상태-설계-패턴">DP 상태 설계 패턴&lt;/h3>
&lt;h4 id="구간-dp">구간 DP&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">matrix_chain_multiplication&lt;/span>(matrices):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;행렬 연쇄 곱셈의 최소 곱셈 횟수&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(matrices)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># dp[i][j] = i번째부터 j번째 행렬까지 곱하는 최소 비용&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [[&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> n &lt;span style="color:#cba6f7">for&lt;/span> _ &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(n)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 구간 길이를 늘려가며 계산&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> length &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">2&lt;/span>, n &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>): &lt;span style="color:#6c7086;font-style:italic"># 구간 길이&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(n &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> length &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> length &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i][j] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">float&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;inf&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># k를 기준으로 분할&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> k &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(i, j):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cost &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (dp[i][k] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dp[k&lt;span style="color:#89dceb;font-weight:bold">+&lt;/span>&lt;span style="color:#fab387">1&lt;/span>][j] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> matrices[i][&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> matrices[k][&lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> matrices[j][&lt;span style="color:#fab387">1&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i][j] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">min&lt;/span>(dp[i][j], cost)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> dp[&lt;span style="color:#fab387">0&lt;/span>][n&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="비트마스크-dp">비트마스크 DP&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">traveling_salesman&lt;/span>(dist):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;외판원 문제 (TSP)&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(dist)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># dp[mask][i] = mask에 표시된 도시들을 방문하고 i에서 끝나는 최소 비용&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [[&lt;span style="color:#89dceb">float&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;inf&amp;#39;&lt;/span>)] &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> n &lt;span style="color:#cba6f7">for&lt;/span> _ &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> n)]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 시작점(0번 도시)에서 출발&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[&lt;span style="color:#fab387">1&lt;/span>][&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> mask &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">not&lt;/span> (mask &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> (&lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> i)): &lt;span style="color:#6c7086;font-style:italic"># i번 도시를 방문하지 않았으면&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">or&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">not&lt;/span> (mask &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> (&lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> j)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># j에서 i로 가는 경우&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> prev_mask &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mask &lt;span style="color:#89dceb;font-weight:bold">^&lt;/span> (&lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[mask][i] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">min&lt;/span>(dp[mask][i], 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[prev_mask][j] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dist[j][i])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 모든 도시를 방문하고 시작점으로 돌아가는 최소 비용&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">float&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;inf&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> final_mask &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (&lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> n) &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">1&lt;/span>, n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">min&lt;/span>(result, dp[final_mask][i] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> dist[i][&lt;span style="color:#fab387">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> result
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-dp-주요-함정">🚨 DP 주요 함정&lt;/h3>
&lt;ul>
&lt;li>상태 정의가 명확하지 않으면 구현 어려움&lt;/li>
&lt;li>메모이제이션에서 기본값 설정 주의&lt;/li>
&lt;li>순서에 따른 중복 계산 방지&lt;/li>
&lt;li>공간 복잡도 최적화 가능 여부 검토&lt;/li>
&lt;/ul>
&lt;h2 id="-6-문자열-처리-고급-기법">🔤 6. 문자열 처리 고급 기법&lt;/h2>
&lt;h3 id="패턴-매칭">패턴 매칭&lt;/h3>
&lt;h4 id="kmp-알고리즘">KMP 알고리즘&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">build_failure_function&lt;/span>(pattern):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;KMP 알고리즘의 실패 함수 구축&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> m &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(pattern)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> failure &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> m
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">1&lt;/span>, m):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">and&lt;/span> pattern[i] &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> pattern[j]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> failure[j &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> pattern[i] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> pattern[j]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> failure[i] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> j
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> failure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">kmp_search&lt;/span>(text, pattern):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;KMP 알고리즘으로 패턴 검색&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n, m &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(text), &lt;span style="color:#89dceb">len&lt;/span>(pattern)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> m &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> failure &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> build_failure_function(pattern)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> matches &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">and&lt;/span> text[i] &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> pattern[j]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> failure[j &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> text[i] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> pattern[j]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> m:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> matches&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> m &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> failure[j &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> matches
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="라빈-카프-알고리즘">라빈-카프 알고리즘&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">rabin_karp_search&lt;/span>(text, pattern):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;라빈-카프 알고리즘 (롤링 해시)&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n, m &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(text), &lt;span style="color:#89dceb">len&lt;/span>(pattern)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> m &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> n:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> base &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">256&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mod &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">10&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">**&lt;/span>&lt;span style="color:#fab387">9&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 패턴의 해시값 계산&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pattern_hash &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> char &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> pattern:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pattern_hash &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (pattern_hash &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> base &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#89dceb">ord&lt;/span>(char)) &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> mod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># base^(m-1) % mod 계산&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> _ &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(m &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (h &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> base) &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> mod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 첫 번째 윈도우의 해시값&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window_hash &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(m):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window_hash &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (window_hash &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> base &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#89dceb">ord&lt;/span>(text[i])) &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> mod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> matches &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(n &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> m &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 해시값이 같으면 실제 문자열 비교&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> window_hash &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> pattern_hash:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> text[i:i&lt;span style="color:#89dceb;font-weight:bold">+&lt;/span>m] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> pattern:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> matches&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 다음 윈도우의 해시값 계산 (롤링)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> m:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window_hash &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (window_hash &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#89dceb">ord&lt;/span>(text[i]) &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> h) &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> mod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window_hash &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (window_hash &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> base &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#89dceb">ord&lt;/span>(text[i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> m])) &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> mod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> window_hash &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (window_hash &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> mod) &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> mod &lt;span style="color:#6c7086;font-style:italic"># 음수 방지&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> matches
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="문자열-변환과-처리">문자열 변환과 처리&lt;/h3>
&lt;h4 id="회문-검사와-관련-알고리즘">회문 검사와 관련 알고리즘&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">is_palindrome&lt;/span>(s):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;기본 회문 검사&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left, right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#89dceb">len&lt;/span>(s) &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> right:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> s[left] &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> s[right]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#fab387">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#89dceb;font-weight:bold">-=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#fab387">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">longest_palindrome_center_expand&lt;/span>(s):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;중심 확장으로 최장 회문 찾기&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">expand_around_center&lt;/span>(left, right):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">and&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(s) &lt;span style="color:#89dceb;font-weight:bold">and&lt;/span> s[left] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> s[right]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#89dceb;font-weight:bold">-=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> start &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> end &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#89dceb">len&lt;/span>(s)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 홀수 길이 회문&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> len1 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> expand_around_center(i, i)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 짝수 길이 회문&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> len2 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> expand_around_center(i, i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_len &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">max&lt;/span>(len1, len2)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> max_len &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> end &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> start:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> start &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> (max_len &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">//&lt;/span> &lt;span style="color:#fab387">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> end &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> max_len &lt;span style="color:#89dceb;font-weight:bold">//&lt;/span> &lt;span style="color:#fab387">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> s[start:end &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">manacher_algorithm&lt;/span>(s):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;매내처 알고리즘 (O(n) 회문 검사)&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 문자 사이에 특별 문자 삽입&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> processed &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;#&amp;#39;&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>join(&lt;span style="color:#a6e3a1">&amp;#39;^&lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">$&amp;#39;&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>format(s))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(processed)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 각 위치에서의 회문 반지름&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> radius &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> center &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">1&lt;/span>, n &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 이전에 계산된 정보 활용&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> right:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> radius[i] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">min&lt;/span>(right &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> i, radius[&lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> center &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> i])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 중심 확장&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> processed[i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> radius[i] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> processed[i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> radius[i] &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> radius[i] &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 오른쪽 경계 갱신&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> radius[i] &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> right:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> center, right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> i, i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> radius[i]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 최장 회문 찾기&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_len &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">max&lt;/span>(radius)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> center_index &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> radius&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>index(max_len)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> start &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (center_index &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> max_len) &lt;span style="color:#89dceb;font-weight:bold">//&lt;/span> &lt;span style="color:#fab387">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> s[start:start &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> max_len]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="접미사-배열과-lcp">접미사 배열과 LCP&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">suffix_array_naive&lt;/span>(s):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;접미사 배열 (단순 구현)&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> suffixes &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [(s[i:], i) &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#89dceb">len&lt;/span>(s))]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> suffixes&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>sort()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> [suffix[&lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#cba6f7">for&lt;/span> suffix &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> suffixes]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">lcp_array&lt;/span>(s, suffix_arr):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;최장 공통 접두사 배열&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(s)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rank &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lcp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> (n &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># 각 접미사의 순위 계산&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rank[suffix_arr[i]] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(n):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> rank[i] &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> j &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> suffix_arr[rank[i] &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> h &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">and&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> h &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">and&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s[i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> h] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> s[j &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> h]):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lcp[rank[i] &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> h
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> h &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> h &lt;span style="color:#89dceb;font-weight:bold">-=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> lcp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="정규표현식-패턴">정규표현식 패턴&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">import&lt;/span> &lt;span style="color:#fab387">re&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 자주 사용하는 정규표현식 패턴들&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>patterns &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#39;email&amp;#39;&lt;/span>: &lt;span style="color:#f38ba8">r&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#39;phone&amp;#39;&lt;/span>: &lt;span style="color:#f38ba8">r&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;^\d&lt;/span>&lt;span style="color:#a6e3a1">{3}&lt;/span>&lt;span style="color:#a6e3a1">-\d{3,4}-\d&lt;/span>&lt;span style="color:#a6e3a1">{4}&lt;/span>&lt;span style="color:#a6e3a1">$&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#39;number&amp;#39;&lt;/span>: &lt;span style="color:#f38ba8">r&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;^-?\d+(\.\d+)?$&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#39;korean&amp;#39;&lt;/span>: &lt;span style="color:#f38ba8">r&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;[가-힣]+&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#39;english&amp;#39;&lt;/span>: &lt;span style="color:#f38ba8">r&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;[a-zA-Z]+&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#39;alphanumeric&amp;#39;&lt;/span>: &lt;span style="color:#f38ba8">r&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;^[a-zA-Z0-9]+$&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">validate_input&lt;/span>(text, pattern_name):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&amp;#34;입력값 검증&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pattern &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> patterns&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>get(pattern_name)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> pattern:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">bool&lt;/span>(re&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>&lt;span style="color:#cba6f7">match&lt;/span>(pattern, text))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#fab387">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 문자열에서 모든 숫자 추출&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">extract_numbers&lt;/span>(text):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> re&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>findall(&lt;span style="color:#f38ba8">r&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;-?\d+\.?\d*&amp;#39;&lt;/span>, text)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># 특정 패턴으로 문자열 분할&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">smart_split&lt;/span>(text, delimiter_pattern&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#f38ba8">r&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;[,;\s]+&amp;#39;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> re&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>split(delimiter_pattern, text&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>strip())
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-문자열-처리-주요-함정">🚨 문자열 처리 주요 함정&lt;/h3>
&lt;ul>
&lt;li>유니코드 처리 시 인코딩 문제&lt;/li>
&lt;li>정규표현식의 성능 이슈 (백트래킹)&lt;/li>
&lt;li>문자열 불변성으로 인한 성능 저하&lt;/li>
&lt;li>KMP/라빈-카프에서 모듈로 연산 오버플로우&lt;/li>
&lt;/ul>
&lt;h2 id="-2단계-핵심-요약">📝 2단계 핵심 요약&lt;/h2>
&lt;h3 id="필수-암기-템플릿">필수 암기 템플릿&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>DFS/BFS&lt;/strong>: 재귀/스택/큐를 이용한 그래프 탐색&lt;/li>
&lt;li>&lt;strong>이진탐색&lt;/strong>: lower_bound, upper_bound, 매개변수 탐색&lt;/li>
&lt;li>&lt;strong>투 포인터&lt;/strong>: 정렬된 배열에서 조건 만족하는 쌍 찾기&lt;/li>
&lt;li>&lt;strong>슬라이딩 윈도우&lt;/strong>: 고정/가변 크기 부분배열 문제&lt;/li>
&lt;li>&lt;strong>그리디&lt;/strong>: 활동 선택, 최소 신장 트리&lt;/li>
&lt;li>&lt;strong>DP&lt;/strong>: 0-1배낭, LIS, 편집거리&lt;/li>
&lt;/ol>
&lt;h3 id="알고리즘-선택-가이드">알고리즘 선택 가이드&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>완전탐색이 가능한가?&lt;/strong> → DFS/BFS&lt;/li>
&lt;li>&lt;strong>정렬된 상태에서 특정 값 찾기&lt;/strong> → 이진탐색&lt;/li>
&lt;li>&lt;strong>연속된 부분에서 조건 만족&lt;/strong> → 투 포인터/슬라이딩 윈도우&lt;/li>
&lt;li>&lt;strong>매 순간 최선의 선택&lt;/strong> → 그리디&lt;/li>
&lt;li>&lt;strong>작은 문제의 최적해로 큰 문제 해결&lt;/strong> → DP&lt;/li>
&lt;li>&lt;strong>패턴 검색/문자열 변환&lt;/strong> → KMP/라빈-카프&lt;/li>
&lt;/ul></description></item><item><title>Rust Iter 정리 🔄</title><link>https://smallzoodev.netlify.app/_wiki/rust-iterator-interface/</link><pubDate>Sat, 03 May 2025 11:28:36 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/rust-iterator-interface/</guid><description>&lt;h1 id="rust-iterator-인터페이스-종합">Rust Iterator 인터페이스 종합&lt;/h1>
&lt;h2 id="1-핵심-트레이트">1. 핵심 트레이트&lt;/h2>
&lt;h3 id="iterator-트레이트">Iterator 트레이트&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">pub&lt;/span> &lt;span style="color:#cba6f7">trait&lt;/span> &lt;span style="color:#89dceb">Iterator&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">type&lt;/span> &lt;span style="color:#f9e2af">Item&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">next&lt;/span>(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>) -&amp;gt; &lt;span style="color:#89dceb">Option&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#89dceb">Self&lt;/span>::Item&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// ... 여러 기본 구현 메서드들
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="intoiterator-트레이트">IntoIterator 트레이트&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">pub&lt;/span> &lt;span style="color:#cba6f7">trait&lt;/span> &lt;span style="color:#89dceb">IntoIterator&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">type&lt;/span> &lt;span style="color:#f9e2af">Item&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">type&lt;/span> &lt;span style="color:#f9e2af">IntoIter&lt;/span>: &lt;span style="color:#89dceb">Iterator&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Item &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">Self&lt;/span>::Item&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">into_iter&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>) -&amp;gt; &lt;span style="color:#f9e2af">Self&lt;/span>::IntoIter;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="fromiterator-트레이트">FromIterator 트레이트&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">pub&lt;/span> &lt;span style="color:#cba6f7">trait&lt;/span> FromIterator&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>A&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">from_iter&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>T&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>(iter: &lt;span style="color:#f9e2af">T&lt;/span>) -&amp;gt; &lt;span style="color:#f9e2af">Self&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">where&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> T: &lt;span style="color:#89dceb">IntoIterator&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Item &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> A&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-반복자-생성-메서드">2. 반복자 생성 메서드&lt;/h2>
&lt;h3 id="기본-컬렉션-반복자">기본 컬렉션 반복자&lt;/h3>
&lt;ul>
&lt;li>&lt;code>iter()&lt;/code>: 불변 참조 반복자 (&lt;code>&amp;amp;T&lt;/code>)&lt;/li>
&lt;li>&lt;code>iter_mut()&lt;/code>: 가변 참조 반복자 (&lt;code>&amp;amp;mut T&lt;/code>)&lt;/li>
&lt;li>&lt;code>into_iter()&lt;/code>: 소유권 이전 반복자 (&lt;code>T&lt;/code>)&lt;/li>
&lt;/ul>
&lt;h3 id="범위-반복자">범위 반복자&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 범위 문법으로 반복자 생성
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">let&lt;/span> range &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>&lt;span style="color:#fab387">5&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// 1, 2, 3, 4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">let&lt;/span> inclusive &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..=&lt;/span>&lt;span style="color:#fab387">5&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// 1, 2, 3, 4, 5
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="스트림-반복자">스트림 반복자&lt;/h3>
&lt;ul>
&lt;li>&lt;code>std::io::Lines&lt;/code>: 파일의 각 줄을 순회&lt;/li>
&lt;li>&lt;code>std::io::Bytes&lt;/code>: 바이트 스트림을 순회&lt;/li>
&lt;/ul>
&lt;h3 id="기타-반복자-생성">기타 반복자 생성&lt;/h3>
&lt;ul>
&lt;li>&lt;code>once&lt;/code>: 단일 값을 생성하는 반복자&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::iter;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">let&lt;/span> once &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> iter::once(&lt;span style="color:#fab387">42&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// 42만 생성
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>repeat&lt;/code>: 동일한 값을 무한히 생성하는 반복자&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">let&lt;/span> repeat &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> iter::repeat(&lt;span style="color:#a6e3a1">&amp;#39;a&amp;#39;&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// &amp;#39;a&amp;#39;를 무한히 생성
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>empty&lt;/code>: 빈 반복자&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">let&lt;/span> empty: &lt;span style="color:#f9e2af">iter&lt;/span>::Empty&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">i32&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> iter::empty(); &lt;span style="color:#6c7086;font-style:italic">// 항목 없음
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3-반복자-어댑터-메서드-자주-사용되는-것들">3. 반복자 어댑터 메서드 (자주 사용되는 것들)&lt;/h2>
&lt;h3 id="필터링-어댑터">필터링 어댑터&lt;/h3>
&lt;ul>
&lt;li>&lt;code>filter(pred)&lt;/code>: 조건을 만족하는 항목만 유지&lt;/li>
&lt;li>&lt;code>filter_map(f)&lt;/code>: 변환과 필터링을 동시에 수행&lt;/li>
&lt;li>&lt;code>take(n)&lt;/code>: 처음 n개 항목만 유지&lt;/li>
&lt;li>&lt;code>take_while(pred)&lt;/code>: 조건이 참인 동안의 항목만 유지&lt;/li>
&lt;li>&lt;code>skip(n)&lt;/code>: 처음 n개 항목을 건너뜀&lt;/li>
&lt;li>&lt;code>skip_while(pred)&lt;/code>: 조건이 참인 동안 항목을 건너뜀&lt;/li>
&lt;li>&lt;code>step_by(n)&lt;/code>: n 단계마다 항목을 선택&lt;/li>
&lt;li>&lt;code>peekable()&lt;/code>: 다음 항목을 미리 확인할 수 있는 반복자 생성&lt;/li>
&lt;/ul>
&lt;h3 id="변환-어댑터">변환 어댑터&lt;/h3>
&lt;ul>
&lt;li>&lt;code>map(f)&lt;/code>: 각 항목을 변환&lt;/li>
&lt;li>&lt;code>flat_map(f)&lt;/code>: 중첩 반복자를 평탄화&lt;/li>
&lt;li>&lt;code>flatten()&lt;/code>: 중첩된 반복자를 한 수준 평탄화&lt;/li>
&lt;li>&lt;code>inspect(f)&lt;/code>: 각 항목을 검사 (디버깅용)&lt;/li>
&lt;li>&lt;code>cloned()&lt;/code>: 참조 반복자의 값을 복제&lt;/li>
&lt;li>&lt;code>copied()&lt;/code>: 복사 가능한 참조 반복자의 값을 복사&lt;/li>
&lt;li>&lt;code>map_while(f)&lt;/code>: 조건이 참인 동안 변환&lt;/li>
&lt;li>&lt;code>scan(state, f)&lt;/code>: 상태를 가진 변환&lt;/li>
&lt;/ul>
&lt;h3 id="결합-어댑터">결합 어댑터&lt;/h3>
&lt;ul>
&lt;li>&lt;code>chain(other)&lt;/code>: 두 반복자를 연결&lt;/li>
&lt;li>&lt;code>zip(other)&lt;/code>: 두 반복자를 쌍으로 결합&lt;/li>
&lt;li>&lt;code>unzip()&lt;/code>: 쌍의 반복자를 두 개로 분리&lt;/li>
&lt;li>&lt;code>enumerate()&lt;/code>: 인덱스와 값의 쌍으로 변환&lt;/li>
&lt;li>&lt;code>partition(pred)&lt;/code>: 조건에 따라 두 그룹으로 분리&lt;/li>
&lt;/ul>
&lt;h3 id="순서-관련-어댑터">순서 관련 어댑터&lt;/h3>
&lt;ul>
&lt;li>&lt;code>rev()&lt;/code>: 반복자의 순서를 뒤집음 (양방향 반복자에만 적용 가능)&lt;/li>
&lt;li>&lt;code>cycle()&lt;/code>: 반복자를 무한히 반복&lt;/li>
&lt;li>&lt;code>interleave(other)&lt;/code>: 두 반복자의 항목을 번갈아가며 생성&lt;/li>
&lt;li>&lt;code>interleave_shortest(other)&lt;/code>: 더 짧은 반복자까지만 번갈아가며 생성&lt;/li>
&lt;/ul>
&lt;h3 id="그룹화-어댑터">그룹화 어댑터&lt;/h3>
&lt;ul>
&lt;li>&lt;code>chunks(n)&lt;/code>: n개 항목의 청크로 그룹화&lt;/li>
&lt;li>&lt;code>chunks_exact(n)&lt;/code>: 정확히 n개 항목의 청크로 그룹화&lt;/li>
&lt;li>&lt;code>windows(n)&lt;/code>: n개 항목의 슬라이딩 윈도우로 그룹화&lt;/li>
&lt;/ul>
&lt;h2 id="4-반복자-소비자-메서드">4. 반복자 소비자 메서드&lt;/h2>
&lt;h3 id="컬렉션-변환">컬렉션 변환&lt;/h3>
&lt;ul>
&lt;li>&lt;code>collect()&lt;/code>: 반복자를 컬렉션으로 변환&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">let&lt;/span> v: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">i32&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (&lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>&lt;span style="color:#fab387">5&lt;/span>).collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">let&lt;/span> s: &lt;span style="color:#f9e2af">HashSet&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">i32&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (&lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>&lt;span style="color:#fab387">5&lt;/span>).collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">let&lt;/span> m: &lt;span style="color:#f9e2af">HashMap&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">char&lt;/span>, &lt;span style="color:#f38ba8">i32&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[(&lt;span style="color:#a6e3a1">&amp;#39;a&amp;#39;&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>), (&lt;span style="color:#a6e3a1">&amp;#39;b&amp;#39;&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>)].into_iter().collect();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="계산-소비자">계산 소비자&lt;/h3>
&lt;ul>
&lt;li>&lt;code>sum()&lt;/code>: 모든 항목의 합계를 계산&lt;/li>
&lt;li>&lt;code>product()&lt;/code>: 모든 항목의 곱을 계산&lt;/li>
&lt;li>&lt;code>fold(init, f)&lt;/code>: 초기값과 함수로 모든 항목을 접음&lt;/li>
&lt;li>&lt;code>reduce(f)&lt;/code>: 첫 항목을 초기값으로 사용하여 접음&lt;/li>
&lt;li>&lt;code>try_fold(init, f)&lt;/code>: 오류 처리가 가능한 fold&lt;/li>
&lt;li>&lt;code>try_reduce(f)&lt;/code>: 오류 처리가 가능한 reduce&lt;/li>
&lt;/ul>
&lt;h3 id="검색-소비자">검색 소비자&lt;/h3>
&lt;ul>
&lt;li>&lt;code>find(pred)&lt;/code>: 조건을 만족하는 첫 항목을 찾음&lt;/li>
&lt;li>&lt;code>position(pred)&lt;/code>: 조건을 만족하는 첫 항목의 위치를 찾음&lt;/li>
&lt;li>&lt;code>rposition(pred)&lt;/code>: 뒤에서부터 조건을 만족하는 첫 항목의 위치를 찾음&lt;/li>
&lt;li>&lt;code>contains(&amp;amp;x)&lt;/code>: 특정 항목을 포함하는지 확인&lt;/li>
&lt;li>&lt;code>any(pred)&lt;/code>: 조건을 만족하는 항목이 있는지 확인&lt;/li>
&lt;li>&lt;code>all(pred)&lt;/code>: 모든 항목이 조건을 만족하는지 확인&lt;/li>
&lt;li>&lt;code>max()&lt;/code>: 최대 항목을 찾음&lt;/li>
&lt;li>&lt;code>min()&lt;/code>: 최소 항목을 찾음&lt;/li>
&lt;li>&lt;code>max_by(cmp)&lt;/code>: 비교 함수로 최대 항목을 찾음&lt;/li>
&lt;li>&lt;code>min_by(cmp)&lt;/code>: 비교 함수로 최소 항목을 찾음&lt;/li>
&lt;li>&lt;code>max_by_key(f)&lt;/code>: 키 함수로 최대 항목을 찾음&lt;/li>
&lt;li>&lt;code>min_by_key(f)&lt;/code>: 키 함수로 최소 항목을 찾음&lt;/li>
&lt;/ul>
&lt;h3 id="기타-소비자">기타 소비자&lt;/h3>
&lt;ul>
&lt;li>&lt;code>count()&lt;/code>: 항목의 수를 반환&lt;/li>
&lt;li>&lt;code>last()&lt;/code>: 마지막 항목을 반환&lt;/li>
&lt;li>&lt;code>nth(n)&lt;/code>: n번째 항목을 반환&lt;/li>
&lt;li>&lt;code>for_each(f)&lt;/code>: 각 항목에 함수를 적용&lt;/li>
&lt;li>&lt;code>try_for_each(f)&lt;/code>: 오류 처리가 가능한 for_each&lt;/li>
&lt;li>&lt;code>is_partitioned(pred)&lt;/code>: 반복자가 분할되어 있는지 확인&lt;/li>
&lt;li>&lt;code>is_sorted()&lt;/code>: 반복자가 정렬되어 있는지 확인&lt;/li>
&lt;li>&lt;code>is_sorted_by(cmp)&lt;/code>: 비교 함수로 정렬 여부 확인&lt;/li>
&lt;/ul>
&lt;h2 id="5-특수-반복자-유형">5. 특수 반복자 유형&lt;/h2>
&lt;h3 id="peekable">Peekable&lt;/h3>
&lt;p>다음 항목을 소비하지 않고 미리 확인할 수 있는 반복자:&lt;/p></description></item><item><title>brute force 체스판</title><link>https://smallzoodev.netlify.app/_wiki/boj-p1018/</link><pubDate>Sat, 03 May 2025 11:16:41 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p1018/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_1018.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>문제 자체는 브루트포스의 느낌이 났고 구현만 신경쓰면 될 것 같았다.&lt;/li>
&lt;li>O((N-7) * (M-7) * 128), n,m 상한이 50이다&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 1018
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/1018
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cmp::min,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> iter &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap().split_whitespace();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> m: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> iter.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> n: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> iter.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> board: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">char&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.take(m).map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>line&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> line.chars().collect()).collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> min_repaints &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">8&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#fab387">8&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> start_row &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..=&lt;/span>m &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">8&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> start_col &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..=&lt;/span>n &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">8&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> start_white &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> count_repaints(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>board, start_row, start_col, &lt;span style="color:#a6e3a1">&amp;#39;W&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> start_black &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> count_repaints(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>board, start_row, start_col, &lt;span style="color:#a6e3a1">&amp;#39;B&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> min_repaints &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> min(min_repaints, min(start_white, start_black));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, min_repaints).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">count_repaints&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> board: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>[&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">char&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> start_row: &lt;span style="color:#f38ba8">usize&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> start_col: &lt;span style="color:#f38ba8">usize&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> start_color: &lt;span style="color:#f38ba8">char&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) -&amp;gt; &lt;span style="color:#f38ba8">usize&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> other_color &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> start_color &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;W&amp;#39;&lt;/span> { &lt;span style="color:#a6e3a1">&amp;#39;B&amp;#39;&lt;/span> } &lt;span style="color:#cba6f7">else&lt;/span> { &lt;span style="color:#a6e3a1">&amp;#39;W&amp;#39;&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>&lt;span style="color:#fab387">8&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> j &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>&lt;span style="color:#fab387">8&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> expected_color &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> (i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> j) &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> start_color
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> other_color
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> board[start_row &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> i][start_col &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> j] &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> expected_color {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>클리피 린트에서 알게된것 :&lt;/p></description></item><item><title>dp 배낭 문제</title><link>https://smallzoodev.netlify.app/_wiki/boj-p12865/</link><pubDate>Sat, 03 May 2025 10:49:57 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p12865/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_12865.rs">rust soulution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>간단한 dp 배낭 문제&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 12865
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/12865
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">use&lt;/span> std::cmp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> iter &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap().split_whitespace();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> n: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> iter.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> k: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> iter.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> vals: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>(&lt;span style="color:#f38ba8">usize&lt;/span>, &lt;span style="color:#f38ba8">usize&lt;/span>)&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .take(n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>line&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> nums &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> line.split_whitespace();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> weight &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> nums.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> value &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> nums.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (weight, value)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> dp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#fab387">0&lt;/span>; k &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>]; n &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">1&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..=&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> w &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">1&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..=&lt;/span>k {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> (item_weight, item_value) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> vals[i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> item_weight &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> w {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i][w] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> cmp::max(dp[i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>][w], dp[i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>][w &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> item_weight] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> item_value);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i][w] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dp[i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>][w];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, dp[n][k]).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>dp 점화식이 예쁘게 나오는 문제</title><link>https://smallzoodev.netlify.app/_wiki/boj-p11048/</link><pubDate>Sat, 03 May 2025 00:12:33 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p11048/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_11048.rs">rust soulution&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/SmallzooDev/CodingInterviewKotlin/blob/main/src/main/kotlin/problems/baekjoon/p11048/Main.kt">kotlin solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>점화식만 구하면 딱 떨어지는 문제&lt;/li>
&lt;li>점화식 자체가 풀이랑 완벽하게 같은 문제&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 11048
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/11048
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cmp,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> dimensions: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .next()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .unwrap()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> y &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dimensions[&lt;span style="color:#fab387">0&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dimensions[&lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> candy &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#fab387">0&lt;/span>; x &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>]; y &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> dp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#fab387">0&lt;/span>; x &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>]; y &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (i, line) &lt;span style="color:#cba6f7">in&lt;/span> lines.enumerate().take(y) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> row: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">i32&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> line
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>x&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> x.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (j, &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>value) &lt;span style="color:#cba6f7">in&lt;/span> row.iter().enumerate().take(x) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> candy[i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>][j &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[&lt;span style="color:#fab387">1&lt;/span>][&lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> candy[&lt;span style="color:#fab387">1&lt;/span>][&lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">1&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..=&lt;/span>y {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> j &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">1&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..=&lt;/span>x {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">1&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> from_up &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">1&lt;/span> { dp[i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>][j] } &lt;span style="color:#cba6f7">else&lt;/span> { &lt;span style="color:#fab387">0&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> from_left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">1&lt;/span> { dp[i][j &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>] } &lt;span style="color:#cba6f7">else&lt;/span> { &lt;span style="color:#fab387">0&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> from_diagonal &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> j &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">1&lt;/span> { dp[i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>][j &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>] } &lt;span style="color:#cba6f7">else&lt;/span> { &lt;span style="color:#fab387">0&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i][j] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> candy[i][j] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> cmp::max(from_up, cmp::max(from_left, from_diagonal));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, dp[y][x]).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>최장 증가 부분 수열</title><link>https://smallzoodev.netlify.app/_wiki/boj-p11053/</link><pubDate>Sat, 03 May 2025 00:09:32 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p11053/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_11053.rs">rust soulution&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/SmallzooDev/CodingInterviewKotlin/blob/main/src/main/kotlin/problems/baekjoon/p11053/Main.kt">kotlin solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>최장부분수열, dp로 풀린다.&lt;/li>
&lt;li>사실 이건 풀이법이 기억나서 금방 풀었다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 11053
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/11053
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> _n: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> numbers: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">i32&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .next()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .unwrap()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>s&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> s.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> dp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#fab387">1&lt;/span>; numbers.len()];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">1&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>numbers.len() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> j &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>i {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> numbers[j] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> numbers[i] {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dp[i].max(dp[j] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> max_len &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dp.iter().max().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, max_len).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">package&lt;/span> &lt;span style="color:#fab387">problems.baekjoon.p11053&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">import&lt;/span> &lt;span style="color:#fab387">java.io.BufferedReader&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">import&lt;/span> &lt;span style="color:#fab387">java.io.InputStreamReader&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">import&lt;/span> &lt;span style="color:#fab387">kotlin.math.max&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fun&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() = with(BufferedReader(InputStreamReader(&lt;span style="color:#f9e2af">System&lt;/span>.`in`))) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">n&lt;/span> = readLine()&lt;span style="color:#89dceb;font-weight:bold">!!&lt;/span>.toInt()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">inputs&lt;/span> = readLine()&lt;span style="color:#89dceb;font-weight:bold">!!&lt;/span>.split(&lt;span style="color:#a6e3a1">&amp;#34; &amp;#34;&lt;/span>).map { &lt;span style="color:#cba6f7">it&lt;/span>.toInt() }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">dp&lt;/span> = MutableList(n) { &lt;span style="color:#fab387">1&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">1&lt;/span> until inputs.size) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (j &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span> until i) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (inputs[i] &amp;gt; inputs[j]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i] = max(dp[i], dp[j] + &lt;span style="color:#fab387">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(dp.max())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>또 그리디 쉬운 문제</title><link>https://smallzoodev.netlify.app/_wiki/boj-p1461/</link><pubDate>Sat, 03 May 2025 00:04:45 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p1461/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_1461.rs">rust soulution&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/SmallzooDev/CodingInterviewKotlin/blob/main/src/main/kotlin/problems/baekjoon/p1461/Main.kt">kotlin solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>그리디 입문 문제&lt;/li>
&lt;li>그리디로 풀린다는 직관을 갖기까지가 어려운 것 같다.&lt;/li>
&lt;li>반대로 그리디인걸 알고 풀면 엄청 쉽게쉽게 풀린다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/1461
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 1461
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cmp,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// -1, 3 (4 5) (6 11)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// (-45 -26 -18) (-9 -4), (22 40 50)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> first_line &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> parts &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> first_line.split_whitespace();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> _n: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> parts.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> holdable: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> parts.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 음수와 양수는 다르게 접근해야함
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> plus: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">i32&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">Vec&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> minus: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">i32&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">Vec&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#89dceb">Some&lt;/span>(line) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> num_str &lt;span style="color:#cba6f7">in&lt;/span> line.split_whitespace() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#89dceb">Ok&lt;/span>(num) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> num_str.parse::&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">i32&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> num &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> plus.push(num);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> minus.push(num.abs());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 내림차순
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> plus.sort_by(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>a, b&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> b.cmp(a));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> minus.sort_by(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>a, b&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> b.cmp(a));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> max_dist &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 내림차순, 0번원소부터 즉 가장 큰 원소부터 한번에 들 수 있는 값만큼 step_by()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> (&lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>plus.len()).step_by(holdable) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 가장 긴 거리를 카운트
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_dist &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> cmp::max(max_dist, plus[i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> plus[i] &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#fab387">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 위와 동일
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> (&lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>minus.len()).step_by(holdable) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> max_dist &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> cmp::max(max_dist, minus[i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> minus[i] &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#fab387">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 가장 긴 거리 한 번을 빼줌, (다놓고 돌아올 필요가 없음)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> result &lt;span style="color:#89dceb;font-weight:bold">-=&lt;/span> max_dist;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, result).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>공통 부분 수열</title><link>https://smallzoodev.netlify.app/_wiki/boj-p9251/</link><pubDate>Sat, 03 May 2025 00:00:33 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p9251/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_9251.rs">rust soulution&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/SmallzooDev/CodingInterviewKotlin/blob/main/src/main/kotlin/problems/baekjoon/p9251/Main.kt">kotlin solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>공통부분수열, 기억이 안나고 푸는 특정한 방법이 있다는게 기억나서 풀이를 찾아서 구현했다.&lt;/li>
&lt;li>천천히 생각했으면 풀었거나 기억이 났을 것 같은데, 직전에 풀었던 공통수열로 생각하다가 점화식에 집착하다 목풀었다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 9251
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/9251
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> first_str: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">char&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap().chars().collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> second_str: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">char&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap().chars().collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> m &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> first_str.len();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> second_str.len();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> dp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#fab387">0&lt;/span>; n &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>]; m &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">1&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..=&lt;/span>m {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> j &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">1&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..=&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> first_str[i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> second_str[j &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>] {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i][j] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dp[i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>][j &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dp[i][j] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dp[i &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>][j].max(dp[i][j &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, dp[m][n]).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Vim Index 🦅</title><link>https://smallzoodev.netlify.app/_wiki/vim-index/</link><pubDate>Fri, 02 May 2025 18:48:21 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/vim-index/</guid><description>&lt;h1 id="vim-index-">Vim Index 🦅&lt;/h1>
&lt;ul>
&lt;li>[[Neovim-Copilot-Config]]&lt;/li>
&lt;li>[[Vim-Profile-Log-Debugging]]&lt;/li>
&lt;li>[[Vim-Impove-Sheet]]&lt;/li>
&lt;/ul></description></item><item><title>Computer Science Index 🤖</title><link>https://smallzoodev.netlify.app/_wiki/computer-science-index/</link><pubDate>Fri, 02 May 2025 18:46:54 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/computer-science-index/</guid><description>&lt;h1 id="computer-science-index-">Computer Science Index 🤖&lt;/h1>
&lt;ul>
&lt;li>[[OSTEP]] : 운영체제 아주 쉬운 세 가지 이야기&lt;/li>
&lt;li>[[Network]] : TCP/IP Illustrated&lt;/li>
&lt;li>[[Semaphore-Mutex]] : 세마포어와 뮤텍스 정리&lt;/li>
&lt;li>[[effective-linux-oreily]]&lt;/li>
&lt;/ul></description></item><item><title>Data Base Index 🗃️</title><link>https://smallzoodev.netlify.app/_wiki/database-index/</link><pubDate>Fri, 02 May 2025 18:45:18 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/database-index/</guid><description>db 인덱스!</description></item><item><title>Backend Etc Index 💸</title><link>https://smallzoodev.netlify.app/_wiki/backend-etc-index/</link><pubDate>Fri, 02 May 2025 18:43:33 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/backend-etc-index/</guid><description>먹고 살기 위해서 알아야 하는 것들</description></item><item><title>Archived Pages 📚</title><link>https://smallzoodev.netlify.app/_wiki/archived-etc-pages/</link><pubDate>Fri, 02 May 2025 18:41:31 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/archived-etc-pages/</guid><description>짬통..?</description></item><item><title>Java Kotlin 🏝️</title><link>https://smallzoodev.netlify.app/_wiki/java-kotlin-index/</link><pubDate>Fri, 02 May 2025 18:34:18 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/java-kotlin-index/</guid><description>java kotlin관련 문서 Index</description></item><item><title>Rust IO for PS (From Bubblers)</title><link>https://smallzoodev.netlify.app/_wiki/rust-io-for-ps/</link><pubDate>Fri, 02 May 2025 18:07:45 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/rust-io-for-ps/</guid><description>백준 입출력 코드 분석</description></item><item><title>untitle</title><link>https://smallzoodev.netlify.app/_wiki/boj-p5585/</link><pubDate>Fri, 02 May 2025 00:07:15 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p5585/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_5585.rs">rust soulution&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/SmallzooDev/CodingInterviewKotlin/blob/main/src/main/kotlin/problems/baekjoon/p5585/Main.kt">kotlin solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>그리디 입문 문제, 코틀린 풀이를 더 줄여보려다가 그냥 저기가 딱 적당한 것 같다.&lt;/li>
&lt;li>설명은 스킵&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/5585
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 5585
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> price: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> change &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1000&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> price;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> money &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">500&lt;/span>, &lt;span style="color:#fab387">100&lt;/span>, &lt;span style="color:#fab387">50&lt;/span>, &lt;span style="color:#fab387">10&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> coin &lt;span style="color:#cba6f7">in&lt;/span> money {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> change &lt;span style="color:#89dceb;font-weight:bold">/&lt;/span> coin;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> change &lt;span style="color:#89dceb;font-weight:bold">%=&lt;/span> coin;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, result).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Greedy 간단한 풀이</title><link>https://smallzoodev.netlify.app/_wiki/boj_p1026/</link><pubDate>Fri, 02 May 2025 00:02:32 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj_p1026/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_1026.rs">rust soulution&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/SmallzooDev/CodingInterviewKotlin/blob/main/src/main/kotlin/problems/baekjoon/p1026/Main.kt">kotlin solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>그리디 입문 문제, 코틀린 풀이를 더 줄여보려다가 그냥 저기가 딱 적당한 것 같다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 1026
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/1026
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> _n: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> arrays: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">i32&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .take(&lt;span style="color:#fab387">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>line&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> line.split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>s&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> s.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arrays[&lt;span style="color:#fab387">0&lt;/span>].sort();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arrays[&lt;span style="color:#fab387">1&lt;/span>].sort_by(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>a, b&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> b.cmp(a));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> result: &lt;span style="color:#f38ba8">i32&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> arrays[&lt;span style="color:#fab387">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .iter()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .zip(arrays[&lt;span style="color:#fab387">1&lt;/span>].iter())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>(a, b)&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> b)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .sum();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, result).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">package&lt;/span> &lt;span style="color:#fab387">problems.baekjoon.p1026&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">import&lt;/span> &lt;span style="color:#fab387">java.io.BufferedReader&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">import&lt;/span> &lt;span style="color:#fab387">java.io.InputStreamReader&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fun&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() = with(BufferedReader(InputStreamReader(&lt;span style="color:#f9e2af">System&lt;/span>.`in`))) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> readLine()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">aVals&lt;/span> = readLine()&lt;span style="color:#89dceb;font-weight:bold">!!&lt;/span>.split(&lt;span style="color:#a6e3a1">&amp;#34; &amp;#34;&lt;/span>).map { &lt;span style="color:#cba6f7">it&lt;/span>.toInt() }.sorted()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">bVals&lt;/span> = readLine()&lt;span style="color:#89dceb;font-weight:bold">!!&lt;/span>.split(&lt;span style="color:#a6e3a1">&amp;#34; &amp;#34;&lt;/span>).map { &lt;span style="color:#cba6f7">it&lt;/span>.toInt() }.sortedDescending()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(aVals.zip(bVals).sumOf { (a, b) &lt;span style="color:#89dceb;font-weight:bold">-&amp;gt;&lt;/span> a * b })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>브루트포스, 메모이제이션</title><link>https://smallzoodev.netlify.app/_wiki/boj-p1342/</link><pubDate>Thu, 01 May 2025 23:38:45 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p1342/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_1342.rs">rust soulution&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/SmallzooDev/CodingInterviewKotlin/blob/main/src/main/kotlin/problems/baekjoon/p6603/Main.kt">kotlin solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>전형적인 백트래킹 + 가짓수를 줄여주는 메모이제이션 사용&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 1342
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/1342
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">use&lt;/span> std::{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> collections::HashMap,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">get_happy_num_count&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> len: &lt;span style="color:#f38ba8">usize&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp_len: &lt;span style="color:#f38ba8">usize&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> last_char: &lt;span style="color:#89dceb">Option&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> counts: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f9e2af">mut&lt;/span> [&lt;span style="color:#f38ba8">i32&lt;/span>; &lt;span style="color:#fab387">26&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> memo: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f9e2af">mut&lt;/span> HashMap&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>(&lt;span style="color:#f38ba8">usize&lt;/span>, &lt;span style="color:#89dceb">Option&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>, [&lt;span style="color:#f38ba8">i32&lt;/span>; &lt;span style="color:#fab387">26&lt;/span>]), &lt;span style="color:#f38ba8">i32&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) -&amp;gt; &lt;span style="color:#f38ba8">i32&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> tmp_len &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> len {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> key &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (tmp_len, last_char, &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>counts);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#89dceb">Some&lt;/span>(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>cached) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> memo.get(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>key) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> cached;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>&lt;span style="color:#fab387">26&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> counts[i] &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#89dceb">Some&lt;/span>(i) &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> last_char {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> counts[i] &lt;span style="color:#89dceb;font-weight:bold">-=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> get_happy_num_count(len, tmp_len &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#89dceb">Some&lt;/span>(i), counts, memo);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> counts[i] &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> memo.insert(key, result);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout().lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> input_line &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines().next().unwrap().trim();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> len &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input_line.len();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> counts &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#cba6f7">i32&lt;/span>; &lt;span style="color:#fab387">26&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> c &lt;span style="color:#cba6f7">in&lt;/span> input_line.chars() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> counts[c &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;a&amp;#39;&lt;/span> &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> memo &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> HashMap::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> get_happy_num_count(len, &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#89dceb">None&lt;/span>, &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> counts, &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> memo);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">writeln!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, count).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">경로&lt;/span> &lt;span style="color:#fab387">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;a&amp;#39;&lt;/span> &lt;span style="color:#f38ba8">선택&lt;/span> &lt;span style="color:#f38ba8">→&lt;/span> (tmp_len&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">1&lt;/span>, last_char&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#89dceb">Some&lt;/span>(&lt;span style="color:#fab387">0&lt;/span>), counts&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>[&lt;span style="color:#fab387">2&lt;/span>,&lt;span style="color:#fab387">2&lt;/span>,&lt;span style="color:#fab387">1&lt;/span>,&lt;span style="color:#fab387">0&lt;/span>,&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>.,&lt;span style="color:#fab387">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;b&amp;#39;&lt;/span> &lt;span style="color:#f38ba8">선택&lt;/span> &lt;span style="color:#f38ba8">→&lt;/span> (tmp_len&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">2&lt;/span>, last_char&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#89dceb">Some&lt;/span>(&lt;span style="color:#fab387">1&lt;/span>), counts&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>[&lt;span style="color:#fab387">2&lt;/span>,&lt;span style="color:#fab387">1&lt;/span>,&lt;span style="color:#fab387">1&lt;/span>,&lt;span style="color:#fab387">0&lt;/span>,&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>.,&lt;span style="color:#fab387">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;c&amp;#39;&lt;/span> &lt;span style="color:#f38ba8">선택&lt;/span> &lt;span style="color:#f38ba8">→&lt;/span> (tmp_len&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">3&lt;/span>, last_char&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#89dceb">Some&lt;/span>(&lt;span style="color:#fab387">2&lt;/span>), counts&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>[&lt;span style="color:#fab387">2&lt;/span>,&lt;span style="color:#fab387">1&lt;/span>,&lt;span style="color:#fab387">0&lt;/span>,&lt;span style="color:#fab387">0&lt;/span>,&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>.,&lt;span style="color:#fab387">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;a&amp;#39;&lt;/span> &lt;span style="color:#f38ba8">선택&lt;/span> &lt;span style="color:#f38ba8">→&lt;/span> (tmp_len&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">4&lt;/span>, last_char&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#89dceb">Some&lt;/span>(&lt;span style="color:#fab387">0&lt;/span>), counts&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>[&lt;span style="color:#fab387">1&lt;/span>,&lt;span style="color:#fab387">1&lt;/span>,&lt;span style="color:#fab387">0&lt;/span>,&lt;span style="color:#fab387">0&lt;/span>,&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>.,&lt;span style="color:#fab387">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;b&amp;#39;&lt;/span> &lt;span style="color:#f38ba8">선택&lt;/span> &lt;span style="color:#f38ba8">→&lt;/span> (tmp_len&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">5&lt;/span>, last_char&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#89dceb">Some&lt;/span>(&lt;span style="color:#fab387">1&lt;/span>), counts&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>[&lt;span style="color:#fab387">1&lt;/span>,&lt;span style="color:#fab387">0&lt;/span>,&lt;span style="color:#fab387">0&lt;/span>,&lt;span style="color:#fab387">0&lt;/span>,&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>.,&lt;span style="color:#fab387">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;a&amp;#39;&lt;/span> &lt;span style="color:#f38ba8">선택&lt;/span> &lt;span style="color:#f38ba8">→&lt;/span> &lt;span style="color:#f38ba8">완성된&lt;/span> &lt;span style="color:#f38ba8">문자열&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;abcaba&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">경로&lt;/span> &lt;span style="color:#fab387">2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;b&amp;#39;&lt;/span> &lt;span style="color:#f38ba8">선택&lt;/span> &lt;span style="color:#f38ba8">→&lt;/span> (tmp_len&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">1&lt;/span>, last_char&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#89dceb">Some&lt;/span>(&lt;span style="color:#fab387">1&lt;/span>), counts&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>[&lt;span style="color:#fab387">3&lt;/span>,&lt;span style="color:#fab387">1&lt;/span>,&lt;span style="color:#fab387">1&lt;/span>,&lt;span style="color:#fab387">0&lt;/span>,&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>.,&lt;span style="color:#fab387">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;a&amp;#39;&lt;/span> &lt;span style="color:#f38ba8">선택&lt;/span> &lt;span style="color:#f38ba8">→&lt;/span> (tmp_len&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">2&lt;/span>, last_char&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#89dceb">Some&lt;/span>(&lt;span style="color:#fab387">0&lt;/span>), counts&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>[&lt;span style="color:#fab387">2&lt;/span>,&lt;span style="color:#fab387">1&lt;/span>,&lt;span style="color:#fab387">1&lt;/span>,&lt;span style="color:#fab387">0&lt;/span>,&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>.,&lt;span style="color:#fab387">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;c&amp;#39;&lt;/span> &lt;span style="color:#f38ba8">선택&lt;/span> &lt;span style="color:#f38ba8">→&lt;/span> (tmp_len&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">3&lt;/span>, last_char&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#89dceb">Some&lt;/span>(&lt;span style="color:#fab387">2&lt;/span>), counts&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>[&lt;span style="color:#fab387">2&lt;/span>,&lt;span style="color:#fab387">1&lt;/span>,&lt;span style="color:#fab387">0&lt;/span>,&lt;span style="color:#fab387">0&lt;/span>,&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>.,&lt;span style="color:#fab387">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;a&amp;#39;&lt;/span> &lt;span style="color:#f38ba8">선택&lt;/span> &lt;span style="color:#f38ba8">→&lt;/span> (tmp_len&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">4&lt;/span>, last_char&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#89dceb">Some&lt;/span>(&lt;span style="color:#fab387">0&lt;/span>), counts&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>[&lt;span style="color:#fab387">1&lt;/span>,&lt;span style="color:#fab387">1&lt;/span>,&lt;span style="color:#fab387">0&lt;/span>,&lt;span style="color:#fab387">0&lt;/span>,&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>.,&lt;span style="color:#fab387">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;b&amp;#39;&lt;/span> &lt;span style="color:#f38ba8">선택&lt;/span> &lt;span style="color:#f38ba8">→&lt;/span> (tmp_len&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">5&lt;/span>, last_char&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#89dceb">Some&lt;/span>(&lt;span style="color:#fab387">1&lt;/span>), counts&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>[&lt;span style="color:#fab387">1&lt;/span>,&lt;span style="color:#fab387">0&lt;/span>,&lt;span style="color:#fab387">0&lt;/span>,&lt;span style="color:#fab387">0&lt;/span>,&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>.,&lt;span style="color:#fab387">0&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;a&amp;#39;&lt;/span> &lt;span style="color:#f38ba8">선택&lt;/span> &lt;span style="color:#f38ba8">→&lt;/span> &lt;span style="color:#f38ba8">완성된&lt;/span> &lt;span style="color:#f38ba8">문자열&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;bacaba&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>메모이제이션이 동작하는 예제는 위와 같다.
&lt;ul>
&lt;li>abc, bac -&amp;gt; 같은 원소를 사용하고, 마지막문자가 같다면, 나머지로 만들어낼 수 있는 가짓수는 같다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>메모이제이션을 넣지 않은 러스트 풀이가 600ms대라서 찝찝해서 메모이제이션 했는데, 0ms가 나왔다.&lt;/li>
&lt;li>참고로 동일한 메모이제이션 넣은 코틀린 풀이가 150ms대였는데, 미묘한 것 같다.&lt;/li>
&lt;/ul></description></item><item><title>rust smart pointers</title><link>https://smallzoodev.netlify.app/_wiki/smart-pointers/</link><pubDate>Thu, 01 May 2025 16:49:21 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/smart-pointers/</guid><description>&lt;h1 id="150-smart-pointers">15.0 Smart Pointers&lt;/h1>
&lt;blockquote>
&lt;p>Smart pointers, on the other hand, are data structures that act like a pointer but also have additional metadata and capabilities.
This pointer enables you to allow data to have multiple owners by keeping track of the number of owners and, when no owners remain, cleaning up the data.&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>burrow 시스템과 연관해서 봐야하는것들이 있다.
&lt;ul>
&lt;li>참조는 데이터를 burrow 해주지만,&lt;/li>
&lt;li>smart pointer는 해당 데이터를 소유한다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Aspect&lt;/th>
 &lt;th>Reference (&lt;code>&amp;amp;T&lt;/code>)&lt;/th>
 &lt;th>Smart Pointer (&lt;code>Box&amp;lt;T&amp;gt;&lt;/code>, etc.)&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>Ownership&lt;/td>
 &lt;td>Borrows only&lt;/td>
 &lt;td>Owns the data&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Memory Allocation&lt;/td>
 &lt;td>Stack (points to stack or heap)&lt;/td>
 &lt;td>Usually heap&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Lifetimes&lt;/td>
 &lt;td>Tied to scope of borrow&lt;/td>
 &lt;td>Can live beyond original owner&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Mutability Rules&lt;/td>
 &lt;td>Strict compile-time rules&lt;/td>
 &lt;td>Some allow runtime mutability&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Use Case&lt;/td>
 &lt;td>Fast, safe temporary access&lt;/td>
 &lt;td>Complex ownership/sharing models&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>Though we didn’t call them as such at the time, we’ve already encountered a few smart pointers in this book, including String and Vec&amp;lt;&amp;gt; in Chapter 8. Both these types count as smart pointers because they own some memory and allow you to manipulate it. They also have metadata and extra capabilities or guarantees. String, for example, stores its capacity as metadata and has the extra ability to ensure its data will always be valid UTF-8.&lt;/p></description></item><item><title>브루트포스 야구 문제</title><link>https://smallzoodev.netlify.app/_wiki/boj-p2503/</link><pubDate>Wed, 30 Apr 2025 21:45:16 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p2503/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_2503.rs">rust soulution&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/SmallzooDev/CodingInterviewKotlin/blob/main/src/main/kotlin/problems/baekjoon/p2503/Main.kt">kotlin solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>브루트포스 야구 문제&lt;/li>
&lt;li>시간복잡도를 계산하고 총 제약조건 하에 계산이 되는지 확인&lt;/li>
&lt;li>1000개의 가능한 경우의수를 번호를 모두 입력조건이랑 비교한다&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 2503
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/2503
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">is_valid&lt;/span>(candidate: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f38ba8">str&lt;/span>, question: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f38ba8">str&lt;/span>, strike: &lt;span style="color:#f38ba8">i32&lt;/span>, ball: &lt;span style="color:#f38ba8">i32&lt;/span>) -&amp;gt; &lt;span style="color:#f38ba8">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> s &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> b &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (i, c) &lt;span style="color:#cba6f7">in&lt;/span> candidate.chars().enumerate() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (j, q) &lt;span style="color:#cba6f7">in&lt;/span> question.chars().enumerate() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> c &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> q {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> j {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> strike &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> b &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> ball
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> stdin.lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> stdout.lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> n: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> vec: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#f38ba8">str&lt;/span>, &lt;span style="color:#f38ba8">i32&lt;/span>, &lt;span style="color:#f38ba8">i32&lt;/span>)&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">Vec&lt;/span>::with_capacity(n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> _ &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> line &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> parts &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> line.split_whitespace();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> first: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f38ba8">str&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> parts.next().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> second: &lt;span style="color:#f38ba8">i32&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> parts.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> third: &lt;span style="color:#f38ba8">i32&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> parts.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vec.push((first, second, third));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">123&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>&lt;span style="color:#fab387">988&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> candidate &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> i.to_string();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> digits: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">char&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> candidate.chars().collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> digits.contains(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;0&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> digits[&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> digits[&lt;span style="color:#fab387">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> digits[&lt;span style="color:#fab387">1&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> digits[&lt;span style="color:#fab387">2&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> digits[&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> digits[&lt;span style="color:#fab387">2&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> vec.iter().all(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>(q, s, b)&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> is_valid(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>candidate, q, &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>s, &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>b)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{count}&amp;#34;&lt;/span>).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>쉬운 브루트 포스 문제 풀이</title><link>https://smallzoodev.netlify.app/_wiki/boj-p1182/</link><pubDate>Wed, 30 Apr 2025 21:41:31 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p1182/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_1182.rs">rust soulution&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/SmallzooDev/CodingInterviewKotlin/blob/main/src/main/kotlin/problems/baekjoon/p1182/Main.kt">kotlin solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>브루트포스 조합 문제&lt;/li>
&lt;li>비트마스킹으로 풀 수 있다는 풀이를 보기는 했지만 오랫만이라 잘 되지 않았다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 1182
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/1182
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">combination&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vec: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">i32&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> selected: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f9e2af">mut&lt;/span> &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">i32&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> idx: &lt;span style="color:#f38ba8">usize&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> level: &lt;span style="color:#f38ba8">usize&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sum: &lt;span style="color:#f38ba8">i32&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> count: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f9e2af">mut&lt;/span> &lt;span style="color:#f38ba8">i32&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> selected.len() &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> level {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> total: &lt;span style="color:#f38ba8">i32&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> selected.iter().sum();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> total &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> sum {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>count &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> idx&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>vec.len() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> selected.push(vec[i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> combination(vec, selected, i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>, level, sum, count);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> selected.pop();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> io::stdin().read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> stdout.lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> first_line &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> parts &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> first_line.split_whitespace();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> cnt: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> parts.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> sum: &lt;span style="color:#f38ba8">i32&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> parts.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> numbers_line &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> vec: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">i32&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> numbers_line
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>s&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> s.parse::&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">i32&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> total_count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> level &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">1&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..=&lt;/span>cnt {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> selected &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">Vec&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> combination(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>vec, &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> selected, &lt;span style="color:#fab387">0&lt;/span>, level, sum, &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> total_count);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, total_count).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>약간 더 조건이 붙는 기본 정렬</title><link>https://smallzoodev.netlify.app/_wiki/boj-p23246/</link><pubDate>Wed, 30 Apr 2025 21:33:14 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p23246/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_23246.rs">rust soulution&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/SmallzooDev/CodingInterviewKotlin/blob/main/src/main/kotlin/problems/baekjoon/p23246/Main.kt">kotlin solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>간단한 정렬 문제 2&lt;/li>
&lt;li>비교자만 잘 구현해두면 고민없이 풀리는 문제&lt;/li>
&lt;li>러스트 입출력을 좀 우아하게 할 수 있는 것 같다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 23246
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/23246
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">use&lt;/span> std::cmp::Ordering;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#[derive(Debug)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">struct&lt;/span> &lt;span style="color:#f9e2af">Climber&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id: &lt;span style="color:#f38ba8">i32&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lead: &lt;span style="color:#f38ba8">i32&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> spead: &lt;span style="color:#f38ba8">i32&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> boldering: &lt;span style="color:#f38ba8">i32&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">impl&lt;/span> Climber {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">total&lt;/span>(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#89dceb">self&lt;/span>) -&amp;gt; &lt;span style="color:#f38ba8">i32&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>.lead &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>.spead &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>.boldering
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">sum&lt;/span>(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#89dceb">self&lt;/span>) -&amp;gt; &lt;span style="color:#f38ba8">i32&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>.lead &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>.spead &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>.boldering
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">impl&lt;/span> &lt;span style="color:#89dceb">Ord&lt;/span> &lt;span style="color:#cba6f7">for&lt;/span> Climber {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">cmp&lt;/span>(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#89dceb">self&lt;/span>, other: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f9e2af">Self&lt;/span>) -&amp;gt; &lt;span style="color:#f9e2af">Ordering&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>.total()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .cmp(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>other.total())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .then_with(&lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>.sum().cmp(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>other.sum()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .then_with(&lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>.id.cmp(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>other.id))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">impl&lt;/span> &lt;span style="color:#89dceb">PartialOrd&lt;/span> &lt;span style="color:#cba6f7">for&lt;/span> Climber {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">partial_cmp&lt;/span>(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#89dceb">self&lt;/span>, other: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f9e2af">Self&lt;/span>) -&amp;gt; &lt;span style="color:#89dceb">Option&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Ordering&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Some&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>.cmp(other))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">impl&lt;/span> &lt;span style="color:#89dceb">PartialEq&lt;/span> &lt;span style="color:#cba6f7">for&lt;/span> Climber {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">eq&lt;/span>(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#89dceb">self&lt;/span>, other: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f9e2af">Self&lt;/span>) -&amp;gt; &lt;span style="color:#f38ba8">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>.id &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> other.id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">impl&lt;/span> &lt;span style="color:#89dceb">Eq&lt;/span> &lt;span style="color:#cba6f7">for&lt;/span> Climber {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() -&amp;gt; &lt;span style="color:#f9e2af">io&lt;/span>::&lt;span style="color:#89dceb">Result&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>()&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> io::stdin().read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input)&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> n: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> climbers: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Climber&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .take(n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>line&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> nums: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">i32&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> line
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>s&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> s.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Climber {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id: &lt;span style="color:#f9e2af">nums&lt;/span>[&lt;span style="color:#fab387">0&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lead: &lt;span style="color:#f9e2af">nums&lt;/span>[&lt;span style="color:#fab387">1&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> spead: &lt;span style="color:#f9e2af">nums&lt;/span>[&lt;span style="color:#fab387">2&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> boldering: &lt;span style="color:#f9e2af">nums&lt;/span>[&lt;span style="color:#fab387">3&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> climbers.sort();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> climbers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .iter()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .take(&lt;span style="color:#fab387">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>c&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> c.id.to_string())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect::&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>_&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .join(&lt;span style="color:#a6e3a1">&amp;#34; &amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(io::stdout(), &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, result)&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Ok&lt;/span>(())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>ord (comparator)만 잘 구현해두면 되는 매우 단순한 구현문제.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> climbers: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Climber&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .take(n)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>line&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> nums: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">i32&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> line
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .split_whitespace()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>s&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> s.parse().unwrap())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Climber {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id: &lt;span style="color:#f9e2af">nums&lt;/span>[&lt;span style="color:#fab387">0&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> lead: &lt;span style="color:#f9e2af">nums&lt;/span>[&lt;span style="color:#fab387">1&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> spead: &lt;span style="color:#f9e2af">nums&lt;/span>[&lt;span style="color:#fab387">2&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> boldering: &lt;span style="color:#f9e2af">nums&lt;/span>[&lt;span style="color:#fab387">3&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>코틀린에서는 잘 되는데 러스트에서는 입력을 이렇게 깔끔하게 하는게 잘 안되는 것 같다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">import&lt;/span> &lt;span style="color:#fab387">java.io.BufferedReader&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">import&lt;/span> &lt;span style="color:#fab387">java.io.InputStreamReader&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">data&lt;/span> &lt;span style="color:#cba6f7">class&lt;/span> &lt;span style="color:#f9e2af">Climber&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">id&lt;/span>: Int,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">lead&lt;/span>: Int,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">speed&lt;/span>: Int,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">bouldering&lt;/span>: Int,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>): Comparable&amp;lt;Climber&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">private&lt;/span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">total&lt;/span>: Int
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">get&lt;/span>() = lead * speed * bouldering
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">private&lt;/span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">sum&lt;/span>: Int
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">get&lt;/span>() = lead + speed + bouldering
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">override&lt;/span> &lt;span style="color:#cba6f7">fun&lt;/span> &lt;span style="color:#89b4fa">compareTo&lt;/span>(other: Climber): Int {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> compareValuesBy(&lt;span style="color:#cba6f7">this&lt;/span>, other,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#cba6f7">it&lt;/span>.total}, {&lt;span style="color:#cba6f7">it&lt;/span>.sum}, {&lt;span style="color:#cba6f7">it&lt;/span>.id}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fun&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() = with(BufferedReader(InputStreamReader(&lt;span style="color:#f9e2af">System&lt;/span>.`in`))) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">n&lt;/span> = readLine().toInt()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">climbers&lt;/span>: MutableList&amp;lt;Climber&amp;gt; = mutableListOf()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> repeat(n) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">tmp&lt;/span> = readLine()&lt;span style="color:#89dceb;font-weight:bold">!!&lt;/span>.split(&lt;span style="color:#a6e3a1">&amp;#34; &amp;#34;&lt;/span>).map { &lt;span style="color:#cba6f7">it&lt;/span>.toInt() }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> climbers.add(Climber(tmp[&lt;span style="color:#fab387">0&lt;/span>], tmp[&lt;span style="color:#fab387">1&lt;/span>], tmp[&lt;span style="color:#fab387">2&lt;/span>], tmp[&lt;span style="color:#fab387">3&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">sortedClimbers&lt;/span> = climbers.sorted()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(sortedClimbers.take(&lt;span style="color:#fab387">3&lt;/span>).joinToString(&lt;span style="color:#a6e3a1">&amp;#34; &amp;#34;&lt;/span>) { &lt;span style="color:#cba6f7">it&lt;/span>.id.toString() })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> close()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>그냥 간단한 정렬 문제</title><link>https://smallzoodev.netlify.app/_wiki/boj-p11650/</link><pubDate>Wed, 30 Apr 2025 21:27:20 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p11650/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/coding_interview_rust/blob/main/src/bin/b_11650.rs">rust soulution&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/SmallzooDev/CodingInterviewKotlin/blob/main/src/main/kotlin/problems/baekjoon/p11650/Main.kt">kotlin solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>간단한 정렬 문제&lt;/li>
&lt;li>러스트 입출력을 좀 찾아서 써봤다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Baekjoon - 11650
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// https://www.acmicpc.net/problem/11650
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, Read, Write};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdin();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io::stdout();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> stdin.lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stdout &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> stdout.lock();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stdin.read_to_string(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> input).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> input.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> n: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> vec: &lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>(&lt;span style="color:#f38ba8">i32&lt;/span>, &lt;span style="color:#f38ba8">i32&lt;/span>)&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">Vec&lt;/span>::with_capacity(n);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> _ &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> line &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> parts &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> line.split_whitespace();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> first: &lt;span style="color:#f38ba8">i32&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> parts.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> second: &lt;span style="color:#f38ba8">i32&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> parts.next().unwrap().parse().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vec.push((first, second));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vec.sort();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> output &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::with_capacity(n &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#fab387">10&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (first, second) &lt;span style="color:#cba6f7">in&lt;/span> vec {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> output.push_str(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#89b4fa">format!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1"> &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#89b4fa">\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, first, second));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">write!&lt;/span>(stdout, &lt;span style="color:#a6e3a1">&amp;#34;{}&amp;#34;&lt;/span>, output).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>보통 이렇게 출력해야 백준등에서 timeout이 안나는 것 같다.&lt;/li>
&lt;li>확실히 option variant는 일장일단인 것 같기도..&lt;/li>
&lt;/ul></description></item><item><title>순열</title><link>https://smallzoodev.netlify.app/_wiki/boj-p10974/</link><pubDate>Mon, 28 Apr 2025 17:25:02 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p10974/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/CodingInterviewCpp/tree/main/src/problems/baekjoon/p10974">cpp soulution&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/SmallzooDev/CodingInterviewKotlin/tree/main/src/main/kotlin/problems/baekjoon/p10974">kotlin solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>순열 구현 문제&lt;/li>
&lt;li>cpp 풀이는 next_permutation을 이용해서 간단하게 했다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ios_base&lt;span style="color:#89dceb;font-weight:bold">::&lt;/span>sync_with_stdio(&lt;span style="color:#89dceb">false&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cin.tie(&lt;span style="color:#cba6f7">nullptr&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 문제 해결 코드 작성
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#f38ba8">int&lt;/span> n;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cin &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> n;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> arr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arr.push_back(i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">do&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89dceb">i&lt;/span>: arr) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39; &amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">while&lt;/span> (next_permutation(arr.begin(), arr.end())); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>문제는 코틀린 구현하다가 발생했는데, 처음에는 아래처럼 구현했다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fun&lt;/span> &lt;span style="color:#89b4fa">permute&lt;/span>(list: MutableList&amp;lt;Int&amp;gt;, start: Int, end: Int) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 기저 조건: 모든 위치가 결정되었을 때
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#6c7086;font-style:italic">// 현재 순열을 출력하고 종료
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> (start &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> end) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(list.joinToString(&lt;span style="color:#a6e3a1">&amp;#34; &amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 현재 위치(start)에 가능한 모든 원소 배치해보기
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">for&lt;/span> (i &lt;span style="color:#cba6f7">in&lt;/span> start&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>end) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// start 위치와 i 위치의 원소 교환
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#6c7086;font-style:italic">// 예: list=[1,2,4,3], start=0, i=0 → 교환 후 [1,2,4,3] (변화 없음)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> list[start] = list[i].also { list[i] = list[start] }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 다음 위치(start+1)부터 재귀적으로 순열 생성
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#6c7086;font-style:italic">// 예: permute([1,2,4,3], 1, 3) 호출
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> permute(list, start + &lt;span style="color:#fab387">1&lt;/span>, end)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 백트래킹: 원래 상태로 복원
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#6c7086;font-style:italic">// 예: 다시 list=[1,2,4,3]로 복원
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> list[start] = list[i].also { list[i] = list[start] }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>요거 틀려서 찾아봤는데, 사전식 정렬이 필요했다. (위 방식은 순서를 보장하지 않음)&lt;/li>
&lt;/ul>
&lt;p>순서도&lt;/p></description></item><item><title>간단한 조합2</title><link>https://smallzoodev.netlify.app/_wiki/boj-p1759/</link><pubDate>Mon, 28 Apr 2025 17:19:56 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p1759/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/CodingInterviewCpp/blob/main/src/problems/baekjoon/p1759/Main.cpp">cpp soulution&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/SmallzooDev/CodingInterviewKotlin/blob/main/src/main/kotlin/problems/baekjoon/p1759/Main.kt">kotlin solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>그냥 간단한 조합 구현 문제 2&lt;/li>
&lt;li>조합은 그냥 구하고, valid 이후 출력해주는 정도&lt;/li>
&lt;li>변수를 너무 난잡하게 써서 습관적으로 정리해야할 것 같다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">bool&lt;/span> &lt;span style="color:#89b4fa">is_valid_password&lt;/span>(vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">char&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>chars) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> vowel_count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> consonant_count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">char&lt;/span> &lt;span style="color:#89dceb">c&lt;/span> : chars) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (c &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;a&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> c &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;e&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> c &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;i&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> c &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;o&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> c &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;u&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vowel_count&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> (c &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;a&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> c &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;z&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> consonant_count&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> (consonant_count &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> vowel_count &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">void&lt;/span> &lt;span style="color:#89b4fa">combination&lt;/span>(vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">char&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>characters, &lt;span style="color:#f38ba8">int&lt;/span> idx, &lt;span style="color:#f38ba8">int&lt;/span> level, vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">char&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>tmp) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (level &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> plen) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (is_valid_password(tmp)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">char&lt;/span> &lt;span style="color:#89dceb">c&lt;/span> : tmp) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> c;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;\n&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> idx; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> characters.size(); i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp.push_back(characters[i]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> combination(characters, i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>, level &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>, tmp);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp.pop_back();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>cantore 재귀</title><link>https://smallzoodev.netlify.app/_wiki/boj-p4779/</link><pubDate>Mon, 28 Apr 2025 17:17:29 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p4779/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/CodingInterviewCpp/blob/main/src/problems/baekjoon/p4779/Main.cpp">cpp soulution&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/SmallzooDev/CodingInterviewKotlin/blob/main/src/main/kotlin/problems/baekjoon/p4779/Main.kt">kotlin solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>재귀 구현 문제&lt;/li>
&lt;li>bottomup 방식도 있는데 시간복잡도는 똑같아서 그냥 했다.&lt;/li>
&lt;/ul></description></item><item><title>Combination</title><link>https://smallzoodev.netlify.app/_wiki/boj-p6603/</link><pubDate>Mon, 28 Apr 2025 17:06:49 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/boj-p6603/</guid><description>&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/CodingInterviewCpp/blob/main/src/problems/baekjoon/p6603/Main.cpp">cpp soulution&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/SmallzooDev/CodingInterviewKotlin/blob/main/src/main/kotlin/problems/baekjoon/p6603/Main.kt">kotlin solution&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="memo">Memo&lt;/h2>
&lt;ul>
&lt;li>그냥 간단한 조합 구현 문제&lt;/li>
&lt;li>cpp는 특징적인건 없고 그냥 재귀로 했다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fun&lt;/span> &lt;span style="color:#89b4fa">List&lt;/span>&amp;lt;Int&amp;gt;.findLottoCombinations(result: MutableList&amp;lt;Int&amp;gt; = mutableListOf(), index: Int = &lt;span style="color:#fab387">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (result.size &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">6&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println(result.joinToString(&lt;span style="color:#a6e3a1">&amp;#34; &amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (result.size + (size - index) &amp;lt; &lt;span style="color:#fab387">6&lt;/span>) &lt;span style="color:#cba6f7">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (i &lt;span style="color:#cba6f7">in&lt;/span> index until size) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result.add(&lt;span style="color:#cba6f7">this&lt;/span>[i])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> findLottoCombinations(result, i + &lt;span style="color:#fab387">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result.removeAt(result.lastIndex)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fun&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() = with(BufferedReader(InputStreamReader(&lt;span style="color:#f9e2af">System&lt;/span>.`in`))) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> generateSequence { readLine() }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .takeWhile { &lt;span style="color:#cba6f7">it&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;0&amp;#34;&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .forEach { line &lt;span style="color:#89dceb;font-weight:bold">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">numbers&lt;/span> = line.split(&lt;span style="color:#a6e3a1">&amp;#34; &amp;#34;&lt;/span>).map { &lt;span style="color:#cba6f7">it&lt;/span>.toInt() }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> numbers.drop(&lt;span style="color:#fab387">1&lt;/span>).findLottoCombinations()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> println()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>확장함수로 구현해두면 코드가 예뻐지는 것 같다.&lt;/li>
&lt;/ul></description></item><item><title>코딩 인터뷰 연습 🧩</title><link>https://smallzoodev.netlify.app/_wiki/competitive-programming-index/</link><pubDate>Mon, 28 Apr 2025 16:58:11 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/competitive-programming-index/</guid><description>매일 두?문제 네?가지 풀이</description></item><item><title>코틀린 코루틴 👾</title><link>https://smallzoodev.netlify.app/_wiki/kotlin-coroutines/</link><pubDate>Mon, 28 Apr 2025 16:58:11 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/kotlin-coroutines/</guid><description>kotlin coroutines 책 정리</description></item><item><title>코틀린 함수형 프로그래밍</title><link>https://smallzoodev.netlify.app/_wiki/kotlin-functional/</link><pubDate>Sun, 27 Apr 2025 11:20:59 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/kotlin-functional/</guid><description>&lt;h2 id="함수-타입">함수 타입&lt;/h2>
&lt;hr>
&lt;h3 id="함수-타입-정의">함수 타입 정의&lt;/h3>
&lt;ul>
&lt;li>(T) -&amp;gt; Boolean : Boolean을 반환하는 함수 Predicate&lt;/li>
&lt;li>(T) -&amp;gt; R : 값 하나를 다른 값으로 변환하는 함수 transfrom&lt;/li>
&lt;li>(T) -&amp;gt; Unit : Unit을 반환하는 함수 operation&lt;/li>
&lt;/ul>
&lt;h3 id="함수-타입-활용">함수 타입 활용&lt;/h3>
&lt;ul>
&lt;li>invoke라는 단 하나의 메서드만 제공함, 명시적 invoke호출과 ()연산자로 호출&lt;/li>
&lt;li>함수타입 파라미터를 ()? 로 감싸서 널러블함을 표현할 수 있음 (이경우는 명시적 invoke만 가능)&lt;/li>
&lt;/ul>
&lt;h3 id="named-parameter">named parameter&lt;/h3>
&lt;ul>
&lt;li>함수 타입을 정의 할 때 &amp;rsquo;named parameter&amp;rsquo;를 사용 가능&lt;/li>
&lt;li>오직 개발 편의를 위한 것&lt;/li>
&lt;/ul>
&lt;h2 id="익명-함수">익명 함수&lt;/h2>
&lt;hr>
&lt;ul>
&lt;li>익명함수는 함수 타입 객체를 반환하는 표현식&lt;/li>
&lt;li>generic, default parameter는 지원하지 않음&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">val&lt;/span> &lt;span style="color:#fab387">add2&lt;/span> = &lt;span style="color:#cba6f7">fun&lt;/span>(a: Int, b: Int) = a + b
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>익명함수 자체는 요즘 사용하지 않는다고 함
&lt;ul>
&lt;li>람다가 더 짧고 지원이 더 잘됨&lt;/li>
&lt;li>인텔리제이는 람다만 힌트를 제공&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>그래도 아래와 같은 상황에는 아직 유용
&lt;ul>
&lt;li>return 범위 명확히 구분하고 싶을 때&lt;/li>
&lt;li>타입 명시적 선언 (람다보다 깔끔)&lt;/li>
&lt;li>return을 명시적으로 사용해야 할 때&lt;/li>
&lt;li>고차함수 인자가 2개 이상이고 복잡할 때&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="람다-표현식">람다 표현식&lt;/h2>
&lt;hr>
&lt;blockquote>
&lt;p>코틀린에서 람다 표현식(lambda expression)은 return을 허용하지 않는 이유는, 람다가 그 자체로 “독립적인 실행 흐름”을 갖는 함수가 아니라, “호출되는 컨텍스트에 의존하는 작은 코드 블록”이기 때문입니다. 즉, 람다 안에서 return을 자유롭게 허용해버리면, 람다를 호출하는 “바깥 함수” 전체의 흐름까지 예측 불가능하게 망칠 수 있기 때문에, 명확한 제약을 둔 것입니다.&lt;/p></description></item><item><title>cpp ps용 기본 문법 리마인드 💡</title><link>https://smallzoodev.netlify.app/_wiki/cpp-ps-basic/</link><pubDate>Sat, 26 Apr 2025 23:54:47 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/cpp-ps-basic/</guid><description>&lt;h1 id="c-grammar-and-syntax-guide-for-coding-interviews-algorithms--ds">C++ Grammar and Syntax Guide for Coding Interviews (Algorithms &amp;amp; DS)&lt;/h1>
&lt;h2 id="core-data-types-and-variables">Core Data Types and Variables&lt;/h2>
&lt;h3 id="basic-types">Basic Types&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">5&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Integer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">long&lt;/span> &lt;span style="color:#f38ba8">long&lt;/span> bigNum &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1LL&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span>&lt;span style="color:#fab387">60&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Large integer (note LL suffix)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">double&lt;/span> y &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">3.14&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Double precision floating point
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> flag &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">true&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Boolean
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">char&lt;/span> c &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;A&amp;#39;&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Character
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>string s &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Hello&amp;#34;&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// String (requires #include &amp;lt;string&amp;gt;)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="type-modifiers">Type Modifiers&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">unsigned&lt;/span> &lt;span style="color:#f38ba8">int&lt;/span> positiveOnly &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">100&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Only non-negative values
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">const&lt;/span> &lt;span style="color:#f38ba8">int&lt;/span> FIXED &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">10&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Cannot be modified after initialization
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="type-aliases">Type Aliases&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">typedef&lt;/span> &lt;span style="color:#f38ba8">long&lt;/span> &lt;span style="color:#f38ba8">long&lt;/span> ll; &lt;span style="color:#6c7086;font-style:italic">// Old style type alias
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">using&lt;/span> ll &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#f38ba8">long&lt;/span> &lt;span style="color:#f38ba8">long&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Modern style type alias (preferred)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="auto-type-deduction">Auto Type Deduction&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">auto&lt;/span> num &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">10&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Compiler deduces type (int in this case)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> it &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> myVector.begin(); &lt;span style="color:#6c7086;font-style:italic">// Iterator type automatically deduced
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="operators-and-expressions">Operators and Expressions&lt;/h2>
&lt;h3 id="arithmetic-operators">Arithmetic Operators&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">5&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">3&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Addition: 8
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> b &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">5&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">3&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Subtraction: 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> c &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">5&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#fab387">3&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Multiplication: 15
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> d &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">5&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">/&lt;/span> &lt;span style="color:#fab387">3&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Integer division: 1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> e &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">5&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#fab387">3&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Modulo (remainder): 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">double&lt;/span> f &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">5.0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">/&lt;/span>&lt;span style="color:#fab387">3&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Floating-point division: 1.6666...
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="compound-assignment">Compound Assignment&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>a &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">2&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Same as a = a + 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>a &lt;span style="color:#89dceb;font-weight:bold">-=&lt;/span> &lt;span style="color:#fab387">2&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Same as a = a - 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>a &lt;span style="color:#89dceb;font-weight:bold">*=&lt;/span> &lt;span style="color:#fab387">2&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Same as a = a * 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>a &lt;span style="color:#89dceb;font-weight:bold">/=&lt;/span> &lt;span style="color:#fab387">2&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Same as a = a / 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>a &lt;span style="color:#89dceb;font-weight:bold">%=&lt;/span> &lt;span style="color:#fab387">2&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Same as a = a % 2
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="incrementdecrement">Increment/Decrement&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> b &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>a; &lt;span style="color:#6c7086;font-style:italic">// Pre-increment: a becomes 6, b becomes 6
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> c &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> a&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Post-increment: c becomes 6, then a becomes 7
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> d &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">--&lt;/span>a; &lt;span style="color:#6c7086;font-style:italic">// Pre-decrement: a becomes 6, d becomes 6
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> e &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> a&lt;span style="color:#89dceb;font-weight:bold">--&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Post-decrement: e becomes 6, then a becomes 5
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="comparison-operators">Comparison Operators&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">bool&lt;/span> isEqual &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (a &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> b); &lt;span style="color:#6c7086;font-style:italic">// Equal to
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> isNotEqual &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (a &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> b); &lt;span style="color:#6c7086;font-style:italic">// Not equal to
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> isGreater &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (a &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> b); &lt;span style="color:#6c7086;font-style:italic">// Greater than
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> isLess &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (a &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> b); &lt;span style="color:#6c7086;font-style:italic">// Less than
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> isGreaterEq &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (a &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> b); &lt;span style="color:#6c7086;font-style:italic">// Greater than or equal to
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> isLessEq &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (a &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> b); &lt;span style="color:#6c7086;font-style:italic">// Less than or equal to
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="logical-operators">Logical Operators&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">bool&lt;/span> andResult &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (a &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> b &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Logical AND (short-circuit)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> orResult &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (a &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> b &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Logical OR (short-circuit)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> notResult &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>a; &lt;span style="color:#6c7086;font-style:italic">// Logical NOT
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="bitwise-operators">Bitwise Operators&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> bitwiseAnd &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> b; &lt;span style="color:#6c7086;font-style:italic">// Bitwise AND
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> bitwiseOr &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> b; &lt;span style="color:#6c7086;font-style:italic">// Bitwise OR
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> bitwiseXor &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">^&lt;/span> b; &lt;span style="color:#6c7086;font-style:italic">// Bitwise XOR
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> bitwiseNot &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">~&lt;/span>a; &lt;span style="color:#6c7086;font-style:italic">// Bitwise NOT
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> leftShift &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#fab387">2&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Left shift (multiply by 2^2)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> rightShift &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#fab387">2&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Right shift (divide by 2^2)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ternary-operator">Ternary Operator&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> max &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (a &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> b) &lt;span style="color:#89dceb;font-weight:bold">?&lt;/span> &lt;span style="color:#89dceb">a&lt;/span> : b; &lt;span style="color:#6c7086;font-style:italic">// If a &amp;gt; b, max = a; otherwise max = b
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="control-flow">Control Flow&lt;/h2>
&lt;h3 id="conditionals">Conditionals&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// If-else statement
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">if&lt;/span> (x &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Positive&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#cba6f7">else&lt;/span> &lt;span style="color:#89b4fa">if&lt;/span> (x &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Negative&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Zero&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Switch statement
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">switch&lt;/span> (x) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> &lt;span style="color:#fab387">1&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;One&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">case&lt;/span> &lt;span style="color:#fab387">2&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Two&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">default&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Other&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="loops">Loops&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// For loop
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// Body
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Range-based for loop (C++11)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#cba6f7">auto&lt;/span> &lt;span style="color:#89dceb">element&lt;/span> : container) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// Process each element
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// While loop
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">while&lt;/span> (condition) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// Body
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Do-while loop
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">do&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// Body
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>} &lt;span style="color:#cba6f7">while&lt;/span> (condition);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="loop-control">Loop Control&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> n; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (condition1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">continue&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Skip current iteration
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (condition2)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">break&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Exit loop completely
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="functions">Functions&lt;/h2>
&lt;h3 id="basic-function">Basic Function&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Declaration and definition
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">add&lt;/span>(&lt;span style="color:#f38ba8">int&lt;/span> a, &lt;span style="color:#f38ba8">int&lt;/span> b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Usage
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> sum &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> add(&lt;span style="color:#fab387">5&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// sum = 8
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="default-parameters">Default Parameters&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">multiply&lt;/span>(&lt;span style="color:#f38ba8">int&lt;/span> a, &lt;span style="color:#f38ba8">int&lt;/span> b &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> product1 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> multiply(&lt;span style="color:#fab387">5&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// b defaults to 1, result = 5
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> product2 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> multiply(&lt;span style="color:#fab387">5&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// b is 3, result = 15
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="function-overloading">Function Overloading&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">max&lt;/span>(&lt;span style="color:#f38ba8">int&lt;/span> a, &lt;span style="color:#f38ba8">int&lt;/span> b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> (a &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> b) &lt;span style="color:#89dceb;font-weight:bold">?&lt;/span> &lt;span style="color:#89dceb">a&lt;/span> : b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">double&lt;/span> &lt;span style="color:#89b4fa">max&lt;/span>(&lt;span style="color:#f38ba8">double&lt;/span> a, &lt;span style="color:#f38ba8">double&lt;/span> b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> (a &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> b) &lt;span style="color:#89dceb;font-weight:bold">?&lt;/span> &lt;span style="color:#89dceb">a&lt;/span> : b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="pass-by-reference">Pass by Reference&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">void&lt;/span> &lt;span style="color:#89b4fa">swap&lt;/span>(&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> a, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> temp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> a;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> b &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> temp;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">5&lt;/span>, y &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>swap(x, y); &lt;span style="color:#6c7086;font-style:italic">// After this: x = 10, y = 5
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="lambda-functions-c11">Lambda Functions (C++11)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Basic syntax: [capture](parameters) -&amp;gt; returnType { body }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> add &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [](&lt;span style="color:#f38ba8">int&lt;/span> a, &lt;span style="color:#f38ba8">int&lt;/span> b) &lt;span style="color:#89dceb;font-weight:bold">-&amp;gt;&lt;/span> &lt;span style="color:#f38ba8">int&lt;/span> { &lt;span style="color:#cba6f7">return&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> b; };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Capture by value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> multiplier &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">auto&lt;/span> multiply &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [multiplier](&lt;span style="color:#f38ba8">int&lt;/span> x) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> multiplier; };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Capture by reference
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> increment &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>multiplier]() { multiplier&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>; };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Capture all by value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> lambda1 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>]() { &lt;span style="color:#6c7086;font-style:italic">/* can use all variables by value */&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Capture all by reference
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> lambda2 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>]() { &lt;span style="color:#6c7086;font-style:italic">/* can use all variables by reference */&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Capture specific variables with different methods
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> lambda3 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [x, &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>y]() { &lt;span style="color:#6c7086;font-style:italic">/* x by value, y by reference */&lt;/span> };
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="function-pointers-and-stdfunction">Function Pointers and std::function&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#include&lt;/span> &lt;span style="color:#6c7086;font-weight:bold;font-style:italic">&amp;lt;functional&amp;gt;&lt;/span>&lt;span style="color:#6c7086;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Function pointer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> (&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>funcPtr)(&lt;span style="color:#f38ba8">int&lt;/span>, &lt;span style="color:#f38ba8">int&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> add;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// std::function object (more versatile)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>std&lt;span style="color:#89dceb;font-weight:bold">::&lt;/span>function&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>(&lt;span style="color:#f38ba8">int&lt;/span>, &lt;span style="color:#f38ba8">int&lt;/span>)&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> func &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> add;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Can also store lambdas
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>std&lt;span style="color:#89dceb;font-weight:bold">::&lt;/span>function&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>(&lt;span style="color:#f38ba8">int&lt;/span>)&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> doubler &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [](&lt;span style="color:#f38ba8">int&lt;/span> x) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#fab387">2&lt;/span>; };
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="arrays-and-strings">Arrays and Strings&lt;/h2>
&lt;h3 id="arrays">Arrays&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Declaration and initialization
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> arr1[&lt;span style="color:#fab387">5&lt;/span>]; &lt;span style="color:#6c7086;font-style:italic">// Uninitialized array of 5 integers
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> arr2[&lt;span style="color:#fab387">5&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>}; &lt;span style="color:#6c7086;font-style:italic">// Initialized array
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> arr3[] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>}; &lt;span style="color:#6c7086;font-style:italic">// Size deduced from initializer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> arr4[&lt;span style="color:#fab387">5&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>}; &lt;span style="color:#6c7086;font-style:italic">// Partial initialization (rest are 0)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Multidimensional arrays
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> matrix[&lt;span style="color:#fab387">3&lt;/span>][&lt;span style="color:#fab387">4&lt;/span>]; &lt;span style="color:#6c7086;font-style:italic">// 3×4 matrix (3 rows, 4 columns)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> cube[&lt;span style="color:#fab387">3&lt;/span>][&lt;span style="color:#fab387">3&lt;/span>][&lt;span style="color:#fab387">3&lt;/span>]; &lt;span style="color:#6c7086;font-style:italic">// 3D array
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Accessing elements
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> first &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> arr2[&lt;span style="color:#fab387">0&lt;/span>]; &lt;span style="color:#6c7086;font-style:italic">// First element (1-based indexing)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> last &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> arr2[&lt;span style="color:#fab387">4&lt;/span>]; &lt;span style="color:#6c7086;font-style:italic">// Last element
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Common error: arrays don&amp;#39;t track their size
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> size &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">sizeof&lt;/span>(arr2) &lt;span style="color:#89dceb;font-weight:bold">/&lt;/span> &lt;span style="color:#cba6f7">sizeof&lt;/span>(arr2[&lt;span style="color:#fab387">0&lt;/span>]); &lt;span style="color:#6c7086;font-style:italic">// Calculate array size
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="c-style-strings">C-style Strings&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">char&lt;/span> str1[] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Hello&amp;#34;&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Null-terminated character array
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">char&lt;/span> str2[&lt;span style="color:#fab387">10&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Hello&amp;#34;&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// With explicit size
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">const&lt;/span> &lt;span style="color:#f38ba8">char&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> str3 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Hello&amp;#34;&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// String literal (read-only)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// String operations (require &amp;lt;cstring&amp;gt;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#6c7086;font-style:italic">#include&lt;/span> &lt;span style="color:#6c7086;font-weight:bold;font-style:italic">&amp;lt;cstring&amp;gt;&lt;/span>&lt;span style="color:#6c7086;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>size_t len &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> strlen(str1); &lt;span style="color:#6c7086;font-style:italic">// Length: 5
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">char&lt;/span> concat[&lt;span style="color:#fab387">20&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>strcpy(concat, str1); &lt;span style="color:#6c7086;font-style:italic">// Copy str1 to concat
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>strcat(concat, &lt;span style="color:#a6e3a1">&amp;#34; World&amp;#34;&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Append to concat
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> comp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> strcmp(str1, str2); &lt;span style="color:#6c7086;font-style:italic">// Compare strings
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="c-strings">C++ Strings&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#include&lt;/span> &lt;span style="color:#6c7086;font-weight:bold;font-style:italic">&amp;lt;string&amp;gt;&lt;/span>&lt;span style="color:#6c7086;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Declaration and initialization
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>string s1; &lt;span style="color:#6c7086;font-style:italic">// Empty string
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>string s2 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Hello&amp;#34;&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// From string literal
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>string &lt;span style="color:#89b4fa">s3&lt;/span>(&lt;span style="color:#fab387">5&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;a&amp;#39;&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// String of 5 &amp;#39;a&amp;#39;s: &amp;#34;aaaaa&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>string s4 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s2; &lt;span style="color:#6c7086;font-style:italic">// Copy of s2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Operations
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> length &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s2.length(); &lt;span style="color:#6c7086;font-style:italic">// or s2.size()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">char&lt;/span> first &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s2[&lt;span style="color:#fab387">0&lt;/span>]; &lt;span style="color:#6c7086;font-style:italic">// Access character (no bounds checking)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">char&lt;/span> safe &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s2.at(&lt;span style="color:#fab387">0&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Access with bounds checking
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>string concat &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s2 &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34; World&amp;#34;&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// String concatenation
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>s2 &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34; World&amp;#34;&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Append to s2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>string sub &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s2.substr(&lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Substring (starting at 0, length 5)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Searching
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>size_t pos &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s2.find(&lt;span style="color:#a6e3a1">&amp;#34;llo&amp;#34;&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Find substring (returns position or string::npos)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> contains &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s2.find(&lt;span style="color:#a6e3a1">&amp;#34;llo&amp;#34;&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> string&lt;span style="color:#89dceb;font-weight:bold">::&lt;/span>npos; &lt;span style="color:#6c7086;font-style:italic">// Check if contains substring
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Comparison
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> isEqual &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (s2 &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> s3); &lt;span style="color:#6c7086;font-style:italic">// String comparison
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> isLess &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (s2 &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> s3); &lt;span style="color:#6c7086;font-style:italic">// Lexicographical comparison
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Modification
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>s2.replace(&lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#34;J&amp;#34;&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Replace &amp;#34;H&amp;#34; with &amp;#34;J&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>s2.erase(&lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Remove first character
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>s2.insert(&lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#34;H&amp;#34;&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Insert at position 0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>s2.clear(); &lt;span style="color:#6c7086;font-style:italic">// Empty the string
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> isEmpty &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s2.empty(); &lt;span style="color:#6c7086;font-style:italic">// Check if empty
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="stl-containers">STL Containers&lt;/h2>
&lt;h3 id="vector">Vector&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#include&lt;/span> &lt;span style="color:#6c7086;font-weight:bold;font-style:italic">&amp;lt;vector&amp;gt;&lt;/span>&lt;span style="color:#6c7086;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Declaration and initialization
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> v1; &lt;span style="color:#6c7086;font-style:italic">// Empty vector
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> v2(&lt;span style="color:#fab387">5&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Vector of 5 zeros
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> v3(&lt;span style="color:#fab387">5&lt;/span>, &lt;span style="color:#fab387">10&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Vector of five 10s
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> v4 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>}; &lt;span style="color:#6c7086;font-style:italic">// Using initializer list
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> v5(v4); &lt;span style="color:#6c7086;font-style:italic">// Copy of v4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> v6(v4.begin(), v4.begin()&lt;span style="color:#89dceb;font-weight:bold">+&lt;/span>&lt;span style="color:#fab387">3&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// First 3 elements of v4
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Size operations
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> size &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> v4.size(); &lt;span style="color:#6c7086;font-style:italic">// Number of elements
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> isEmpty &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> v4.empty(); &lt;span style="color:#6c7086;font-style:italic">// Check if empty
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>v4.resize(&lt;span style="color:#fab387">10&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Resize to 10 elements
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>v4.resize(&lt;span style="color:#fab387">12&lt;/span>, &lt;span style="color:#fab387">7&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Add 2 more elements with value 7
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> capacity &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> v4.capacity(); &lt;span style="color:#6c7086;font-style:italic">// Current capacity
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>v4.reserve(&lt;span style="color:#fab387">20&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Reserve space for 20 elements
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>v4.shrink_to_fit(); &lt;span style="color:#6c7086;font-style:italic">// Reduce capacity to match size
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Element access
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> first &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> v4[&lt;span style="color:#fab387">0&lt;/span>]; &lt;span style="color:#6c7086;font-style:italic">// First element (no bounds checking)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> safe &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> v4.at(&lt;span style="color:#fab387">0&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// With bounds checking
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> front &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> v4.front(); &lt;span style="color:#6c7086;font-style:italic">// First element
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> back &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> v4.back(); &lt;span style="color:#6c7086;font-style:italic">// Last element
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> data &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> v4.data(); &lt;span style="color:#6c7086;font-style:italic">// Pointer to underlying array
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Modifiers
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>v4.push_back(&lt;span style="color:#fab387">6&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Add element to end
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>v4.pop_back(); &lt;span style="color:#6c7086;font-style:italic">// Remove last element
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>v4.insert(v4.begin() &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">10&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Insert 10 at position 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>v4.insert(v4.begin() &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">10&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Insert 3 copies of 10
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>v4.insert(v4.begin() &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">2&lt;/span>, {&lt;span style="color:#fab387">7&lt;/span>, &lt;span style="color:#fab387">8&lt;/span>, &lt;span style="color:#fab387">9&lt;/span>}); &lt;span style="color:#6c7086;font-style:italic">// Insert multiple elements
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>v4.erase(v4.begin() &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">2&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Remove element at position 2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>v4.erase(v4.begin(), v4.begin() &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">3&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Remove range of elements
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>v4.clear(); &lt;span style="color:#6c7086;font-style:italic">// Remove all elements
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>().swap(v4); &lt;span style="color:#6c7086;font-style:italic">// Clear and deallocate memory
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Iterating
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#cba6f7">auto&lt;/span> it &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> v4.begin(); it &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> v4.end(); &lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>it) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>it &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34; &amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Range-based loop (C++11)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89dceb">x&lt;/span> : v4) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34; &amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Algorithm example (sort)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#6c7086;font-style:italic">#include&lt;/span> &lt;span style="color:#6c7086;font-weight:bold;font-style:italic">&amp;lt;algorithm&amp;gt;&lt;/span>&lt;span style="color:#6c7086;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>sort(v4.begin(), v4.end()); &lt;span style="color:#6c7086;font-style:italic">// Sort in ascending order
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>sort(v4.begin(), v4.end(), greater&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>()); &lt;span style="color:#6c7086;font-style:italic">// Sort in descending order
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 2D vector
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> matrix(&lt;span style="color:#fab387">3&lt;/span>, vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>(&lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>)); &lt;span style="color:#6c7086;font-style:italic">// 3×4 matrix of zeros
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> val &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> matrix[&lt;span style="color:#fab387">1&lt;/span>][&lt;span style="color:#fab387">2&lt;/span>]; &lt;span style="color:#6c7086;font-style:italic">// Access element
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="pair-and-tuple">Pair and Tuple&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#include&lt;/span> &lt;span style="color:#6c7086;font-weight:bold;font-style:italic">&amp;lt;utility&amp;gt;&lt;/span>&lt;span style="color:#6c7086;font-style:italic"> &lt;/span>&lt;span style="color:#6c7086;font-style:italic">// For pair
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#6c7086;font-style:italic">#include&lt;/span> &lt;span style="color:#6c7086;font-weight:bold;font-style:italic">&amp;lt;tuple&amp;gt;&lt;/span>&lt;span style="color:#6c7086;font-style:italic"> &lt;/span>&lt;span style="color:#6c7086;font-style:italic">// For tuple
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Pair
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>pair&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>, string&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> p1 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#34;one&amp;#34;&lt;/span>}; &lt;span style="color:#6c7086;font-style:italic">// Create pair
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>pair&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>, string&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> p2 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> make_pair(&lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#34;two&amp;#34;&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Alternative creation
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> first &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> p1.first; &lt;span style="color:#6c7086;font-style:italic">// Access first element
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>string second &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> p1.second; &lt;span style="color:#6c7086;font-style:italic">// Access second element
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> isLess &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (p1 &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> p2); &lt;span style="color:#6c7086;font-style:italic">// Lexicographical comparison
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Tuple
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>tuple&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>, string, &lt;span style="color:#f38ba8">double&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> t1 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#34;one&amp;#34;&lt;/span>, &lt;span style="color:#fab387">1.1&lt;/span>}; &lt;span style="color:#6c7086;font-style:italic">// Create tuple
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>tuple&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>, string, &lt;span style="color:#f38ba8">double&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> t2 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> make_tuple(&lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#34;two&amp;#34;&lt;/span>, &lt;span style="color:#fab387">2.2&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> tFirst &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> get&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>(t1); &lt;span style="color:#6c7086;font-style:italic">// Access elements by index
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>string tSecond &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> get&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#fab387">1&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>(t1);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">double&lt;/span> tThird &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> get&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#fab387">2&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>(t1);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="set-and-multiset">Set and Multiset&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#include&lt;/span> &lt;span style="color:#6c7086;font-weight:bold;font-style:italic">&amp;lt;set&amp;gt;&lt;/span>&lt;span style="color:#6c7086;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Set (sorted, no duplicates)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>set&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> s1; &lt;span style="color:#6c7086;font-style:italic">// Empty set
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>set&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> s2 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>}; &lt;span style="color:#6c7086;font-style:italic">// Using initializer list
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>set&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>, greater&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> s3; &lt;span style="color:#6c7086;font-style:italic">// Custom comparison (descending)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Size operations
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> size &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s2.size(); &lt;span style="color:#6c7086;font-style:italic">// Number of elements
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> isEmpty &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s2.empty(); &lt;span style="color:#6c7086;font-style:italic">// Check if empty
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Modifiers
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>s2.insert(&lt;span style="color:#fab387">6&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Insert element
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s2.insert(&lt;span style="color:#fab387">6&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Returns pair&amp;lt;iterator, bool&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> wasInserted &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> result.second; &lt;span style="color:#6c7086;font-style:italic">// Check if inserted
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>s2.erase(&lt;span style="color:#fab387">3&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Remove element by value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>s2.erase(s2.begin()); &lt;span style="color:#6c7086;font-style:italic">// Remove element by iterator
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>s2.erase(s2.begin(), s2.find(&lt;span style="color:#fab387">4&lt;/span>)); &lt;span style="color:#6c7086;font-style:italic">// Remove range
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>s2.clear(); &lt;span style="color:#6c7086;font-style:italic">// Remove all elements
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Lookup
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> it &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s2.find(&lt;span style="color:#fab387">3&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Find element
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> contains &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (it &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> s2.end()); &lt;span style="color:#6c7086;font-style:italic">// Check if found
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s2.count(&lt;span style="color:#fab387">3&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Count occurrences (0 or 1)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> lower &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s2.lower_bound(&lt;span style="color:#fab387">3&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// First element &amp;gt;= 3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> upper &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s2.upper_bound(&lt;span style="color:#fab387">3&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// First element &amp;gt; 3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> range &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s2.equal_range(&lt;span style="color:#fab387">3&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Both bounds as pair
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Multiset (sorted, allows duplicates)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>multiset&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> ms &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>}; &lt;span style="color:#6c7086;font-style:italic">// Create multiset
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>ms.insert(&lt;span style="color:#fab387">3&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Insert another 3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> count3 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> ms.count(&lt;span style="color:#fab387">3&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Count of 3s (now 4)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="map-and-multimap">Map and Multimap&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#include&lt;/span> &lt;span style="color:#6c7086;font-weight:bold;font-style:italic">&amp;lt;map&amp;gt;&lt;/span>&lt;span style="color:#6c7086;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Map (sorted key-value pairs, unique keys)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>map&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>string, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> m1; &lt;span style="color:#6c7086;font-style:italic">// Empty map
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>map&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>string, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> m2 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {{&lt;span style="color:#a6e3a1">&amp;#34;one&amp;#34;&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>}, {&lt;span style="color:#a6e3a1">&amp;#34;two&amp;#34;&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>}}; &lt;span style="color:#6c7086;font-style:italic">// Using initializer list
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>map&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>string, &lt;span style="color:#f38ba8">int&lt;/span>, greater&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>string&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> m3; &lt;span style="color:#6c7086;font-style:italic">// Custom key comparison
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Element access
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> value &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> m2[&lt;span style="color:#a6e3a1">&amp;#34;one&amp;#34;&lt;/span>]; &lt;span style="color:#6c7086;font-style:italic">// Access by key (inserts if not found)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> valueOrDefault &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> m2.value_or(&lt;span style="color:#a6e3a1">&amp;#34;three&amp;#34;&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Value or default if not found
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Size operations
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> size &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> m2.size(); &lt;span style="color:#6c7086;font-style:italic">// Number of elements
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> isEmpty &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> m2.empty(); &lt;span style="color:#6c7086;font-style:italic">// Check if empty
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Modifiers
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>m2[&lt;span style="color:#a6e3a1">&amp;#34;three&amp;#34;&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">3&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Insert or update
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>m2.insert({&lt;span style="color:#a6e3a1">&amp;#34;four&amp;#34;&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>}); &lt;span style="color:#6c7086;font-style:italic">// Insert only
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>m2.insert(make_pair(&lt;span style="color:#a6e3a1">&amp;#34;five&amp;#34;&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>)); &lt;span style="color:#6c7086;font-style:italic">// Alternative insertion
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> result &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> m2.insert({&lt;span style="color:#a6e3a1">&amp;#34;one&amp;#34;&lt;/span>, &lt;span style="color:#fab387">10&lt;/span>}); &lt;span style="color:#6c7086;font-style:italic">// Won&amp;#39;t insert if key exists
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> wasInserted &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> result.second; &lt;span style="color:#6c7086;font-style:italic">// Check if inserted
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>m2.erase(&lt;span style="color:#a6e3a1">&amp;#34;one&amp;#34;&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Remove by key
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>m2.erase(m2.begin()); &lt;span style="color:#6c7086;font-style:italic">// Remove by iterator
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>m2.erase(m2.begin(), m2.find(&lt;span style="color:#a6e3a1">&amp;#34;three&amp;#34;&lt;/span>)); &lt;span style="color:#6c7086;font-style:italic">// Remove range
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>m2.clear(); &lt;span style="color:#6c7086;font-style:italic">// Remove all elements
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Lookup
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> it &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> m2.find(&lt;span style="color:#a6e3a1">&amp;#34;one&amp;#34;&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Find element
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> contains &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (it &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> m2.end()); &lt;span style="color:#6c7086;font-style:italic">// Check if found
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> m2.count(&lt;span style="color:#a6e3a1">&amp;#34;one&amp;#34;&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Count occurrences (0 or 1)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> lower &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> m2.lower_bound(&lt;span style="color:#a6e3a1">&amp;#34;one&amp;#34;&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// First key &amp;gt;= &amp;#34;one&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> upper &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> m2.upper_bound(&lt;span style="color:#a6e3a1">&amp;#34;one&amp;#34;&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// First key &amp;gt; &amp;#34;one&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> range &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> m2.equal_range(&lt;span style="color:#a6e3a1">&amp;#34;one&amp;#34;&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Both bounds as pair
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Iterating
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#cba6f7">const&lt;/span> &lt;span style="color:#cba6f7">auto&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#89dceb">pair&lt;/span> : m2) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> pair.first &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;: &amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> pair.second &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Multimap (sorted key-value pairs, allows duplicate keys)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>multimap&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>string, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> mm &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {{&lt;span style="color:#a6e3a1">&amp;#34;one&amp;#34;&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>}, {&lt;span style="color:#a6e3a1">&amp;#34;two&amp;#34;&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>}, {&lt;span style="color:#a6e3a1">&amp;#34;one&amp;#34;&lt;/span>, &lt;span style="color:#fab387">10&lt;/span>}};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> countOne &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mm.count(&lt;span style="color:#a6e3a1">&amp;#34;one&amp;#34;&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Count of &amp;#34;one&amp;#34; keys (2)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="unordered-containers">Unordered Containers&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#include&lt;/span> &lt;span style="color:#6c7086;font-weight:bold;font-style:italic">&amp;lt;unordered_set&amp;gt;&lt;/span>&lt;span style="color:#6c7086;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#include&lt;/span> &lt;span style="color:#6c7086;font-weight:bold;font-style:italic">&amp;lt;unordered_map&amp;gt;&lt;/span>&lt;span style="color:#6c7086;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Unordered set (hash-based, no duplicates)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>unordered_set&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> us &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>us.insert(&lt;span style="color:#fab387">6&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// O(1) average insertion
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> contains &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (us.find(&lt;span style="color:#fab387">3&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> us.end()); &lt;span style="color:#6c7086;font-style:italic">// O(1) average lookup
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Unordered map (hash-based key-value pairs, unique keys)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>unordered_map&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>string, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> um &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {{&lt;span style="color:#a6e3a1">&amp;#34;one&amp;#34;&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>}, {&lt;span style="color:#a6e3a1">&amp;#34;two&amp;#34;&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>}};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>um[&lt;span style="color:#a6e3a1">&amp;#34;three&amp;#34;&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">3&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// O(1) average insertion
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> value &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> um[&lt;span style="color:#a6e3a1">&amp;#34;one&amp;#34;&lt;/span>]; &lt;span style="color:#6c7086;font-style:italic">// O(1) average lookup
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Hash table properties
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">float&lt;/span> loadFactor &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> us.load_factor(); &lt;span style="color:#6c7086;font-style:italic">// Current load factor
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">float&lt;/span> maxLoadFactor &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> us.max_load_factor(); &lt;span style="color:#6c7086;font-style:italic">// Max load factor
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>us.max_load_factor(&lt;span style="color:#fab387">0.7f&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Set max load factor
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>us.rehash(&lt;span style="color:#fab387">20&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Set minimum bucket count
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>us.reserve(&lt;span style="color:#fab387">15&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Reserve space for elements
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="stack">Stack&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#include&lt;/span> &lt;span style="color:#6c7086;font-weight:bold;font-style:italic">&amp;lt;stack&amp;gt;&lt;/span>&lt;span style="color:#6c7086;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Declaration and initialization
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>stack&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> st; &lt;span style="color:#6c7086;font-style:italic">// Empty stack
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Operations
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>st.push(&lt;span style="color:#fab387">1&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Add element to top
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>st.push(&lt;span style="color:#fab387">2&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Add another element
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> top &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> st.top(); &lt;span style="color:#6c7086;font-style:italic">// Access top element (2)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>st.pop(); &lt;span style="color:#6c7086;font-style:italic">// Remove top element
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> isEmpty &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> st.empty(); &lt;span style="color:#6c7086;font-style:italic">// Check if empty
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> size &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> st.size(); &lt;span style="color:#6c7086;font-style:italic">// Number of elements
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="queue">Queue&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#include&lt;/span> &lt;span style="color:#6c7086;font-weight:bold;font-style:italic">&amp;lt;queue&amp;gt;&lt;/span>&lt;span style="color:#6c7086;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Declaration and initialization
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>queue&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> q; &lt;span style="color:#6c7086;font-style:italic">// Empty queue
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Operations
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>q.push(&lt;span style="color:#fab387">1&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Add element to back
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>q.push(&lt;span style="color:#fab387">2&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Add another element
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> front &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> q.front(); &lt;span style="color:#6c7086;font-style:italic">// Access front element (1)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> back &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> q.back(); &lt;span style="color:#6c7086;font-style:italic">// Access back element (2)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>q.pop(); &lt;span style="color:#6c7086;font-style:italic">// Remove front element
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> isEmpty &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> q.empty(); &lt;span style="color:#6c7086;font-style:italic">// Check if empty
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> size &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> q.size(); &lt;span style="color:#6c7086;font-style:italic">// Number of elements
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="priority-queue">Priority Queue&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#include&lt;/span> &lt;span style="color:#6c7086;font-weight:bold;font-style:italic">&amp;lt;queue&amp;gt;&lt;/span>&lt;span style="color:#6c7086;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Declaration and initialization (max heap by default)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>priority_queue&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> pq; &lt;span style="color:#6c7086;font-style:italic">// Empty priority queue (max-heap)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>priority_queue&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>, vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>, greater&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> minpq; &lt;span style="color:#6c7086;font-style:italic">// Min-heap
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Operations
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>pq.push(&lt;span style="color:#fab387">3&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Add element
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>pq.push(&lt;span style="color:#fab387">1&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Add element
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>pq.push(&lt;span style="color:#fab387">4&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Add element
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> top &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> pq.top(); &lt;span style="color:#6c7086;font-style:italic">// Access top element (largest: 4)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>pq.pop(); &lt;span style="color:#6c7086;font-style:italic">// Remove top element
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> isEmpty &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> pq.empty(); &lt;span style="color:#6c7086;font-style:italic">// Check if empty
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> size &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> pq.size(); &lt;span style="color:#6c7086;font-style:italic">// Number of elements
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Custom comparison
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">struct&lt;/span> &lt;span style="color:#f9e2af">Compare&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">bool&lt;/span> &lt;span style="color:#89b4fa">operator&lt;/span>()(&lt;span style="color:#cba6f7">const&lt;/span> pair&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> a, &lt;span style="color:#cba6f7">const&lt;/span> pair&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> a.first &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> b.first; &lt;span style="color:#6c7086;font-style:italic">// Min-heap based on first element
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>priority_queue&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>pair&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>, vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>pair&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>, &lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span>, Compare&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> customPQ;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="deque">Deque&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#include&lt;/span> &lt;span style="color:#6c7086;font-weight:bold;font-style:italic">&amp;lt;deque&amp;gt;&lt;/span>&lt;span style="color:#6c7086;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Declaration and initialization
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>deque&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> dq; &lt;span style="color:#6c7086;font-style:italic">// Empty deque
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>deque&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> dq2 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>}; &lt;span style="color:#6c7086;font-style:italic">// Using initializer list
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Operations (all operations at both ends are efficient)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>dq.push_back(&lt;span style="color:#fab387">6&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Add to back
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>dq.push_front(&lt;span style="color:#fab387">0&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Add to front
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>dq.pop_back(); &lt;span style="color:#6c7086;font-style:italic">// Remove from back
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>dq.pop_front(); &lt;span style="color:#6c7086;font-style:italic">// Remove from front
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> front &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dq.front(); &lt;span style="color:#6c7086;font-style:italic">// Access front element
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> back &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dq.back(); &lt;span style="color:#6c7086;font-style:italic">// Access back element
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> element &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dq[&lt;span style="color:#fab387">2&lt;/span>]; &lt;span style="color:#6c7086;font-style:italic">// Random access
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> isEmpty &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dq.empty(); &lt;span style="color:#6c7086;font-style:italic">// Check if empty
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> size &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dq.size(); &lt;span style="color:#6c7086;font-style:italic">// Number of elements
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="stl-algorithms">STL Algorithms&lt;/h2>
&lt;h3 id="important-headers">Important Headers&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#include&lt;/span> &lt;span style="color:#6c7086;font-weight:bold;font-style:italic">&amp;lt;algorithm&amp;gt;&lt;/span>&lt;span style="color:#6c7086;font-style:italic"> &lt;/span>&lt;span style="color:#6c7086;font-style:italic">// Most algorithms
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#6c7086;font-style:italic">#include&lt;/span> &lt;span style="color:#6c7086;font-weight:bold;font-style:italic">&amp;lt;numeric&amp;gt;&lt;/span>&lt;span style="color:#6c7086;font-style:italic"> &lt;/span>&lt;span style="color:#6c7086;font-style:italic">// Numeric algorithms like accumulate
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#6c7086;font-style:italic">#include&lt;/span> &lt;span style="color:#6c7086;font-weight:bold;font-style:italic">&amp;lt;functional&amp;gt;&lt;/span>&lt;span style="color:#6c7086;font-style:italic"> &lt;/span>&lt;span style="color:#6c7086;font-style:italic">// Function objects
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="non-modifying-sequence-operations">Non-modifying Sequence Operations&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Find
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> it &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> find(v.begin(), v.end(), value); &lt;span style="color:#6c7086;font-style:italic">// Find value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> it &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> find_if(v.begin(), v.end(), &lt;span style="color:#6c7086;font-style:italic">// Find using predicate
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> [](&lt;span style="color:#f38ba8">int&lt;/span> x) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">10&lt;/span>; });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> count(v.begin(), v.end(), value); &lt;span style="color:#6c7086;font-style:italic">// Count occurrences
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> count_if(v.begin(), v.end(), &lt;span style="color:#6c7086;font-style:italic">// Count using predicate
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> [](&lt;span style="color:#f38ba8">int&lt;/span> x) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Comparison
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> allEven &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> all_of(v.begin(), v.end(), &lt;span style="color:#6c7086;font-style:italic">// Check if all meet condition
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> [](&lt;span style="color:#f38ba8">int&lt;/span> x) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">bool&lt;/span> anyEven &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> any_of(v.begin(), v.end(), &lt;span style="color:#6c7086;font-style:italic">// Check if any meets condition
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> [](&lt;span style="color:#f38ba8">int&lt;/span> x) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">bool&lt;/span> noneEven &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> none_of(v.begin(), v.end(), &lt;span style="color:#6c7086;font-style:italic">// Check if none meet condition
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> [](&lt;span style="color:#f38ba8">int&lt;/span> x) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Search
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> it &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> search(v1.begin(), v1.end(), &lt;span style="color:#6c7086;font-style:italic">// Find subsequence
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> v2.begin(), v2.end());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Min/Max
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> minElement &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> min_element(v.begin(), v.end()); &lt;span style="color:#6c7086;font-style:italic">// Iterator to minimum
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> maxElement &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> max_element(v.begin(), v.end()); &lt;span style="color:#6c7086;font-style:italic">// Iterator to maximum
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> [minIt, maxIt] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> minmax_element(v.begin(), v.end()); &lt;span style="color:#6c7086;font-style:italic">// Both at once
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="modifying-sequence-operations">Modifying Sequence Operations&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Copy
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>copy(src.begin(), src.end(), dest.begin()); &lt;span style="color:#6c7086;font-style:italic">// Copy range to destination
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>copy_if(src.begin(), src.end(), dest.begin(), &lt;span style="color:#6c7086;font-style:italic">// Copy with condition
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> [](&lt;span style="color:#f38ba8">int&lt;/span> x) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>copy_n(src.begin(), &lt;span style="color:#fab387">5&lt;/span>, dest.begin()); &lt;span style="color:#6c7086;font-style:italic">// Copy first n elements
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Transform
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>transform(src.begin(), src.end(), dest.begin(), &lt;span style="color:#6c7086;font-style:italic">// Apply function to each element
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> [](&lt;span style="color:#f38ba8">int&lt;/span> x) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#fab387">2&lt;/span>; });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>transform(src1.begin(), src1.end(), &lt;span style="color:#6c7086;font-style:italic">// Apply binary function
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> src2.begin(), dest.begin(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [](&lt;span style="color:#f38ba8">int&lt;/span> x, &lt;span style="color:#f38ba8">int&lt;/span> y) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> y; });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Generate and Fill
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>fill(v.begin(), v.end(), value); &lt;span style="color:#6c7086;font-style:italic">// Fill range with value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>fill_n(v.begin(), &lt;span style="color:#fab387">5&lt;/span>, value); &lt;span style="color:#6c7086;font-style:italic">// Fill first n elements
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>generate(v.begin(), v.end(), &lt;span style="color:#6c7086;font-style:italic">// Generate values with function
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> []() { &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89b4fa">rand&lt;/span>() &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#fab387">100&lt;/span>; });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>iota(v.begin(), v.end(), &lt;span style="color:#fab387">0&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Fill with increasing values
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Remove
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> newEnd &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> remove(v.begin(), v.end(), value); &lt;span style="color:#6c7086;font-style:italic">// Remove value (doesn&amp;#39;t resize)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>v.erase(newEnd, v.end()); &lt;span style="color:#6c7086;font-style:italic">// Actually erase removed elements
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> newEnd &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> remove_if(v.begin(), v.end(), &lt;span style="color:#6c7086;font-style:italic">// Remove with condition
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> [](&lt;span style="color:#f38ba8">int&lt;/span> x) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Replace
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>replace(v.begin(), v.end(), oldValue, newValue); &lt;span style="color:#6c7086;font-style:italic">// Replace value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>replace_if(v.begin(), v.end(), &lt;span style="color:#6c7086;font-style:italic">// Replace with condition
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> [](&lt;span style="color:#f38ba8">int&lt;/span> x) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; }, &lt;span style="color:#fab387">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Reverse and Rotate
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>reverse(v.begin(), v.end()); &lt;span style="color:#6c7086;font-style:italic">// Reverse range
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>rotate(v.begin(), v.begin() &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">3&lt;/span>, v.end()); &lt;span style="color:#6c7086;font-style:italic">// Rotate elements
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="sorting-and-related-operations">Sorting and Related Operations&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Sorting
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>sort(v.begin(), v.end()); &lt;span style="color:#6c7086;font-style:italic">// Sort in ascending order
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>sort(v.begin(), v.end(), greater&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>()); &lt;span style="color:#6c7086;font-style:italic">// Sort in descending order
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>sort(v.begin(), v.end(), &lt;span style="color:#6c7086;font-style:italic">// Sort with custom comparator
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> [](&lt;span style="color:#f38ba8">int&lt;/span> a, &lt;span style="color:#f38ba8">int&lt;/span> b) { &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89b4fa">abs&lt;/span>(a) &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> abs(b); });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>partial_sort(v.begin(), v.begin() &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">5&lt;/span>, v.end()); &lt;span style="color:#6c7086;font-style:italic">// Sort just first 5 elements
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>stable_sort(v.begin(), v.end()); &lt;span style="color:#6c7086;font-style:italic">// Stable sort
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Binary search (on sorted ranges)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> found &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> binary_search(v.begin(), v.end(), value); &lt;span style="color:#6c7086;font-style:italic">// Check if exists
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> it &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lower_bound(v.begin(), v.end(), value); &lt;span style="color:#6c7086;font-style:italic">// First element &amp;gt;= value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> it &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> upper_bound(v.begin(), v.end(), value); &lt;span style="color:#6c7086;font-style:italic">// First element &amp;gt; value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> [first, last] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> equal_range(v.begin(), v.end(), value); &lt;span style="color:#6c7086;font-style:italic">// Both bounds
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Partitioning
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> it &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> partition(v.begin(), v.end(), &lt;span style="color:#6c7086;font-style:italic">// Partition by condition
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> [](&lt;span style="color:#f38ba8">int&lt;/span> x) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">bool&lt;/span> isPartitioned &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> is_partitioned(v.begin(), v.end(), &lt;span style="color:#6c7086;font-style:italic">// Check if partitioned
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> [](&lt;span style="color:#f38ba8">int&lt;/span> x) { &lt;span style="color:#cba6f7">return&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Nth element
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>nth_element(v.begin(), v.begin() &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> n, v.end()); &lt;span style="color:#6c7086;font-style:italic">// Nth element in sorted position
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="numeric-operations">Numeric Operations&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#include&lt;/span> &lt;span style="color:#6c7086;font-weight:bold;font-style:italic">&amp;lt;numeric&amp;gt;&lt;/span>&lt;span style="color:#6c7086;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Basic operations
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> sum &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> accumulate(v.begin(), v.end(), &lt;span style="color:#fab387">0&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// Sum of elements
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> product &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> accumulate(v.begin(), v.end(), &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#6c7086;font-style:italic">// Product of elements
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> multiplies&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> sum &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> reduce(v.begin(), v.end()); &lt;span style="color:#6c7086;font-style:italic">// C++17 parallel-friendly sum
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Adjacent element operations
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> differences(v.size() &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>adjacent_difference(v.begin(), v.end(), &lt;span style="color:#6c7086;font-style:italic">// Differences of adjacent elements
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> differences.begin());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> sums(v.size() &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>adjacent_find(v.begin(), v.end(), &lt;span style="color:#6c7086;font-style:italic">// Find equal adjacent elements
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> sums.begin());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Prefix sums
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> prefixSums(v.size());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>partial_sum(v.begin(), v.end(), prefixSums.begin()); &lt;span style="color:#6c7086;font-style:italic">// Cumulative sum
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Inner product
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> dotProduct &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> inner_product(v1.begin(), v1.end(), &lt;span style="color:#6c7086;font-style:italic">// Dot product
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> v2.begin(), &lt;span style="color:#fab387">0&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="heap-operations">Heap Operations&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Create heap
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>make_heap(v.begin(), v.end()); &lt;span style="color:#6c7086;font-style:italic">// Create max-heap
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>make_heap(v.begin(), v.end(), greater&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>()); &lt;span style="color:#6c7086;font-style:italic">// Create min-heap
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Heap operations
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>v.push_back(value); &lt;span style="color:#6c7086;font-style:italic">// Add element to end
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>push_heap(v.begin(), v.end()); &lt;span style="color:#6c7086;font-style:italic">// Fix heap after push_back
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>pop_heap(v.begin(), v.end()); &lt;span style="color:#6c7086;font-style:italic">// Move largest to end
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>v.pop_back(); &lt;span style="color:#6c7086;font-style:italic">// Remove element now at end
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Heap properties
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> isHeap &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> is_heap(v.begin(), v.end()); &lt;span style="color:#6c7086;font-style:italic">// Check if is a heap
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">auto&lt;/span> it &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> is_heap_until(v.begin(), v.end()); &lt;span style="color:#6c7086;font-style:italic">// Iterator to first non-heap element
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="set-operations-on-sorted-ranges">Set Operations (on sorted ranges)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Difference, union, intersection
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>set_difference(v1.begin(), v1.end(), &lt;span style="color:#6c7086;font-style:italic">// Elements in v1 but not in v2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> v2.begin(), v2.end(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result.begin());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set_union(v1.begin(), v1.end(), &lt;span style="color:#6c7086;font-style:italic">// Elements in either v1 or v2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> v2.begin(), v2.end(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result.begin());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set_intersection(v1.begin(), v1.end(), &lt;span style="color:#6c7086;font-style:italic">// Elements in both v1 and v2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> v2.begin(), v2.end(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result.begin());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set_symmetric_difference(v1.begin(), v1.end(), &lt;span style="color:#6c7086;font-style:italic">// Elements in either but not both
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> v2.begin(), v2.end(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result.begin());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Set membership
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> isSubset &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> includes(v1.begin(), v1.end(), &lt;span style="color:#6c7086;font-style:italic">// Check if v2 is subset of v1
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> v2.begin(), v2.end());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="common-algorithm-patterns">Common Algorithm Patterns&lt;/h2>
&lt;h3 id="binary-search-implementation">Binary Search Implementation&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Binary search on sorted array
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> &lt;span style="color:#89b4fa">binarySearch&lt;/span>(&lt;span style="color:#cba6f7">const&lt;/span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> arr, &lt;span style="color:#f38ba8">int&lt;/span> target) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> arr.size() &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> (right &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> left) &lt;span style="color:#89dceb;font-weight:bold">/&lt;/span> &lt;span style="color:#fab387">2&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// Avoid overflow
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (arr[mid] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> target)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> (arr[mid] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> target)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Find first position greater than or equal to target
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">lowerBound&lt;/span>(&lt;span style="color:#cba6f7">const&lt;/span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> arr, &lt;span style="color:#f38ba8">int&lt;/span> target) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> arr.size();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> (right &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> left) &lt;span style="color:#89dceb;font-weight:bold">/&lt;/span> &lt;span style="color:#fab387">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (arr[mid] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> target)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> left;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Find first position greater than target
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">upperBound&lt;/span>(&lt;span style="color:#cba6f7">const&lt;/span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> arr, &lt;span style="color:#f38ba8">int&lt;/span> target) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> arr.size();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> (right &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> left) &lt;span style="color:#89dceb;font-weight:bold">/&lt;/span> &lt;span style="color:#fab387">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (arr[mid] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;=&lt;/span> target)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mid;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> left;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="two-pointers-technique">Two Pointers Technique&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Find pair with given sum in sorted array
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">bool&lt;/span> &lt;span style="color:#89b4fa">findPair&lt;/span>(&lt;span style="color:#cba6f7">const&lt;/span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> arr, &lt;span style="color:#f38ba8">int&lt;/span> target) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> arr.size() &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> currentSum &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> arr[left] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> arr[right];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (currentSum &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> target)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">true&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> (currentSum &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> target)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right&lt;span style="color:#89dceb;font-weight:bold">--&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Remove duplicates from sorted array in-place
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">removeDuplicates&lt;/span>(vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> nums) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (nums.empty()) &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> writeIndex &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> readIndex &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>; readIndex &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> nums.size(); readIndex&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (nums[readIndex] &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> nums[readIndex &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> nums[writeIndex&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> nums[readIndex];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> writeIndex;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Find maximum water container (container with most water problem)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">maxArea&lt;/span>(&lt;span style="color:#cba6f7">const&lt;/span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> height) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> height.size() &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> maxWater &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> h &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> min(height[left], height[right]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> w &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> left;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> maxWater &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> max(maxWater, h &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> w);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (height[left] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> height[right])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right&lt;span style="color:#89dceb;font-weight:bold">--&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> maxWater;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Three-sum problem
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> threeSum(vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;amp;&lt;/span> nums) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>vector&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (nums.size() &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#fab387">3&lt;/span>) &lt;span style="color:#cba6f7">return&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sort(nums.begin(), nums.end());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>; i &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> nums.size() &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">2&lt;/span>; i&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// Skip duplicates
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> (i &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> nums[i] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> nums[i&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>]) &lt;span style="color:#cba6f7">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> left &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> nums.size() &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> target &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>nums[i];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> right) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> sum &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> nums[left] &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> nums[right];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (sum &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> target) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> result.push_back({nums[i], nums[left], nums[right]});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// Skip duplicates
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">while&lt;/span> (left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> nums[left] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> nums[left&lt;span style="color:#89dceb;font-weight:bold">+&lt;/span>&lt;span style="color:#fab387">1&lt;/span>]) left&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> (left &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> right &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> nums[right] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> nums[right&lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>]) right&lt;span style="color:#89dceb;font-weight:bold">--&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right&lt;span style="color:#89dceb;font-weight:bold">--&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> &lt;span style="color:#89b4fa">if&lt;/span> (sum &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> target) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> left&lt;span style="color:#89dceb;font-weight:bold">++&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> right&lt;span style="color:#89dceb;font-weight:bold">--&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> result;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>파이써닉 파이썬</title><link>https://smallzoodev.netlify.app/_wiki/python_distilled/</link><pubDate>Mon, 21 Apr 2025 12:39:58 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/python_distilled/</guid><description>&lt;h2 id="13장-기본-문법">1~3장 기본 문법&lt;/h2>
&lt;hr>
&lt;blockquote>
&lt;p>진짜 간단하게 문법을 훑는다.&lt;/p>&lt;/blockquote>
&lt;h2 id="3장-프로그램-구조와-제어-흐름">3장 프로그램 구조와 제어 흐름&lt;/h2>
&lt;hr>
&lt;h3 id="예외-처리에-대한-조언">예외 처리에 대한 조언&lt;/h3>
&lt;h4 id="코드의-특정-위치에서-처리할-수-없는-예외는-잡지-않는다">코드의 특정 위치에서 처리할 수 없는 예외는 잡지 않는다.&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">read_data&lt;/span>(filename):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">with&lt;/span> &lt;span style="color:#89dceb">open&lt;/span>(filename, &lt;span style="color:#a6e3a1">&amp;#39;rt&amp;#39;&lt;/span>) &lt;span style="color:#cba6f7">as&lt;/span> file:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rows &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> line &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> file:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> row &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> line&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>split()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rows&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append((row[&lt;span style="color:#fab387">0&lt;/span>], &lt;span style="color:#89dceb">int&lt;/span>(row[&lt;span style="color:#fab387">1&lt;/span>]), &lt;span style="color:#89dceb">float&lt;/span>(row[&lt;span style="color:#fab387">2&lt;/span>])))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> rows
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>위의 경우 함수의 사용자가 잘못된 파일명을 처리할 기회가 사라짐&lt;/li>
&lt;li>예외를 호출자한테 전달하는게 바람직하다고함&lt;/li>
&lt;li>파이썬은 &lt;strong>매번 에러 확인하지 말고&lt;/strong>, &lt;strong>실패하도록 내버려두라&lt;/strong>는 철학을 가짐.&lt;/li>
&lt;li>예외는 프로그램 흐름을 위로 “전파”시켜서, &lt;strong>상위 책임 코드에서 처리하는 게 자연스럽다&lt;/strong>는 접근&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>흠..&lt;/p></description></item><item><title>Python 관련 내용 정리</title><link>https://smallzoodev.netlify.app/_wiki/python/</link><pubDate>Mon, 21 Apr 2025 12:39:20 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/python/</guid><description>&lt;h2 id="basic">Basic&lt;/h2>
&lt;ul>
&lt;li>[[Python_Distilled]]&lt;/li>
&lt;/ul></description></item><item><title>프로그래머로 사는법 간략한 인용과 후기 👨‍💻</title><link>https://smallzoodev.netlify.app/_wiki/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EB%A1%9C-%EC%82%AC%EB%8A%94%EB%B2%95/</link><pubDate>Tue, 15 Apr 2025 20:00:49 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EB%A1%9C-%EC%82%AC%EB%8A%94%EB%B2%95/</guid><description>&lt;h3 id="망쳐버린-소프트웨어-프로젝트와-무용담">망쳐버린 소프트웨어 프로젝트와 무용담&lt;/h3>
&lt;blockquote>
&lt;p>&amp;ldquo;우리가 만든 소프트웨어는 정말 좋았는데, 시장이 무르익지 않았어&amp;rdquo; -&amp;gt; 소비자 요구를 파악하지 못했다.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>&amp;ldquo;소프트웨어는 잘 만들었는데 영업 판매가 잘 되지 않았어&amp;rdquo; -&amp;gt; 아무도 그런 소프트웨어를 원하지 않았다.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>&amp;ldquo;제품은 끝내줬는데 제대로 좀 해보려는 마당에 윗선에서 잘렸어&amp;rdquo; -&amp;gt; 수익을 창출하기까지 너무 오래걸렸다.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>&amp;ldquo;좋은 소프트웨어란 그 소프트웨어가 성숙도 사이클에서 어디에 있는지, 어떤 사용자를 대상으로 하는지, 어떻게 진화하고 성장하기를 원하는지 등에 따라 매우 다를 수 있다. 소프트웨어에서 고객이 진정 무엇을 필요로 할지, 그리고 제각자와 고객이 모두 제품 성숙도 사이클과 리스크 허용도 면에서 어떤 위치에 있는지에 대해 진지하게 고민을 시작해 보면 더 나은 전략 결정을 내릴 수 있고, 시장에 진정 훌륭한 소프트웨어를 내놓을 수 있다.&amp;rdquo;&lt;/p></description></item><item><title>스프링 트랜잭션 전파 속성</title><link>https://smallzoodev.netlify.app/_wiki/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EC%A0%95%EB%A6%AC/</link><pubDate>Fri, 28 Mar 2025 21:25:06 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EC%A0%95%EB%A6%AC/</guid><description>&lt;h2 id="트랜잭션-관리">트랜잭션 관리&lt;/h2>
&lt;hr>
&lt;p>스프링의 빈은 기본적으로 싱글톤이다. 즉, 하나의 서비스 객체 인스턴스가 여러 스레드에서 공유되어 사용된다. 하지만 트랜잭션은 스레드마다 독립적으로 관리되어야 한다. 그래서 ThreadLocal로 관리한다.&lt;/p>
&lt;h3 id="transactionsynchronizationmanager">TransactionSynchronizationManager&lt;/h3>
&lt;p>스프링은 &lt;code>TransactionSynchronizationManager&lt;/code> 클래스를 통해 트랜잭션 리소스와 상태를 관리한다. 이 클래스는 ThreadLocal 변수를 사용하여 각 스레드별로 독립적인 트랜잭션 컨텍스트를 유지한다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// TransactionSynchronizationManager의 일부 (간략화됨)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">public&lt;/span> &lt;span style="color:#f38ba8">abstract&lt;/span> &lt;span style="color:#f38ba8">class&lt;/span> &lt;span style="color:#f9e2af">TransactionSynchronizationManager&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 리소스를 스레드별로 저장하는 ThreadLocal 맵&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">private&lt;/span> &lt;span style="color:#f38ba8">static&lt;/span> &lt;span style="color:#f38ba8">final&lt;/span> ThreadLocal&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Map&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Object, Object&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> resources &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">new&lt;/span> NamedThreadLocal&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;gt;&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Transactional resources&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 트랜잭션 동기화 활성화 상태&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">private&lt;/span> &lt;span style="color:#f38ba8">static&lt;/span> &lt;span style="color:#f38ba8">final&lt;/span> ThreadLocal&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Boolean&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> actualTransactionActive &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">new&lt;/span> NamedThreadLocal&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;gt;&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Actual transaction active&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 현재 트랜잭션 이름&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">private&lt;/span> &lt;span style="color:#f38ba8">static&lt;/span> &lt;span style="color:#f38ba8">final&lt;/span> ThreadLocal&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>String&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> currentTransactionName &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">new&lt;/span> NamedThreadLocal&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;gt;&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Current transaction name&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 읽기 전용 플래그&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">private&lt;/span> &lt;span style="color:#f38ba8">static&lt;/span> &lt;span style="color:#f38ba8">final&lt;/span> ThreadLocal&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Boolean&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> currentTransactionReadOnly &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">new&lt;/span> NamedThreadLocal&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;gt;&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Current transaction read-only status&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 격리 수준&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">private&lt;/span> &lt;span style="color:#f38ba8">static&lt;/span> &lt;span style="color:#f38ba8">final&lt;/span> ThreadLocal&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Integer&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> currentTransactionIsolationLevel &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">new&lt;/span> NamedThreadLocal&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;gt;&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Current transaction isolation level&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 트랜잭션 동기화 콜백 객체&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">private&lt;/span> &lt;span style="color:#f38ba8">static&lt;/span> &lt;span style="color:#f38ba8">final&lt;/span> ThreadLocal&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>List&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>TransactionSynchronization&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> synchronizations &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">new&lt;/span> NamedThreadLocal&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;gt;&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Transaction synchronizations&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 리소스 바인딩 메서드&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">public&lt;/span> &lt;span style="color:#f38ba8">static&lt;/span> &lt;span style="color:#f38ba8">void&lt;/span> &lt;span style="color:#89b4fa">bindResource&lt;/span>(Object key, Object value) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Map&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Object, Object&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> map &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> resources.&lt;span style="color:#89b4fa">get&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (map &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">new&lt;/span> HashMap&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resources.&lt;span style="color:#89b4fa">set&lt;/span>(map);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map.&lt;span style="color:#89b4fa">put&lt;/span>(key, value);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 리소스 조회 메서드&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">public&lt;/span> &lt;span style="color:#f38ba8">static&lt;/span> Object &lt;span style="color:#89b4fa">getResource&lt;/span>(Object key) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Map&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Object, Object&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> map &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> resources.&lt;span style="color:#89b4fa">get&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (map &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#fab387">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> map.&lt;span style="color:#89b4fa">get&lt;/span>(key);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 리소스 제거 메서드&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">public&lt;/span> &lt;span style="color:#f38ba8">static&lt;/span> Object &lt;span style="color:#89b4fa">unbindResource&lt;/span>(Object key) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Map&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Object, Object&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> map &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> resources.&lt;span style="color:#89b4fa">get&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (map &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">null&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#fab387">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Object value &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> map.&lt;span style="color:#89b4fa">remove&lt;/span>(key);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (map.&lt;span style="color:#89b4fa">isEmpty&lt;/span>()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resources.&lt;span style="color:#89b4fa">remove&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 기타 메서드들...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="실제-동작-흐름">실제 동작 흐름&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>트랜잭션 시작&lt;/strong>:&lt;/p></description></item><item><title>양방향 순환참조 정리</title><link>https://smallzoodev.netlify.app/_wiki/%EC%96%91%EB%B0%A9%ED%96%A5-%EC%88%9C%ED%99%98%EC%B0%B8%EC%A1%B0/</link><pubDate>Thu, 27 Mar 2025 19:58:47 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/%EC%96%91%EB%B0%A9%ED%96%A5-%EC%88%9C%ED%99%98%EC%B0%B8%EC%A1%B0/</guid><description>&lt;blockquote>
&lt;p>사실 객체의 참조과 서로 있는 객체라면 발생하지, JPA와 직접적인 연관은 없다.&lt;/p>&lt;/blockquote>
&lt;h2 id="양방향-참조">양방향 참조&lt;/h2>
&lt;h3 id="1-tostring-메서드-구현-시-무한루프">1. toString() 메서드 구현 시 무한루프&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89b4fa;font-weight:bold">@Entity&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">public&lt;/span> &lt;span style="color:#f38ba8">class&lt;/span> &lt;span style="color:#f9e2af">Parent&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa;font-weight:bold">@Id&lt;/span> &lt;span style="color:#89b4fa;font-weight:bold">@GeneratedValue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">private&lt;/span> Long id;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">private&lt;/span> String name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa;font-weight:bold">@OneToMany&lt;/span>(mappedBy &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;parent&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">private&lt;/span> List&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Child&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> children &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">new&lt;/span> ArrayList&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;gt;&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa;font-weight:bold">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">public&lt;/span> String &lt;span style="color:#89b4fa">toString&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Parent{id=&amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> id &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;, name=&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> name &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#39;, children=&amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> children &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;}&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89b4fa;font-weight:bold">@Entity&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">public&lt;/span> &lt;span style="color:#f38ba8">class&lt;/span> &lt;span style="color:#f9e2af">Child&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa;font-weight:bold">@Id&lt;/span> &lt;span style="color:#89b4fa;font-weight:bold">@GeneratedValue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">private&lt;/span> Long id;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">private&lt;/span> String name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa;font-weight:bold">@ManyToOne&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">private&lt;/span> Parent parent;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa;font-weight:bold">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">public&lt;/span> String &lt;span style="color:#89b4fa">toString&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Child{id=&amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> id &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;, name=&amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> name &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#39;, parent=&amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> parent &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;}&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>이 경우 Parent의 toString()이 Child의 toString()을 호출하고, Child의 toString()이 다시 Parent의 toString()을 호출하는 무한루프가 발생합니다.&lt;/p></description></item><item><title>가상 면접 사례로 배우는 대규모 시스템 설계</title><link>https://smallzoodev.netlify.app/_wiki/system-design-interview/</link><pubDate>Mon, 10 Mar 2025 13:42:54 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/system-design-interview/</guid><description>&lt;blockquote>
&lt;p>책의 내용을 일부 &amp;lsquo;발췌&amp;rsquo;해서 정리
각 장별 간단한 개요는 작성하지만, 실질적으로는 내가 조금 더 기억하고 싶은 내용만 일부 발췌해서 기록&lt;/p>&lt;/blockquote>
&lt;h1 id="1장-사용자-수에-따른-규모-확장성">1장 사용자 수에 따른 규모 확장성&lt;/h1>
&lt;h3 id="개요">개요&lt;/h3>
&lt;ul>
&lt;li>기본적인 어플리케이션 설게와 매우 자주 사용되는 컴포넌트 혹은 구현해야하는 요구사항에 대해서 소개해 주는장&lt;/li>
&lt;li>예를들어 아래와 같은 것들을 개념을 개략적으로 설명해준다.
&lt;ul>
&lt;li>데이터 저장소&lt;/li>
&lt;li>수직적 확장,수평적 확장&lt;/li>
&lt;li>다중화&lt;/li>
&lt;li>캐시&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>안정성과, 가용성과같은 시스템을 측정할 수 있는 요소들도 설명해준다.&lt;/li>
&lt;/ul>
&lt;h3 id="내용">내용&lt;/h3>
&lt;ul>
&lt;li>캐시 사용시 유의 할 점
&lt;ul>
&lt;li>어떤 상황에 바람직한지 생각하기&lt;/li>
&lt;li>어떤 데이터를 캐시할지 생각하지&lt;/li>
&lt;li>만료기한을 잘 설정하기&lt;/li>
&lt;li>일관성을 유지 할 수 있도록 생각하기
&lt;ul>
&lt;li>저장소의 원본을 갱신하는 연산과 캐시를 갱신하는 연산이 단일 트랜잭션으로 처리되지 않는 경우?&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>캐시가 단일 장애 지점이 되지 않도록 설계하기&lt;/li>
&lt;li>캐시 메모리의 용량과 방출 정책에 대해서 설계하기&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>샤딩
&lt;ul>
&lt;li>&amp;ldquo;같은 스키마를 쓰지만 샤드에 보관되는 데이터 사이에는 중복이 없다.&amp;rdquo;&lt;/li>
&lt;li>쓰기와 읽기 모든 부하에 대한 분산이 가장 큰 장점&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>데이터 베이스의 수평적 확장(샤딩) 이후에 생겨나는 문제점
&lt;ul>
&lt;li>데이터의 재 샤딩이 필요해짐 (샤드 소진)&lt;/li>
&lt;li>유명인사 문제 : 특정 샤드에 질의가 집중되는 문제&lt;/li>
&lt;li>조인과 비정규화&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="정리">정리&lt;/h3>
&lt;ul>
&lt;li>웹 계층은 무상태 계층으로&lt;/li>
&lt;li>모든 계층에 다중화 도입&lt;/li>
&lt;li>가능한 한 많은 데이터를 캐시할 것&lt;/li>
&lt;li>여러 데이터 센터를 지원할 것&lt;/li>
&lt;li>정적 콘텐츠는 CDN을 통해 서비스할 것&lt;/li>
&lt;li>데이터 계층은 샤딩을 통해 그 규모를 확장할 것&lt;/li>
&lt;li>각 계층은 독립적 서비스로 분할할 것&lt;/li>
&lt;li>시스템을 지속적으로 모니터링하고, 자동화 도구들을 활용할 것&lt;/li>
&lt;/ul>
&lt;h2 id="2장-개략적인-규모-추정">2장 개략적인 규모 추정&lt;/h2>
&lt;h3 id="개요-1">개요&lt;/h3>
&lt;ul>
&lt;li>이후에 설명할 내용이나, 설계에 있어 근거가 되는 &amp;lsquo;단위&amp;rsquo;를 설명해주는 장&lt;/li>
&lt;li>데이터의 단위나 속도등을 알려준다.&lt;/li>
&lt;/ul>
&lt;p>제프딘의 응답 지연시간&lt;/p></description></item><item><title>java, jvm</title><link>https://smallzoodev.netlify.app/_wiki/java-jvm/</link><pubDate>Tue, 04 Mar 2025 12:13:26 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/java-jvm/</guid><description>&lt;h1 id="jvm">JVM&lt;/h1>
&lt;hr>
&lt;h2 id="jvm-구성요소">JVM 구성요소&lt;/h2>
&lt;ul>
&lt;li>유저모드 어플리케이션 프로세스, 가상 메모리 공간을 활용, 머신으로서 연산, os의 일부기능&lt;/li>
&lt;li>jvm 구성요소
&lt;ul>
&lt;li>&lt;strong>클래스 로더(Class Loader)&lt;/strong>
&lt;ul>
&lt;li>자바 클래스 파일(.class)을 로드하고 링크하는 역할&lt;/li>
&lt;li>로딩, 링킹, 초기화 단계로 구성됨&lt;/li>
&lt;li>부트스트랩 클래스 로더, 확장 클래스 로더, 애플리케이션 클래스 로더로 구성&lt;/li>
&lt;li>클래스 로딩 링킹등이 런타임에 일어날 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>런타임 데이터 영역(Runtime Data Area)&lt;/strong>
&lt;ul>
&lt;li>메서드 영역(Method Area): 클래스 구조, 메서드 데이터, 상수, 정적 변수 등 저장&lt;/li>
&lt;li>힙(Heap): 객체와 인스턴스 변수가 저장되는 공간&lt;/li>
&lt;li>스택(Stack): 스레드마다 별도로 존재하며 지역 변수, 매개변수, 리턴 값 등 저장&lt;/li>
&lt;li>PC 레지스터(Program Counter Register): 현재 실행 중인 명령어 주소 저장&lt;/li>
&lt;li>네이티브 메서드 스택(Native Method Stack): 네이티브 코드를 위한 스택&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>실행 엔진(Execution Engine)&lt;/strong>
&lt;ul>
&lt;li>인터프리터(Interpreter): 바이트코드를 한 줄씩 해석하고 실행&lt;/li>
&lt;li>JIT 컴파일러(Just-In-Time Compiler): 자주 사용되는 코드를 네이티브 코드로 컴파일하여 성능 향상&lt;/li>
&lt;li>가비지 컬렉터(Garbage Collector): 더 이상 사용되지 않는 메모리 자동 정리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>네이티브 메서드 인터페이스(JNI, Java Native Interface)&lt;/strong>
&lt;ul>
&lt;li>자바 코드가 네이티브 애플리케이션이나 C, C++ 등의 라이브러리와 상호작용할 수 있게 함&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>네이티브 메서드 라이브러리(Native Method Libraries)&lt;/strong>
&lt;ul>
&lt;li>C, C++ 등으로 작성된 라이브러리 모음&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="클래스로더">클래스로더&lt;/h4>
&lt;p>.class file(실행 바이너리)&lt;/p></description></item><item><title>JVM-밑바닥부터-파해치기</title><link>https://smallzoodev.netlify.app/_wiki/jvm-%EB%B0%91%EB%B0%94%EB%8B%A5%EB%B6%80%ED%84%B0-%ED%8C%8C%ED%95%B4%EC%B9%98%EA%B8%B0/</link><pubDate>Mon, 03 Mar 2025 21:48:25 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/jvm-%EB%B0%91%EB%B0%94%EB%8B%A5%EB%B6%80%ED%84%B0-%ED%8C%8C%ED%95%B4%EC%B9%98%EA%B8%B0/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://product.kyobobook.co.kr/detail/S000213057051">JVM 밑바닥부터 파해치기&lt;/a>책을 정리한 내용이며, 모든 내용은 해당 도서 기반입니다.&lt;/p>&lt;/blockquote>
&lt;h1 id="1부-자바와-친해지기">1부 자바와 친해지기&lt;/h1>
&lt;h2 id="1장-자바-기술-시스템-소개">1장 자바 기술 시스템 소개&lt;/h2>
&lt;h3 id="11-들어가며">1.1 들어가며&lt;/h3>
&lt;ul>
&lt;li>하드웨어 플랫폼 족쇄 제거&lt;/li>
&lt;li>안전한 메모리 관리 시스템&lt;/li>
&lt;li>런타임 핫코드 감지, 컴파일 최적화하며 최상의 성능 도움&lt;/li>
&lt;li>표준 api도 풍부하고 서드파티 라이브러리도 많다.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>이번 장에는 자바 시스템의 구성요소, 역사, 자바의 현재와 미래를 다룬다.&lt;/p>&lt;/blockquote>
&lt;h3 id="12-자바-기술-시스템">1.2 자바 기술 시스템&lt;/h3>
&lt;ul>
&lt;li>크게는 아래를 포괄한다
&lt;ul>
&lt;li>자바 프로그래밍 언어&lt;/li>
&lt;li>가상 머신 구현&lt;/li>
&lt;li>클래스 파일 포맷&lt;/li>
&lt;li>클래스 라이브러리 api (표준 api)&lt;/li>
&lt;li>오픈소스 클래스 라이브러리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>언어, vm, 클래스 라이브러리를 묶어 jdk라고 한다, 또한 java se api, vm, 배포기술까지를 묶으면 jre라고한다.&lt;/li>
&lt;/ul>
&lt;h3 id="13-자바의-과거-와-현재">1.3 자바의 과거 와 현재&lt;/h3>
&lt;blockquote>
&lt;p>방대한 역사속에 다양한 jvm구현체들과 소송들을 소개하고 미래를 향한 움직임도 소개한다.
재미있게 읽었고, 다시 알아야한다면 다시 보면 될 내용이라 정리하지는 않았다.
그중 기억나는 일부만 정리한다.&lt;/p></description></item><item><title>Concurrency-Intro</title><link>https://smallzoodev.netlify.app/_wiki/concurrency-intro/</link><pubDate>Mon, 03 Mar 2025 11:58:56 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/concurrency-intro/</guid><description>&lt;h2 id="25-병행성에-관한-대화">25 병행성에 관한 대화&lt;/h2>
&lt;blockquote>
&lt;p>여러사람이 동시에 복숭아를 집을 수 있도록 했을때는 빨랐어요,
반면에 제 방법은 한번에 한명씩 집기 때문에 정확하겠지만 꽤 느리겠군요.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>멀티 쓰레드 프로그램이라고 불리는 프로그램들이 있네, 각 쓰레드는 독립된 객체로서 프로그램 내에서 프로그램을 대신하여 일으 하지, 이 쓰레드들은 메모리에 접근하는데, 쓰레드 입장에서 보면 메모리는 아까 이야기했던 복숭아와 같은 거야&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>동시성을 운영체제에서 다뤄야 할 몇 가지 이유가 있지.
운영체제는 락과 컨디션 변수와 같은 기본 동적으로 멀티쓰레드 프로그램을 지원해야 한다네.
둘째로 운영체제는 그 자체로 최초의 동시 프로그램이기 때문이야&lt;/p></description></item><item><title>OSTEP, 페이징</title><link>https://smallzoodev.netlify.app/_wiki/paging-tlb/</link><pubDate>Sun, 02 Mar 2025 17:09:37 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/paging-tlb/</guid><description>&lt;h2 id="19-페이징-더-빠른-변환tlb">19 페이징: 더 빠른 변환(TLB)&lt;/h2>
&lt;ul>
&lt;li>매핑 정보 저장(페이지 테이블 저장)을 위해 큰 메모리 공간이 요구됨&lt;/li>
&lt;li>가상 주소에서 물리 주소로의 주소 변환을 위해 메모리에 존재하는 매핑정보를 읽어야함.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>핵심 질문: 주소 변환 속도를 어떻게 향상할까?&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>주소 변환을 빠르게 하기 위해 우리는 변환-색인 버퍼(translation-lookaside-buffer) 줄여서 TLB라고 부르는 것을 도입한다.&lt;/li>
&lt;li>칩의 MMU(memory-management unit)의 일부라고 한다.&lt;/li>
&lt;li>자주 참조되는 가상주소 - 실주소 변환 정보를 저장하는 하드웨어 캐시이다.&lt;/li>
&lt;li>주소-변환 캐시가 좀 더 적합한 명칭이다.&lt;/li>
&lt;/ul>
&lt;h3 id="191-tlb의-기본-알고리즘">19.1 TLB의 기본 알고리즘&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// 가상 주소에서 VPN(가상 페이지 번호) 추출 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>VPN &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (VirtualAddress &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> VPN_MASK) &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> SHIFT; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// TLB 조회 (TLB 히트 여부 확인) 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>(Success, TlbEntry) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">TLB_Lookup&lt;/span>(VPN); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">if&lt;/span> (Success &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> True) { &lt;span style="color:#6c7086;font-style:italic">// TLB Hit 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> (&lt;span style="color:#89b4fa">CanAccess&lt;/span>(TlbEntry.ProtectBits) &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> True) { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 가상 주소에서 오프셋 추출 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> Offset &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> VirtualAddress &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> OFFSET_MASK; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// TLB에서 가져온 PFN을 사용하여 물리 주소 계산 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> PhysAddr &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (TlbEntry.PFN &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> SHIFT) &lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> Offset; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 물리 주소에서 데이터 읽기 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> Register &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">AccessMemory&lt;/span>(PhysAddr); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 접근 권한 없음 → 보호 오류 발생 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#89b4fa">RaiseException&lt;/span>(PROTECTION_FAULT); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#cba6f7">else&lt;/span> { &lt;span style="color:#6c7086;font-style:italic">// TLB Miss → 페이지 테이블 접근 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#6c7086;font-style:italic">// 페이지 테이블 엔트리(PTE) 주소 계산 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> PTEAddr &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> PTBR &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> (VPN &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#cba6f7">sizeof&lt;/span>(PTE)); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// PTE 가져오기 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> PTE &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">AccessMemory&lt;/span>(PTEAddr); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> (PTE.Valid &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> False) { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 페이지가 유효하지 않음 → 세그멘테이션 오류 발생 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#89b4fa">RaiseException&lt;/span>(SEGMENTATION_FAULT); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> (&lt;span style="color:#89b4fa">CanAccess&lt;/span>(PTE.ProtectBits) &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> False) { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 접근 권한 없음 → 보호 오류 발생 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#89b4fa">RaiseException&lt;/span>(PROTECTION_FAULT); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> { 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// TLB에 새로운 항목 삽입 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#89b4fa">TLB_Insert&lt;/span>(VPN, PTE.PFN, PTE.ProtectBits); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 같은 명령어를 다시 실행하여 변환된 주소 사용 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#89b4fa">RetryInstruction&lt;/span>(); 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>모든 캐시의 설계 철학처럼, TLB역시 주소 변환 정보가 대부분의 경우 캐시에 있다라는 가정을 전제로 만들어졌다.&lt;/li>
&lt;li>TLB는 프로세싱 코어와 가까운곳에 위치하고있어 주소변환은 그다지 부담스러운작업이아니다.&lt;/li>
&lt;li>다만 미스가 발생하는 경우 엄청나게 커진다.&lt;/li>
&lt;/ul>
&lt;h3 id="192-예제-배열-접근">19.2 예제: 배열 접근&lt;/h3>
&lt;ul>
&lt;li>간단한 캐시 히트 관련 예제&lt;/li>
&lt;li>다만 페이지 크기가 TLB 효용성과 성능에 매우 중요한 역할을 보여주는 예제이다.
&lt;img src="https://github.com/user-attachments/assets/342633de-b97b-4330-b3a6-6abcdaa00cd8" alt="Image">&lt;/li>
&lt;li>(a[0]부터) : miss, hit, hit, miss, hit, hit, hit, miss, hit, hit&lt;/li>
&lt;li>이 예시에서 정말 첫접근부터 미스로 들어갔는데 70%의 히트율을 자랑한다.&lt;/li>
&lt;li>이건 공간 지역성(Spatial Locality)때문에 그렇다
&lt;ul>
&lt;li>현재 참조한 데이터와 가까운 주소의 데이터도 곧 참조될 가능성이 높다.&lt;/li>
&lt;li>예: 배열(Array)나 연속된 메모리 접근.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>그리고 이후에는 히트할 확률이 더높은데 (tlb에 남아있는 동안 다시 참조가 일어날 가능성이 높다)&lt;/li>
&lt;li>이것도 시간 지역성(Temoporal Locality)때문이다.
&lt;ul>
&lt;li>최근에 참조한 데이터는 곧 다시 참조될 가능성이 높다.&lt;/li>
&lt;li>예: 루프(loop)에서 같은 변수를 반복적으로 참조함.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="193-tlb-미스는-누가-처리할까">19.3 TLB 미스는 누가 처리할까?&lt;/h3>
&lt;ul>
&lt;li>예전에는 주로 하드웨어&lt;/li>
&lt;li>요즘에는 os가 트랩 핸들러로 처리하기도 함&lt;/li>
&lt;/ul>
&lt;h3 id="194-tlb의-구성-무엇이-있나">19.4 TLB의 구성: 무엇이 있나?&lt;/h3>
&lt;ul>
&lt;li>일반적으로 페이지테이블에 있는 것들중 일부&lt;/li>
&lt;li>protection bit&lt;/li>
&lt;li>valid bit (근데 페이지 테이블의 valid-bit랑은 다름!!!!)
&lt;ul>
&lt;li>페이지 테이블은 : 아직 할당되느 않은 물리 페이지 프레임&lt;/li>
&lt;li>tlb는 : 실제 유효한 캐시인지를 따짐, 컨텍스트 스위칭시 invalid로 다른 프로세스로부터의 접근을 막음!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>dirty bit&lt;/li>
&lt;li>등등..&lt;/li>
&lt;/ul>
&lt;h3 id="195-tlb의-문제-문맥-교환">19.5 TLB의 문제: 문맥 교환&lt;/h3>
&lt;ul>
&lt;li>요약하자면 컨텍스트 스위칭시 이전 프로세스의 tlb가 남아서 문제라는건데,&lt;/li>
&lt;li>비우는 방식은 오버헤드를 크게 만든다 (valid bit를 건들어도 마찬가지)&lt;/li>
&lt;li>그래서 주소 공간 식별자를 두거나 프로세스 식별자를 두는 방식으로 보완한다.&lt;/li>
&lt;/ul>
&lt;h3 id="196-이슈-교체-정책">19.6 이슈: 교체 정책&lt;/h3>
&lt;blockquote>
&lt;p>캐시 교체 정책이 매우 중요하다.
핵심 질문: TLB 교체 정책은 어떻게 설계해야하는가?
목표는 미스율을 줄이고 히트율을 증가시켜 성능을 개선하는 것이다.&lt;/p></description></item><item><title>자주 쓰이는 데이터 압축 정리</title><link>https://smallzoodev.netlify.app/_wiki/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%95%95%EC%B6%95/</link><pubDate>Fri, 28 Feb 2025 13:50:39 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%95%95%EC%B6%95/</guid><description>&lt;h2 id="mysql">MySQL&lt;/h2>
&lt;h3 id="lz77">LZ77&lt;/h3>
&lt;p>빈도를 체크해서 치환하는 방식 자세한 구현은 -&amp;gt; &lt;a href="https://medium.com/@vincentcorbee/lz77-compression-in-javascript-cd2583d2a8bd">여기&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>알고리즘 LZ77_압축(입력문자열):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 압축결과 = 빈 리스트
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 검색버퍼크기 = N 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 전방버퍼크기 = M 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 현재위치 = 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> while 현재위치 &amp;lt; 입력문자열의 길이:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // 검색 버퍼와 전방 버퍼 설정
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 검색버퍼시작 = max(0, 현재위치 - 검색버퍼크기)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 검색버퍼끝 = 현재위치
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 전방버퍼끝 = min(현재위치 + 전방버퍼크기, 입력문자열의 길이)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 최대일치위치 = 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 최대일치길이 = 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // 검색 버퍼에서 가장 긴 일치 찾기
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> for 검색위치 = 검색버퍼시작 to 검색버퍼끝 - 1:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 현재일치길이 = 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> while 현재위치 + 현재일치길이 &amp;lt; 전방버퍼끝 AND
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 검색위치 + 현재일치길이 &amp;lt; 현재위치 AND
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 입력문자열[검색위치 + 현재일치길이] == 입력문자열[현재위치 + 현재일치길이]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 현재일치길이 += 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> if 현재일치길이 &amp;gt; 최대일치길이:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 최대일치길이 = 현재일치길이
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 최대일치위치 = 검색위치
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> if 최대일치길이 &amp;gt; 0:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // 상대적 위치 계산 (검색 버퍼 내의 오프셋)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 오프셋 = 현재위치 - 최대일치위치
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 다음문자 = 입력문자열[현재위치 + 최대일치길이] (전방버퍼끝에 도달했다면 null 또는 특수 문자)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 압축결과.추가((오프셋, 최대일치길이, 다음문자))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 현재위치 += 최대일치길이 + 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> else:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // 일치하는 것이 없으면 현재 문자를 그대로 출력
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 압축결과.추가((0, 0, 입력문자열[현재위치]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 현재위치 += 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> return 압축결과
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;ldquo;abracadabra&amp;quot;를 압축하는 과정 예시(검색버퍼 =7, 전방버퍼 =4)&lt;/p></description></item><item><title>MySQL 레코드 락 확인 쿼리들</title><link>https://smallzoodev.netlify.app/_wiki/mysql-record-lock-queries/</link><pubDate>Thu, 27 Feb 2025 20:37:34 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/mysql-record-lock-queries/</guid><description>&lt;h2 id="mysql의-performance_schemadata_locks와-performance_schemadata_lock_waits-활용-예시">MySQL의 performance_schema.data_locks와 performance_schema.data_lock_waits 활용 예시&lt;/h2>
&lt;p>MySQL의 &lt;code>performance_schema.data_locks&lt;/code>와 &lt;code>performance_schema.data_lock_waits&lt;/code> 테이블을 활용하여 데이터베이스 락을 조회하는 다양한 예시와 결과를 정리.&lt;/p>
&lt;hr>
&lt;h2 id="performance_schemadata_locks와-performance_schemadata_lock_waits-개요">performance_schema.data_locks와 performance_schema.data_lock_waits 개요&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>&lt;code>data_locks&lt;/code>&lt;/strong>: 현재 활성화된 모든 락 정보를 포함하는 테이블&lt;/li>
&lt;li>&lt;strong>&lt;code>data_lock_waits&lt;/code>&lt;/strong>: 트랜잭션이 기다리는 락 정보를 보여주는 테이블 (Deadlock 가능성 분석)&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="1-기본적인-락-정보-조회">1. 기본적인 락 정보 조회&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">SELECT&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#cba6f7">FROM&lt;/span> performance_schema.data_locks;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-결과-예시">✅ 결과 예시&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>ENGINE&lt;/th>
 &lt;th>OBJECT_SCHEMA&lt;/th>
 &lt;th>OBJECT_NAME&lt;/th>
 &lt;th>INDEX_NAME&lt;/th>
 &lt;th>LOCK_TYPE&lt;/th>
 &lt;th>LOCK_MODE&lt;/th>
 &lt;th>LOCK_STATUS&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>INNODB&lt;/td>
 &lt;td>mydb&lt;/td>
 &lt;td>users&lt;/td>
 &lt;td>PRIMARY&lt;/td>
 &lt;td>RECORD&lt;/td>
 &lt;td>X&lt;/td>
 &lt;td>GRANTED&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>INNODB&lt;/td>
 &lt;td>mydb&lt;/td>
 &lt;td>orders&lt;/td>
 &lt;td>NULL&lt;/td>
 &lt;td>TABLE&lt;/td>
 &lt;td>IX&lt;/td>
 &lt;td>GRANTED&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>&lt;code>LOCK_TYPE&lt;/code>: &lt;code>TABLE&lt;/code>, &lt;code>RECORD&lt;/code>, &lt;code>AUTO_INC&lt;/code> 등&lt;/li>
&lt;li>&lt;code>LOCK_MODE&lt;/code>: &lt;code>X(Exclusive)&lt;/code>, &lt;code>S(Shared)&lt;/code>, &lt;code>IX(Intent Exclusive)&lt;/code>, &lt;code>IS(Intent Shared)&lt;/code>&lt;/li>
&lt;li>&lt;code>LOCK_STATUS&lt;/code>: &lt;code>GRANTED&lt;/code>, &lt;code>WAITING&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="2-특정-테이블에-걸린-락-확인">2. 특정 테이블에 걸린 락 확인&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">SELECT&lt;/span> ENGINE, OBJECT_SCHEMA, OBJECT_NAME, LOCK_TYPE, LOCK_MODE, LOCK_STATUS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">FROM&lt;/span> performance_schema.data_locks
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">WHERE&lt;/span> OBJECT_SCHEMA &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;mydb&amp;#39;&lt;/span> &lt;span style="color:#cba6f7">AND&lt;/span> OBJECT_NAME &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;users&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-결과-예시-1">✅ 결과 예시&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>ENGINE&lt;/th>
 &lt;th>OBJECT_SCHEMA&lt;/th>
 &lt;th>OBJECT_NAME&lt;/th>
 &lt;th>LOCK_TYPE&lt;/th>
 &lt;th>LOCK_MODE&lt;/th>
 &lt;th>LOCK_STATUS&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>INNODB&lt;/td>
 &lt;td>mydb&lt;/td>
 &lt;td>users&lt;/td>
 &lt;td>RECORD&lt;/td>
 &lt;td>X&lt;/td>
 &lt;td>GRANTED&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="3-트랜잭션이-기다리고-있는-락-조회">3. 트랜잭션이 기다리고 있는 락 조회&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">SELECT&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#cba6f7">FROM&lt;/span> performance_schema.data_lock_waits;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-결과-예시-2">✅ 결과 예시&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>REQUESTING_ENGINE&lt;/th>
 &lt;th>REQUESTING_THREAD_ID&lt;/th>
 &lt;th>REQUESTING_TRANSACTION_ID&lt;/th>
 &lt;th>BLOCKING_ENGINE&lt;/th>
 &lt;th>BLOCKING_THREAD_ID&lt;/th>
 &lt;th>BLOCKING_TRANSACTION_ID&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>INNODB&lt;/td>
 &lt;td>12345&lt;/td>
 &lt;td>56789&lt;/td>
 &lt;td>INNODB&lt;/td>
 &lt;td>67890&lt;/td>
 &lt;td>34567&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>&lt;strong>REQUESTING_TRANSACTION_ID&lt;/strong>: 락을 기다리는 트랜잭션&lt;/li>
&lt;li>&lt;strong>BLOCKING_TRANSACTION_ID&lt;/strong>: 락을 잡고 있는 트랜잭션&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="4-특정-트랜잭션이-기다리고-있는-락-확인">4. 특정 트랜잭션이 기다리고 있는 락 확인&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">SELECT&lt;/span> dl.ENGINE, dl.OBJECT_SCHEMA, dl.OBJECT_NAME, dl.LOCK_TYPE, dl.LOCK_MODE, dl.LOCK_STATUS
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">FROM&lt;/span> performance_schema.data_locks dl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">JOIN&lt;/span> performance_schema.data_lock_waits dlw
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">ON&lt;/span> dlw.REQUESTING_ENGINE &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dl.ENGINE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">AND&lt;/span> dlw.REQUESTING_THREAD_ID &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dl.THREAD_ID;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-결과-예시-3">✅ 결과 예시&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>ENGINE&lt;/th>
 &lt;th>OBJECT_SCHEMA&lt;/th>
 &lt;th>OBJECT_NAME&lt;/th>
 &lt;th>LOCK_TYPE&lt;/th>
 &lt;th>LOCK_MODE&lt;/th>
 &lt;th>LOCK_STATUS&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>INNODB&lt;/td>
 &lt;td>mydb&lt;/td>
 &lt;td>orders&lt;/td>
 &lt;td>RECORD&lt;/td>
 &lt;td>X&lt;/td>
 &lt;td>WAITING&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="5-특정-테이블에서-락을-대기-중인-트랜잭션-확인">5. 특정 테이블에서 락을 대기 중인 트랜잭션 확인&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">SELECT&lt;/span> dlw.REQUESTING_TRANSACTION_ID, dlw.BLOCKING_TRANSACTION_ID, dl.OBJECT_SCHEMA, dl.OBJECT_NAME, dl.LOCK_TYPE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">FROM&lt;/span> performance_schema.data_lock_waits dlw
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">JOIN&lt;/span> performance_schema.data_locks dl
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">ON&lt;/span> dlw.REQUESTING_THREAD_ID &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> dl.THREAD_ID
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">WHERE&lt;/span> dl.OBJECT_SCHEMA &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;mydb&amp;#39;&lt;/span> &lt;span style="color:#cba6f7">AND&lt;/span> dl.OBJECT_NAME &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;orders&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-결과-예시-4">✅ 결과 예시&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>REQUESTING_TRANSACTION_ID&lt;/th>
 &lt;th>BLOCKING_TRANSACTION_ID&lt;/th>
 &lt;th>OBJECT_SCHEMA&lt;/th>
 &lt;th>OBJECT_NAME&lt;/th>
 &lt;th>LOCK_TYPE&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>56789&lt;/td>
 &lt;td>34567&lt;/td>
 &lt;td>mydb&lt;/td>
 &lt;td>orders&lt;/td>
 &lt;td>RECORD&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="-6-특정-트랜잭션이-보유한-락과-대기-중인-락-함께-조회">📝 6. 특정 트랜잭션이 보유한 락과 대기 중인 락 함께 조회&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">SELECT&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dlw.REQUESTING_TRANSACTION_ID &lt;span style="color:#cba6f7">AS&lt;/span> waiting_txn, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dlw.BLOCKING_TRANSACTION_ID &lt;span style="color:#cba6f7">AS&lt;/span> blocking_txn, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r.OBJECT_SCHEMA &lt;span style="color:#cba6f7">AS&lt;/span> blocking_schema, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r.OBJECT_NAME &lt;span style="color:#cba6f7">AS&lt;/span> blocking_table, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> w.OBJECT_SCHEMA &lt;span style="color:#cba6f7">AS&lt;/span> waiting_schema, 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> w.OBJECT_NAME &lt;span style="color:#cba6f7">AS&lt;/span> waiting_table
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">FROM&lt;/span> performance_schema.data_lock_waits dlw
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">JOIN&lt;/span> performance_schema.data_locks r 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">ON&lt;/span> dlw.BLOCKING_THREAD_ID &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> r.THREAD_ID
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">JOIN&lt;/span> performance_schema.data_locks w
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">ON&lt;/span> dlw.REQUESTING_THREAD_ID &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> w.THREAD_ID;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-결과-예시-5">✅ 결과 예시&lt;/h3>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>waiting_txn&lt;/th>
 &lt;th>blocking_txn&lt;/th>
 &lt;th>blocking_schema&lt;/th>
 &lt;th>blocking_table&lt;/th>
 &lt;th>waiting_schema&lt;/th>
 &lt;th>waiting_table&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>56789&lt;/td>
 &lt;td>34567&lt;/td>
 &lt;td>mydb&lt;/td>
 &lt;td>orders&lt;/td>
 &lt;td>mydb&lt;/td>
 &lt;td>payments&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="-7-show-engine-innodb-status와-비교하여-deadlock-분석">📝 7. SHOW ENGINE INNODB STATUS와 비교하여 Deadlock 분석&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">SHOW&lt;/span> ENGINE INNODB STATUS;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="-결과-예시-6">✅ 결과 예시&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb;font-weight:bold">----------------------&lt;/span>&lt;span style="color:#6c7086;font-style:italic">--
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">LATEST DETECTED DEADLOCK
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">----------------------&lt;/span>&lt;span style="color:#6c7086;font-style:italic">--
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">*** (1) TRANSACTION:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>TRANSACTION &lt;span style="color:#fab387">56789&lt;/span>, ACTIVE &lt;span style="color:#fab387">10&lt;/span> sec
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">LOCK&lt;/span> WAIT &lt;span style="color:#cba6f7">on&lt;/span> &lt;span style="color:#cba6f7">table&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">`&lt;/span>mydb&lt;span style="color:#89dceb;font-weight:bold">`&lt;/span>.&lt;span style="color:#89dceb;font-weight:bold">`&lt;/span>orders&lt;span style="color:#89dceb;font-weight:bold">`&lt;/span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb;font-weight:bold">***&lt;/span> (&lt;span style="color:#fab387">2&lt;/span>) TRANSACTION:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TRANSACTION &lt;span style="color:#fab387">34567&lt;/span>, ACTIVE &lt;span style="color:#fab387">12&lt;/span> sec
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">LOCK&lt;/span> WAIT &lt;span style="color:#cba6f7">on&lt;/span> &lt;span style="color:#cba6f7">table&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">`&lt;/span>mydb&lt;span style="color:#89dceb;font-weight:bold">`&lt;/span>.&lt;span style="color:#89dceb;font-weight:bold">`&lt;/span>payments&lt;span style="color:#89dceb;font-weight:bold">`&lt;/span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>performance_schema.data_lock_waits&lt;/code>와 비교하면 어떤 트랜잭션이 막혀 있는지 상세 확인 가능&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="-정리">🔥 정리&lt;/h2>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>시나리오&lt;/th>
 &lt;th>조회 쿼리&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>모든 락 확인&lt;/td>
 &lt;td>&lt;code>SELECT * FROM performance_schema.data_locks;&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>특정 테이블의 락 조회&lt;/td>
 &lt;td>&lt;code>WHERE OBJECT_NAME = 'users'&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>트랜잭션 대기 중인 락 확인&lt;/td>
 &lt;td>&lt;code>SELECT * FROM performance_schema.data_lock_waits;&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>특정 트랜잭션이 대기 중인 락&lt;/td>
 &lt;td>&lt;code>JOIN performance_schema.data_locks ON THREAD_ID&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>대기 중인 트랜잭션과 보유 중인 트랜잭션 조회&lt;/td>
 &lt;td>&lt;code>JOIN data_locks 두 번 사용&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Deadlock 상세 분석&lt;/td>
 &lt;td>&lt;code>SHOW ENGINE INNODB STATUS&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></description></item><item><title>RealMySql 8.0</title><link>https://smallzoodev.netlify.app/_wiki/real-my-sql/</link><pubDate>Thu, 27 Feb 2025 10:17:43 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/real-my-sql/</guid><description>&lt;h2 id="mysql-아키텍처">MySQL 아키텍처&lt;/h2>
&lt;hr>
&lt;h3 id="mysql-엔진-관련">MySQL 엔진 관련&lt;/h3>
&lt;h4 id="기본">기본&lt;/h4>
&lt;ul>
&lt;li>핸들러, 엔진, 스토리지엔진, 하드웨어로 이루어짐&lt;/li>
&lt;li>스레딩: 포어그라운드 스레드(클라이언트 스레드)와 백그라운드 스레드
&lt;ul>
&lt;li>MyISAM은 클라이언트스레드가 쓰기 작업까지&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>메모리: 글로벌영역과 클라이언트 로컬
&lt;ul>
&lt;li>글로벌 : 테이블 캐시, 버퍼풀, 해시인덱스, 리두로그 버퍼&lt;/li>
&lt;li>로컬 : 커넥션, 정렬버퍼, 조인 버퍼&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>각 하위 작업이 MySQL 엔진 영역에서 처리되는지, 아니면 스토리지 엔진 영역에서 처리되는지 구분할 줄 알아야 한다.&lt;/p>&lt;/blockquote>
&lt;h4 id="쿼리-실행-구조">쿼리 실행 구조&lt;/h4>
&lt;blockquote>
&lt;p>SQL 요청 -&amp;gt;
(MySQL 엔진에서) 쿼리파서 -&amp;gt; 전처리기 -&amp;gt; 옵티마이저(쿼리 변환, 비용 최적화, 실행 계획 수립) -&amp;gt; 쿼리실행기
(스토리지 엔진에서 실행)&lt;/p></description></item><item><title>b+ tree on kotlin</title><link>https://smallzoodev.netlify.app/_wiki/kotlin-b-plus-tree/</link><pubDate>Tue, 11 Feb 2025 22:07:49 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/kotlin-b-plus-tree/</guid><description>&lt;h1 id="b-트리-구현">B+ 트리 구현&lt;/h1>
&lt;h2 id="1-기본-구조-구현">1. 기본 구조 구현&lt;/h2>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 노드(Node)와 트리(BPlusTree) 구조체 정의&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 제네릭 타입 매개변수 (K: Ord, V)&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> Box, Rc, RefCell을 사용한 메모리 관리&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 기본 생성자 (new) 구현&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 트리가 비어있는지 확인하는 기능 (is_empty)&lt;/li>
&lt;/ul>
&lt;h2 id="2-검색-기능-구현">2. 검색 기능 구현&lt;/h2>
&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 단일 키 검색 메서드 (search)&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 이진 검색을 사용한 키 찾기&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 내부 노드 탐색&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 리프 노드에서 값 찾기&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 테스트 케이스 작성&lt;/li>
&lt;/ul>
&lt;h2 id="3-삽입-기능-구현">3. 삽입 기능 구현&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> insert 메서드 구현&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 첫 노드 생성 처리&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 리프 노드 찾기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 리프 노드에 키-값 쌍 삽입&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 노드 분할 (split) 구현
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 분할 시점 결정 (order 기반)&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 리프 노드 분할&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 내부 노드 분할&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 부모 노드로 키 전파&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 루트 노드 분할 처리&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 리프 노드 연결 리스트 관리&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 테스트 케이스 작성&lt;/li>
&lt;/ul>
&lt;h2 id="4-순회-및-범위-검색">4. 순회 및 범위 검색&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 범위 검색 메서드 (range_search) 구현&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 시작 키의 리프 노드 찾기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 리프 노드 연결 리스트 순회&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 범위 내의 모든 키-값 쌍 수집&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 반복자 구현
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> IntoIterator 트레이트 구현&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 순차 접근 반복자&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 범위 접근 반복자&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 테스트 케이스 작성&lt;/li>
&lt;/ul>
&lt;h2 id="5-삭제-기능-구현">5. 삭제 기능 구현&lt;/h2>
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> delete 메서드 구현&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 삭제할 키의 리프 노드 찾기&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 리프 노드에서 키-값 쌍 제거&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 언더플로우 처리
&lt;ul>
&lt;li>&lt;input disabled="" type="checkbox"> 최소 키 개수 확인&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 형제 노드와 재분배&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 형제 노드와 병합&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 부모 노드의 키 업데이트&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 루트 노드 처리&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 리프 노드 연결 리스트 업데이트&lt;/li>
&lt;li>&lt;input disabled="" type="checkbox"> 테스트 케이스 작성&lt;/li>
&lt;/ul></description></item><item><title>Rust로 알고리즘들 구현해보기</title><link>https://smallzoodev.netlify.app/_wiki/kotlin-algorithms/</link><pubDate>Tue, 11 Feb 2025 22:06:37 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/kotlin-algorithms/</guid><description>&lt;h2 id="알고리즘-목록">알고리즘 목록&lt;/h2>
&lt;h2 id="자료구조-목록">자료구조 목록&lt;/h2>
&lt;ul>
&lt;li>[[Kotlin-B-Plus-Tree]]&lt;/li>
&lt;/ul></description></item><item><title>스프링 부트 관련 🌿</title><link>https://smallzoodev.netlify.app/_wiki/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/</link><pubDate>Tue, 04 Feb 2025 18:30:49 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8/</guid><description>&lt;h2 id="토비의-스프링">토비의 스프링&lt;/h2>
&lt;h3 id="관심사">관심사&lt;/h3>
&lt;blockquote>
&lt;p>&amp;ldquo;모든 변경과 발전은 한가지 관심에 집중해서 일어난다. 문제는 다만 그에 따른 변경이 한가지 관심에 집중해 있지 않다는 것이다. 그래서 우리가 해야 할 일은, 한가지 관심이 한군데 집중되게 하는 것이다.&amp;rdquo;&lt;/p>&lt;/blockquote>
&lt;h3 id="관계">관계&lt;/h3>
&lt;blockquote>
&lt;p>모델링 시점의 오브젝트 간 관계를 기반으로, 런타임 오브젝트 관계를 갖는 구조를 만들어주는것은 &amp;ldquo;클라이언트의 책임&amp;quot;이다. 클라이언트는 자기가 UserDao를 사용해야 할 입장이기에, UserDao의 세부 전략이라고도 볼 수 있는 구현클래스를 선택하고 선택한 클래스의 오브젝트를 생성해서 연결해줄 수 있다.&lt;/p>&lt;/blockquote>
&lt;h3 id="ocp">OCP&lt;/h3>
&lt;blockquote>
&lt;p>클래스나 모듈은 확장에는 열려있어야 하고, 변경에는 닫혀있어야 한다.&lt;/p></description></item><item><title>Coding Interview SQL</title><link>https://smallzoodev.netlify.app/_wiki/interview-queries/</link><pubDate>Mon, 03 Feb 2025 17:53:08 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/interview-queries/</guid><description>&lt;h3 id="197-rising-temperature">197. Rising Temperature&lt;/h3>
&lt;p>&lt;a href="https://leetcode.com/problems/rising-temperature/?envType=study-plan-v2&amp;amp;envId=top-sql-50">LeetcodeLink&lt;/a>&lt;/p>
&lt;p>처음쿼리 2000ms&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">select&lt;/span> W1.id 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">from&lt;/span> Weather W1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">join&lt;/span> Weather W2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">on&lt;/span> DATEDIFF(W1.recordDate, W2.recordDate) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">where&lt;/span> W1.temperature &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> W2.temperature;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>인덱스 타도록 개선 800ms&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">select&lt;/span> W1.id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">from&lt;/span> Weather W1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">join&lt;/span> Weather W2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">on&lt;/span> W1.recordDate &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> W2.recordDate &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#89dceb">INTERVAL&lt;/span> &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#cba6f7">DAY&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">where&lt;/span> W1.temperature &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> W2.temperature;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>다른 사람들의 쿼리들도 봤는데, 날짜 제한같은 편법들을 이용한거 외에는 고성능 쿼리는 없는 것 같다. 셀프조인이나 셀프조인과 다름없는 쿼리들과 비슷한 맥락&lt;/p>&lt;/blockquote>
&lt;h3 id="1661-average-time-of-process-per-machine">1661. Average Time of Process per Machine&lt;/h3>
&lt;p>&lt;a href="https://leetcode.com/problems/average-time-of-process-per-machine/?envType=study-plan-v2&amp;amp;envId=top-sql-50">LeetcodeLink&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">select&lt;/span> a1.machine_id, ROUND(&lt;span style="color:#cba6f7">AVG&lt;/span>(a2.&lt;span style="color:#cba6f7">timestamp&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> a1.&lt;span style="color:#cba6f7">timestamp&lt;/span>),&lt;span style="color:#fab387">3&lt;/span>) &lt;span style="color:#cba6f7">as&lt;/span> processing_time
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">from&lt;/span> Activity a1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">join&lt;/span> Activity a2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">on&lt;/span> a1.process_id &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> a2.process_id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">and&lt;/span> a1.machine_id &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> a2.machine_id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">and&lt;/span> a1.&lt;span style="color:#cba6f7">timestamp&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> a2.&lt;span style="color:#cba6f7">timestamp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">group&lt;/span> &lt;span style="color:#cba6f7">by&lt;/span> a1.machine_id;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>서브쿼리로도 풀 수 있긴 한데, 이게 차라리 깔끔한 것 같다. 근데 왜 easy지..&lt;/p></description></item><item><title>코틀린 완벽 가이드 간단 정리</title><link>https://smallzoodev.netlify.app/_wiki/%EC%BD%94%ED%8B%80%EB%A6%B0-%EC%99%84%EB%B2%BD-%EA%B0%80%EC%9D%B4%EB%93%9C-7%EC%9E%A5-12%EC%9E%A5/</link><pubDate>Mon, 27 Jan 2025 15:20:34 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/%EC%BD%94%ED%8B%80%EB%A6%B0-%EC%99%84%EB%B2%BD-%EA%B0%80%EC%9D%B4%EB%93%9C-7%EC%9E%A5-12%EC%9E%A5/</guid><description>&lt;blockquote>
&lt;p>코틀린 완벽 가이드 책과 코드스피츠 유튜브 스터디 영상 내용을 정리하거나 생각을 정리한 문서 (인용 태그를 제외한 모든 텍스트들은 스터디 내용을 필사하거나, 책에서 정리한 내용입니다.)&lt;/p>&lt;/blockquote>
&lt;p>출쳐 : &lt;a href="https://product.kyobobook.co.kr/detail/S000001834805?utm_source=google&amp;amp;utm_medium=cpc&amp;amp;utm_campaign=googleSearch&amp;amp;gt_network=g&amp;amp;gt_keyword=&amp;amp;gt_target_id=aud-901091942354:dsa-435935280379&amp;amp;gt_campaign_id=9979905549&amp;amp;gt_adgroup_id=132556570510&amp;amp;gad_source=1">코틀린완벽가이드&lt;/a>, &lt;a href="https://www.youtube.com/watch?v=tp-C6TtVjVA">코드스피츠 유튜브 영상&lt;/a>&lt;/p>
&lt;h2 id="7장-컬렉션과-io-자세히-알아보기">7장 컬렉션과 I/O 자세히 알아보기&lt;/h2>
&lt;hr>
&lt;h3 id="iterable">Iterable&lt;/h3>
&lt;p>&amp;ldquo;일반적으로 즉시(eager) 계산되는 상태가 있는(stateful) 컬렉션&amp;rdquo;&lt;/p>
&lt;p>그 외에는 java와 동일&lt;/p>
&lt;h3 id="comparable과-comparator">Comparable과 Comparator&lt;/h3>
&lt;p>&lt;code>compareTo()&lt;/code> : 자바와 동일, 수신객체 인스턴스가 상대방 인스턴수보다 크면 양수, 같으면 0&lt;/p>
&lt;p>&lt;code>compareBy()&lt;/code> : 비교 가능 객체를 제공&lt;/p>
&lt;h3 id="컬렉션-생성">컬렉션 생성&lt;/h3>
&lt;p>&lt;code>~Of()&lt;/code> 로 간단하게 생성 가능&lt;/p></description></item><item><title>PostMessage를 이용해서 본인인증 안전하게 처리하기 🛟</title><link>https://smallzoodev.netlify.app/_wiki/%EC%8B%A0%EA%B7%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90%EC%84%9C-%EB%B3%B8%EC%9D%B8%EC%9D%B8%EC%A6%9D-%EC%97%B0%EB%8F%99-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/</link><pubDate>Wed, 22 Jan 2025 12:28:13 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/%EC%8B%A0%EA%B7%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90%EC%84%9C-%EB%B3%B8%EC%9D%B8%EC%9D%B8%EC%A6%9D-%EC%97%B0%EB%8F%99-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0/</guid><description>&lt;h2 id="intro-">Intro 👋&lt;/h2>
&lt;hr>
&lt;p>배경 : 본인인증 서비스 리뉴얼하는 태스크를 진행했었다.&lt;/p>
&lt;h2 id="as-is">AS-IS&lt;/h2>
&lt;hr>
&lt;p>수도코드로 구현한 기존 구조는 아래와 같다.&lt;/p>
&lt;blockquote>
&lt;p>마찬가지로 백엔드 로직은 예민할 수 있어 정말 최소한의 수도코드만 작성했다.&lt;/p>&lt;/blockquote>
&lt;p>&lt;strong>본인인증 시작점&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#cba6f7">button&lt;/span> &lt;span style="color:#89b4fa">name&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;본인인증 버튼&amp;#39;&lt;/span> &lt;span style="color:#89b4fa">onClick&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">doAuth()&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#cba6f7">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#f38ba8">function&lt;/span> doAuth() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#89dceb">window&lt;/span>.afterCallback &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> afterCallbackFunc; &lt;span style="color:#6c7086;font-style:italic">// 윈도우객체에 콜백함수 삽입
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>		&lt;span style="color:#89dceb">window&lt;/span>.open(&lt;span style="color:#a6e3a1">&amp;#39;authWindow&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;/PhoneAuth&amp;#39;&lt;/span>) ; &lt;span style="color:#6c7086;font-style:italic">// 본인인증 창 열어주기
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#cba6f7">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>먼저 callback함수를 윈도우객체에 심는다.&lt;/li>
&lt;li>callback함수 내부에는 본인인증 이후에 할 행동들(회원가입관련 검증 api를 호출한다던가, 단순 인증완료후 페이지 이동이라던가) 이 정의되어있다.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>서버의 엔트리포인트&lt;/strong>&lt;/p></description></item><item><title>레거시 결제 서비스 리뉴얼, 모든 pg 서비스 연동 개발 회고 💸</title><link>https://smallzoodev.netlify.app/_wiki/%EA%B2%B0%EC%A0%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%A6%AC%EB%89%B4%EC%96%BC%ED%95%98%EA%B8%B0/</link><pubDate>Tue, 21 Jan 2025 17:15:43 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/%EA%B2%B0%EC%A0%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%A6%AC%EB%89%B4%EC%96%BC%ED%95%98%EA%B8%B0/</guid><description>이걸 전부 내가 했다고.. 스스로 뿌듯해서 쓰는 후기</description></item><item><title>카프카를 헥사고날하게 클론코딩 해보기</title><link>https://smallzoodev.netlify.app/_wiki/%EC%B9%B4%ED%94%84%EC%B9%B4%EB%A5%BC-%ED%97%A5%EC%82%AC%EA%B3%A0%EB%82%A0%ED%95%98%EA%B2%8C-%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A9-%ED%95%B4%EB%B3%B4%EA%B8%B0/</link><pubDate>Sun, 19 Jan 2025 20:37:30 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/%EC%B9%B4%ED%94%84%EC%B9%B4%EB%A5%BC-%ED%97%A5%EC%82%AC%EA%B3%A0%EB%82%A0%ED%95%98%EA%B2%8C-%ED%81%B4%EB%A1%A0%EC%BD%94%EB%94%A9-%ED%95%B4%EB%B3%B4%EA%B8%B0/</guid><description>&lt;h2 id="intro">Intro!&lt;/h2>
&lt;hr>
&lt;p>카프카를 헥사고날 아키텍처를 토대로 클론코딩 해봤다.
&lt;a href="https://github.com/SmallzooDev/kafka-rust-clone-proto/tree/main">깃허브 주소&lt;/a>&lt;/p>
&lt;h2 id="start-with-codecrafters">Start with Codecrafters&lt;/h2>
&lt;hr>
&lt;p>먼저 &lt;a href="https://app.codecrafters.io/catalog">코드크래프터스&lt;/a>라는 사이트의 도움을 받았다.
해당 사이트는&lt;/p>
&lt;p>&lt;img src="https://github.com/user-attachments/assets/50689271-7388-4df7-b0ab-8be744969e74" alt="codecrafters">&lt;/p>
&lt;p>위처럼 특정 기술을 구현하는데, 단계를 나눠주고, 해당 구현 단계마다 통합테스트를 진행해주는 사이트이다.
그리고 구현을 위해 필요한 프로토콜등의 정보를 보기 쉽게 정리하고 요약해서 제공해주기도 한다.&lt;/p>
&lt;p>다만 요청/응답을 실제 해당 기술이 사용하는 프로토콜을 통해서 진행되어야 한다.
&lt;a href="https://binspec.org/kafka-describe-topic-partitions-request-v0">요청 예시&lt;/a>, &lt;a href="https://binspec.org/kafka-describe-topic-partitions-response-v0-unknown-topic">응답 예시&lt;/a>와 같이 실제 요청도 바이트 버퍼로 오고, 응답도 바이트 버퍼로 인코딩해서 보내야한다.&lt;/p>
&lt;p>다만 문제는
&lt;img src="https://github.com/user-attachments/assets/21fa1ae7-676a-416e-a3d5-ded222c2ca9d" alt="codecrafters-capture">
아직 카프카는 베타로 지원하는중이라, 절반정도만 구현이 되어있다는 것이었다. &lt;a href="https://github.com/SmallzooDev/kafka-rust-clone">이 시점까지의 github 링크&lt;/a>
저기까지 구현했을 때, kraft 메타데이터 정보와 일부 consumer 인터페이스만 구현이 되어있었다.&lt;/p></description></item><item><title>vimwiki obsidian 같이 사용하기</title><link>https://smallzoodev.netlify.app/_wiki/vimwiki-obsidian-%EA%B0%99%EC%9D%B4-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</link><pubDate>Fri, 17 Jan 2025 19:45:31 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/vimwiki-obsidian-%EA%B0%99%EC%9D%B4-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</guid><description>&lt;h2 id="00-why-">00. Why..? 😬&lt;/h2>
&lt;hr>
&lt;p>일단 vimwiki 자체는 매우 만족하면서 잘 쓰고 있다.
다만 vimwiki는 몇몇 플러그인들과 호환성이 좋지 않거나, 설정이 변경되면 신경쓰이거나, 긴 마크다운을 편집할때 성능적으로 아쉬운 점이 많다.&lt;/p>
&lt;p>사실 대부분은 [[Vim-Profile-Log-Debugging]] 와 같이 디버깅을 하면 심각한건 해결이 되는데, 긴 글이나 특정한 플러그인과는 호환성이 좋지는 않은 것 같다.&lt;/p>
&lt;p>이런게 다 관리포인트라고 생각해서 고민하다가 옵시디언으로 기존 vimwiki가 관리하던 디렉토리를 열어봤는데, 너무 잘 호환이 되고 있었다.&lt;/p>
&lt;p>일단 당연하게도 기존에 사용하던 frontmatter 같은 것들은 예쁘게 잘 보여지고 있었고, 우연히인지 원래 마크다운 표준인지는 모르겠지만&lt;/p></description></item><item><title>코틀린 완벽 가이드 간단 정리</title><link>https://smallzoodev.netlify.app/_wiki/%EC%BD%94%ED%8B%80%EB%A6%B0-%EC%99%84%EB%B2%BD-%EA%B0%80%EC%9D%B4%EB%93%9C-1%EC%9E%A5-6%EC%9E%A5/</link><pubDate>Tue, 14 Jan 2025 11:49:42 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/%EC%BD%94%ED%8B%80%EB%A6%B0-%EC%99%84%EB%B2%BD-%EA%B0%80%EC%9D%B4%EB%93%9C-1%EC%9E%A5-6%EC%9E%A5/</guid><description>&lt;blockquote>
&lt;p>코틀린 완벽 가이드 책과 코드스피츠 유튜브 스터디 영상 내용을 정리하거나 생각을 정리한 문서 (인용 태그를 제외한 모든 텍스트들은 스터디 내용을 필사하거나, 책에서 정리한 내용입니다.)&lt;/p>&lt;/blockquote>
&lt;p>출쳐 : &lt;a href="https://product.kyobobook.co.kr/detail/S000001834805?utm_source=google&amp;amp;utm_medium=cpc&amp;amp;utm_campaign=googleSearch&amp;amp;gt_network=g&amp;amp;gt_keyword=&amp;amp;gt_target_id=aud-901091942354:dsa-435935280379&amp;amp;gt_campaign_id=9979905549&amp;amp;gt_adgroup_id=132556570510&amp;amp;gad_source=1">코틀린완벽가이드&lt;/a>, &lt;a href="https://www.youtube.com/watch?v=tp-C6TtVjVA">코드스피츠 유튜브 영상&lt;/a>&lt;/p>
&lt;h2 id="13장---코틀린-기본">1~3장 - 코틀린 기본&lt;/h2>
&lt;hr>
&lt;h3 id="식이-본문인-함수란-무엇인가-블록이-본문인-함수-대신-식이-본문인-함수를-쓰면-어떤-경우가-좋은가">식이 본문인 함수란 무엇인가? 블록이 본문인 함수 대신 식이 본문인 함수를 쓰면 어떤 경우가 좋은가?&lt;/h3>
&lt;blockquote>
&lt;p>간결하고, 명료할 수 있음 그러나 코틀린의 식은 문을 포함한 식이 될 수 있어 간단하게 이야기 하기는 어려움&lt;/p>&lt;/blockquote>
&lt;p>(참고)함수의 타입추론 기능 사용의 장단점&lt;/p></description></item><item><title>Daily Log 2025</title><link>https://smallzoodev.netlify.app/_wiki/daily-log-2025/</link><pubDate>Wed, 08 Jan 2025 20:19:31 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/daily-log-2025/</guid><description>&lt;h3 id="2025-01-08">2025-01-08&lt;/h3>
&lt;ul>
&lt;li>너무 바빠서 뭘 못하고있다.&lt;/li>
&lt;/ul>
&lt;h3 id="2025-01-11">2025-01-11&lt;/h3>
&lt;ul>
&lt;li>착한회사 vs 착하지 않은 회사 : 사실상 의미가 없는 것 같기도 하다 굳이 착해야 할 필요도 없을 뿐더러 착한게 좋은지 아닌지도 모르겠다, 다만 그래서인지는 모르겠지만 착한회사는 없다고 보는게 마음다칠 일이 없다고 생각이 든다.&lt;/li>
&lt;li>좋은회사 vs 나쁜회사 : 본인의 비즈니스를 성공시키는 유능한 회사와 그렇지 못하는 회사&lt;/li>
&lt;/ul>
&lt;h3 id="2025-01-13">2025-01-13&lt;/h3>
&lt;ul>
&lt;li>일어날일은 일어난다&lt;/li>
&lt;/ul>
&lt;h3 id="2025-01-17">2025-01-17&lt;/h3>
&lt;ul>
&lt;li>vimwiki와 옵시디언을 병행해서 사용하게 될 것 같다.&lt;/li>
&lt;/ul>
&lt;h3 id="2025-01-18">2025-01-18&lt;/h3>
&lt;ul>
&lt;li>기나긴 회고를 작성할 예정이다.&lt;/li>
&lt;li>파란색을 좋아하는데, catppuccin으로 블로그 테마를 변경하니까 가시성이 개선되어 우울해졌다.&lt;/li>
&lt;/ul>
&lt;h3 id="2025-01-24">2025-01-24&lt;/h3>
&lt;ul>
&lt;li>좋은일만 있길!&lt;/li>
&lt;/ul>
&lt;h3 id="2025-01-30">2025-01-30&lt;/h3>
&lt;ul>
&lt;li>할게 많고, 커밋수가 늘어나면 잘 안오게 되는 것 같다.&lt;/li>
&lt;li>그러지 말아야지&lt;/li>
&lt;li>그래도 보람찬 연휴를 보내고 있는 것 같다. 이것저것 공부가 잘된다.&lt;/li>
&lt;li>yazi 관련한 포스팅을 좀 해볼까한다. 연휴가 끝나기 전에&lt;/li>
&lt;/ul>
&lt;h3 id="2025-02-02">2025-02-02&lt;/h3>
&lt;ul>
&lt;li>운영체제 아주 쉬운 세가지 이야기를 오늘 내일 사이에 다 읽는 목표를 가지며 주말을 마무리하기&lt;/li>
&lt;/ul>
&lt;h3 id="2025-02-06">2025-02-06&lt;/h3>
&lt;ul>
&lt;li>아주아주 하기 싫은 날 특징
&lt;ul>
&lt;li>할일을 늘어놓는다. (코테준비, 쿼리 - 금토일 데일리) (강의 전부 다듣기 - 이번주말까지)&lt;/li>
&lt;li>방청소마냥 블로그를 새단장한다 (놀랍게도 한거임)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="2025-02-07">2025-02-07&lt;/h3>
&lt;ul>
&lt;li>컨디션이 쉽지는 않다, 그래도 할일은 해서 뿌듯하다&lt;/li>
&lt;/ul>
&lt;h3 id="2025-02-09">2025-02-09&lt;/h3>
&lt;ul>
&lt;li>늦은 나이까지 일을 하기 위해서 뭘 미리하면 좋을지에 대한 이야기를 많이 하는 것 같다.&lt;/li>
&lt;/ul>
&lt;h3 id="2025-02-10">2025-02-10&lt;/h3>
&lt;ul>
&lt;li>2년 뒤에 &lt;a href="https://chriskiehl.com/article/thoughts-after-10-years">이런 식견을 이야기 할 수 있으면 좋겠다&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="2025-02-12">2025-02-12&lt;/h3>
&lt;ul>
&lt;li>모던 유닉스 툴을 사용하면 좋지만 지나치게 nerd-font에 있는 아이콘들을 사용해서 pbcopy와 같은 것들을 이용할때 귀찮아 지는 경우가 있다.&lt;/li>
&lt;li>완벽한 설정은 없으려나!&lt;/li>
&lt;/ul>
&lt;h3 id="2025-02-04">2025-02-04&lt;/h3>
&lt;ul>
&lt;li>jdtls가 쓸만해졌으면 좋겠다.&lt;/li>
&lt;li>인텔리제이가 싫은건 아는데 주언어가 묶여있어야 하는건 싫다.&lt;/li>
&lt;/ul>
&lt;h3 id="2025-02-15">2025-02-15&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://news.hada.io/topic?id=9833">당신의_블로그에는_아무도_관심이_없습니다&lt;/a> : ga가 찐빠나도 느긋하게 생각하는 개인 블로그에 지나치게 내 생각을 검열하지는 않나? 하는 생각을 했다.&lt;/li>
&lt;/ul>
&lt;h3 id="2025-02-16">2025-02-16&lt;/h3>
&lt;ul>
&lt;li>다음 해야 할 일을 알아보는날&lt;/li>
&lt;/ul>
&lt;h3 id="2025-02-19">2025-02-19&lt;/h3>
&lt;ul>
&lt;li>감사합니다!&lt;/li>
&lt;/ul>
&lt;h3 id="2025-02-22">2025-02-22&lt;/h3>
&lt;ul>
&lt;li>조금 더 긴 호흡으로 준비하게 될 것 같다.&lt;/li>
&lt;li>그래서 일단 레디스를 다시 시작, 내일은 강의듣기 완료가 목표&lt;/li>
&lt;/ul>
&lt;h3 id="2025-02-24">2025-02-24&lt;/h3>
&lt;ul>
&lt;li>TIL처럼 DailyLog를 작성하려고 틀었다.&lt;/li>
&lt;li>&lt;code>TIL&lt;/code> : 주말동안 cli로 llm클라이언트를 만들어보려고 여기저기 레포를 뜯어보다가 알게된 사실은 llm에서 대화라는 것 자체는 환상이라는 것 이다.
&lt;ul>
&lt;li>claude api는 애초에 대화 세션 아이디 같은게 없고, 직전까지의 대화를 보내기 최적화된 인터페이스를 제공한다. 그리고 사실상 완전히 stateless하게 운영한다.&lt;/li>
&lt;li>open api는 일부 상태를 갖긴 하는데, 서비스 레벨에서 이루어지는 내용이고, 결국 모델은 처음부터 (이전 대화내용이 조금 더 붙은) 문자열 토큰으로 새로운 추론을 하는 것 뿐이다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>작성하고보니 당연한가 싶긴 한데, 그래도 조금 신기했다.&lt;/li>
&lt;/ul>
&lt;h3 id="2025-02-25">2025-02-25&lt;/h3>
&lt;ul>
&lt;li>다시 레디스를 만들고 있다.&lt;/li>
&lt;li>프로젝트를 갈아엎는게 나은가 싶은 좋은 코드를 보게되어 우울하다.&lt;/li>
&lt;li>생각보다 조금 더 러스트는 절차형 코드가 예쁘게 잘 나오는 것 같다.&lt;/li>
&lt;li>생각보다 조금 더 나는 자바스럽게 (주로 안좋은 의미로) 코딩하고 있는 것 같다.&lt;/li>
&lt;li>&lt;code>TIL&lt;/code> : 러스트에서는 오너십을 다시 가져오기 위해서 take와 같은 패턴이 있다.
&lt;ul>
&lt;li>안전함 측면에서는 &lt;code>Rc/Arc&lt;/code>가 맞지만, 정말 명확하게 문제를 인지 할 수 있고, 비동기 코드를 잘 구현해놓을수 있다면 &lt;code>Rc/Arc&lt;/code>가 필요하다고 생각되어지는 경우를 대부분 대체 할 수 있다.&lt;/li>
&lt;li>오버헤드는 사실 걱정할정도로 뭔가 해본적은 없지만, 코드가 불필요한 &lt;code>await&lt;/code>로 지저분해지는것을 막을 수 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>내일부터는 진짜진짜 다시 leetcode로 돌아가야지&lt;/li>
&lt;/ul>
&lt;h3 id="2025-02-26">2025-02-26&lt;/h3>
&lt;ul>
&lt;li>빅 샤이닝 슈퍼해피&lt;/li>
&lt;/ul>
&lt;h3 id="2025-02-28">2025-02-28&lt;/h3>
&lt;ul>
&lt;li>&lt;code>TIL&lt;/code> : saga 패턴에는 두가지 방식이 존재한다
&lt;ul>
&lt;li>&lt;code>Choreography Saga&lt;/code> : 메세지브로커로 이벤트를 교환하며 진행하는 방식
&lt;ul>
&lt;li>단일장애점이 없음, 현재 상태 추적이 어려움&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Orchestration Saga&lt;/code> : orchestration을 둔다
&lt;ul>
&lt;li>Orchestrator가 단일 장애점, 현재 상태 추적이 용이하다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>난 이런 고민 없이, 데이터서버가 orchestrator역할을 수행하게 되었던 것 같다.&lt;/li>
&lt;li>1 - ~ real mysql&lt;/li>
&lt;li>2,3 - 데이터베이스 인터널스&lt;/li>
&lt;li>3,4 - 대규모 1,2&lt;/li>
&lt;li>5 - 버퍼&lt;/li>
&lt;li>6,7,8,9 - jvm, ostep 카프카&lt;/li>
&lt;li>prj, springboot,&lt;/li>
&lt;/ul>
&lt;h3 id="2025-03-05">2025-03-05&lt;/h3>
&lt;ul>
&lt;li>늘 하던 뭐시기니까?&lt;/li>
&lt;/ul>
&lt;h3 id="2025-03-06">2025-03-06&lt;/h3>
&lt;ul>
&lt;li>미뤄뒀던일을 더 미룰 명확한 이유가 있긴하지만 밀려가는걸 보는게 약간 아쉬웠던 날&lt;/li>
&lt;/ul>
&lt;h3 id="2025-03-09">2025-03-09&lt;/h3>
&lt;ul>
&lt;li>원래도 하고있던 방식에 뭔가 멋진 패턴 혹은 아키텍처 이름이 붙어있다는걸 알게되는 요즘이다&lt;/li>
&lt;li>확실히 잘하는 동료들이 많은 회사였던 것 같다.&lt;/li>
&lt;/ul>
&lt;h3 id="2025-03-16">2025-03-16&lt;/h3>
&lt;ul>
&lt;li>많이 아쉬운 만큼 많이 배운 것 같다&lt;/li>
&lt;li>실제 잘못된 부분의 회사 코드를 수정했다.&lt;/li>
&lt;li>많이 준비한 부분보다, 그렇지 않은 부분에 대해서만 대화가 이루어진 부분에 대해서는 준비 방향성도 고민을 많이 해봤지만, 이건 시행횟수의 문제점이라고 생각했다.&lt;/li>
&lt;li>준비 방향성 자체가 문제라고 해도 그걸 생각해서 지금 하는 방법을 바꾸는것은 내 스스로의 성장에 아쉬운 방향인 것 같다. 물어보지 않는 것에 대한 공부를 배제하려고 하는 것 일 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="2025-03-22">2025-03-22&lt;/h3>
&lt;ul>
&lt;li>이래저래 바쁜와중에 사카모토 데이즈를 보고있다.&lt;/li>
&lt;li>상당히 재미있다. 그리고 모처럼 쉬는게 진짜 좋다.&lt;/li>
&lt;li>리노가 밥을 덜먹는게 일시적인게 맞으면 좋겠다.&lt;/li>
&lt;/ul>
&lt;h3 id="2025-03-23">2025-03-23&lt;/h3>
&lt;ul>
&lt;li>리노 병원 다녀와서 오늘은 휴식!&lt;/li>
&lt;/ul>
&lt;h3 id="2025-03-26">2025-03-26&lt;/h3>
&lt;ul>
&lt;li>&lt;code>TIL&lt;/code> : go struct에는 메모리 패딩이 적용된다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">package&lt;/span> main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e3a1">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#a6e3a1">&amp;#34;unsafe&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">type&lt;/span> User &lt;span style="color:#f38ba8">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	A &lt;span style="color:#f38ba8">int8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	B &lt;span style="color:#f38ba8">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	C &lt;span style="color:#f38ba8">int8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	D &lt;span style="color:#f38ba8">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	E &lt;span style="color:#f38ba8">int8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">func&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	user &lt;span style="color:#89dceb;font-weight:bold">:=&lt;/span> User{&lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#fab387">2&lt;/span>, &lt;span style="color:#fab387">3&lt;/span>, &lt;span style="color:#fab387">4&lt;/span>, &lt;span style="color:#fab387">5&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	fmt.&lt;span style="color:#89b4fa">Println&lt;/span>(unsafe.&lt;span style="color:#89b4fa">Sizeof&lt;/span>(user))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2025-03-29">2025-03-29&lt;/h3>
&lt;ul>
&lt;li>문제삼기 전까지 문제가 아닌 것들이 가장 큰 문제이더라&lt;/li>
&lt;li>밀물이 들어오면 모든 배가 뜬다.&lt;/li>
&lt;li>아무 의미심장한 의도 없이 그냥 여기저기 돌아다니다 본 문장들이 와닿아서 써봄..&lt;/li>
&lt;/ul>
&lt;h3 id="2025-03-31">2025-03-31&lt;/h3>
&lt;ul>
&lt;li>시간은 정말 빨리가네&lt;/li>
&lt;li>오늘부터는 별도로 노션에 정리하는 부분이 있을 것 같다.&lt;/li>
&lt;/ul>
&lt;h3 id="2025-04-01">2025-04-01&lt;/h3>
&lt;ul>
&lt;li>결국 via 사용이 가능한 키보드를 들였다.&lt;/li>
&lt;li>적응할 건덕지가 많기는 하다&lt;/li>
&lt;li>세상에서 가장 독특한 한영키 위치를 만들수 있게 되었다.&lt;/li>
&lt;li>한eng&lt;/li>
&lt;/ul>
&lt;h3 id="2025-04-02">2025-04-02&lt;/h3>
&lt;ul>
&lt;li>TIL : CQS
&lt;ul>
&lt;li>메서드는 상태를 변경하는 명령이거나 값을 반환하는 질의중 하나여야 한다&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="2025-04-03">2025-04-03&lt;/h3>
&lt;ul>
&lt;li>좀 더 릴렉스 한 상태로 생각했다면 좋았을 것 같다.&lt;/li>
&lt;li>내손을 떠났으니 겸허하게 기다리기..는 경험이 너무 좋았어서 너무 아쉽고 살짝 자책이 든다 🥲&lt;/li>
&lt;/ul>
&lt;h3 id="2025-04-04">2025-04-04&lt;/h3>
&lt;ul>
&lt;li>공부해야할 주제를 공부한 시간이었다.&lt;/li>
&lt;li>structured output&lt;/li>
&lt;li>gpt functionCalling&lt;/li>
&lt;li>mcp&lt;/li>
&lt;li>browser-use&lt;/li>
&lt;li>minus agent&lt;/li>
&lt;/ul>
&lt;h3 id="2025-04-05">2025-04-05&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=AP2y66Qn_ws&amp;amp;t=42s">프레임워크의 종말&lt;/a> 이라는 도발적인 영상
&lt;ul>
&lt;li>물론 &amp;ldquo;클리셰수준으로 나오는 이야기&amp;quot;라는 의견에도 동의하지만 llm관련해서 나오는 이야기랑 엮어서 보면 이번에는 또 혹시 모른가 싶긴 하다.&lt;/li>
&lt;li>다만 영상은 이러한 관점이라기보다는 프레임워크의 유무에 대해서만 다루고있어서 아쉽다&lt;/li>
&lt;li>난 항상 진짜 최고의 ai가 나오면 과연 코드를 어느레벨에서 관리할지가 궁금했는데 확실히 프레임워크까지 올 것 같지는 않아서 동의가 되는 부분도 있다.&lt;/li>
&lt;li>바로 윗줄과 관련해서 이런 &lt;a href="https://news.hada.io/topic?id=20117">긱뉴스&lt;/a>도 있다.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>결과는 결과로 두고 내 할일을 열심히해서 살아남아야지&lt;/li>
&lt;li>영어를 다시 갈고 닦아야 할 이유가 생겨나는 요즘이긴 하다.(물론 그 필요성을 이야기하는것과는 다른 맥락이고 그런 관점에 동의하지 않는다.)&lt;/li>
&lt;li>학부때 읽었던 소쉬르 책을 읽고싶어지긴 했다 (지금 드는 생각들이 그 책을 다시 읽어야 정리하고 말 할 수 있을 것 같은 느낌)&lt;/li>
&lt;/ul>
&lt;h3 id="2025-04-06">2025-04-06&lt;/h3>
&lt;ul>
&lt;li>뭐가 손에 잘 안잡혀서 오랫만에 엄청 잘 쉬었다.&lt;/li>
&lt;li>해야할일은 산더미인데 뭐가 손에 안잡힌다&lt;/li>
&lt;li>마찬가지로 할일을 하지 않으면 할일을 정리하는것으로 정신승리를 한다.
&lt;ul>
&lt;li>golang 공부하기&lt;/li>
&lt;li>mcp, function calling, browser-use등 공부하기&lt;/li>
&lt;li>via layout 확정하기&lt;/li>
&lt;li>중간고사 레포트 쓰기&lt;/li>
&lt;li>강의 수강하기&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="2025-04-07">2025-04-07&lt;/h3>
&lt;ul>
&lt;li>내일부턴 진짜 뭔가를 해야겠다&lt;/li>
&lt;li>go부터 시작해야 할 것 같다.&lt;/li>
&lt;li>같은 옷 입기, 외부모니터 안쓰기 와 같은 쉽지않은 이야기를 보고 다시 해피해킹으로..&lt;/li>
&lt;/ul>
&lt;h3 id="2025-04-08">2025-04-08&lt;/h3>
&lt;ul>
&lt;li>go를 시작했다&lt;/li>
&lt;li>쉽지않은 일도 뭐 이래저래 있고..&lt;/li>
&lt;li>외부모니터 안쓰는건 모르겠고, 해피해킹으로 돌아가는건 그럴만할지도&lt;/li>
&lt;/ul>
&lt;h3 id="2025-04-14">2025-04-14&lt;/h3>
&lt;ul>
&lt;li>안읽은 좋은 책들이 많은것같다
&lt;ul>
&lt;li>프로그래머로 사는 법&lt;/li>
&lt;li>리눅스 커맨드라인 완벽 입문서&lt;/li>
&lt;li>http 완벽 가이드&lt;/li>
&lt;li>프로그래밍 수련법&lt;/li>
&lt;li>로젠의 이산수학 (은 읽었지만 모종의 이유로 다시 구해야 한다)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>기술적인걸 대비하면서는 진짜 공부를 많이하게 되었는데, 문화적인걸 대비하면서 나에대해 진심으로 생각해보고있는 중이다.&lt;/li>
&lt;/ul>
&lt;h3 id="2025-04-15">2025-04-15&lt;/h3>
&lt;ul>
&lt;li>좋은 책을 읽고, 조금 더 생각을 많이하기로&lt;/li>
&lt;li>그리고 솔직하게&lt;/li>
&lt;/ul>
&lt;h3 id="2025-04-16">2025-04-16&lt;/h3>
&lt;ul>
&lt;li>회사일이 유난히 즐거웠다&lt;/li>
&lt;/ul>
&lt;h3 id="2025-04-18">2025-04-18&lt;/h3>
&lt;ul>
&lt;li>결과는 별로 상관없는데, 물렁한 사람으로 보인게 많이 화난다&lt;/li>
&lt;/ul>
&lt;h3 id="2025-04-24">2025-04-24&lt;/h3>
&lt;ul>
&lt;li>중심을 잘 잡고 잘하는걸 더 잘하기로&lt;/li>
&lt;/ul>
&lt;h3 id="2025-04-26">2025-04-26&lt;/h3>
&lt;ul>
&lt;li>코틀린, 러스트 관련 읽을 책들&lt;/li>
&lt;li>함수형, 멀티패러다임, ps 강의&lt;/li>
&lt;li>하이버네이트 강의&lt;/li>
&lt;/ul>
&lt;h3 id="2025-05-08">2025-05-08&lt;/h3>
&lt;ul>
&lt;li>회사도 바쁘고 공부도 바쁘고&lt;/li>
&lt;li>이러면 그냥 월간로그를 팔까싶고&lt;/li>
&lt;/ul>
&lt;h3 id="2025-05-11">2025-05-11&lt;/h3>
&lt;ul>
&lt;li>휴식일..&lt;/li>
&lt;li>sql책 먼저 끝내기&lt;/li>
&lt;/ul>
&lt;h3 id="2025-05-22">2025-05-22&lt;/h3>
&lt;ul>
&lt;li>엔티티 생명주기 관련 이벤트 호출 안하는 경우 트리거할 수 있는 별도의 aop&lt;/li>
&lt;/ul>
&lt;h3 id="2025-05-31">2025-05-31&lt;/h3>
&lt;ul>
&lt;li>많이 바쁘긴해&lt;/li>
&lt;/ul>
&lt;h3 id="2025-06-12">2025-06-12&lt;/h3>
&lt;ul>
&lt;li>일단 todist같은 걸 찾아&lt;/li>
&lt;li>레이캐스트는 동기화할지 고민을 좀 더 해봐&lt;/li>
&lt;li>메모에대해서 다시 생각하면 좋을지 생각해보기&lt;/li>
&lt;li>tmux위에 사느냐 아니면 어플리케이션을..&lt;/li>
&lt;/ul>
&lt;h3 id="2025-06-13">2025-06-13&lt;/h3>
&lt;ul>
&lt;li>기말고사를 보고왔지만 스트릭은 채워야하는게 슬프다&lt;/li>
&lt;li>의존성이 생겨도 감수할만큼 좋은것들이 있다. 해피해킹은 확실히 그 중 하나인 것 같다.&lt;/li>
&lt;li>코테보다가 키보드 배터리가 없어서 엄청 버벅였는데 그때의 불쾌감을 이겨낼정도로 배열은 좋아&lt;/li>
&lt;/ul></description></item><item><title>헥사고날 아키텍처 정리 🧔‍♂️</title><link>https://smallzoodev.netlify.app/_wiki/%ED%97%A5%EC%82%AC%EA%B3%A0%EB%82%A0-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/</link><pubDate>Wed, 01 Jan 2025 19:46:07 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/%ED%97%A5%EC%82%AC%EA%B3%A0%EB%82%A0-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/</guid><description>&lt;h2 id="출처">출처&lt;/h2>
&lt;blockquote>
&lt;p>만들면서 배우는 헥사고날 아키텍처 설계와 구현 - &lt;a href="https://www.yes24.com/product/goods/112927162">링크&lt;/a>
도메인 주도 개발 시작하기 - &lt;a href="https://www.yes24.com/Product/Goods/108431347?pid=123487&amp;amp;cosemkid=go16481149689793107&amp;amp;utm_source=google_pc&amp;amp;utm_medium=cpc&amp;amp;utm_campaign=book_pc&amp;amp;utm_content=ys_240530_google_pc_cc_book_pc_12203%EB%8F%84%EC%84%9C&amp;amp;utm_term=%EB%8F%84%EB%A9%94%EC%9D%B8%EC%A3%BC%EB%8F%84%EA%B0%9C%EB%B0%9C%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0&amp;amp;gad_source=1&amp;amp;gclid=Cj0KCQiA7NO7BhDsARIsADg_hIa9CulxQMsnfjAmHCbd7q2jFrXKJ1Ksxj56bzYXZJm6TDwsxV2R1BoaAjx8EALw_wcB">링크&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>&lt;img src="https://github.com/user-attachments/assets/7b3b487b-fb6b-4b03-8189-dca804b7b2fe" alt="hexa">&lt;/p>
&lt;h3 id="도메인-헥사곤">도메인 헥사곤&lt;/h3>
&lt;blockquote>
&lt;p>문제 영역에서 라우터가 고정된 것이 아니고, 라우터의 특성이 변경될 수 있다는 사실을 알 수 있다.
이 때문에 라우터는 수명주기를 가진다고 말할 수 있다. 이외에도 모든 라우터는 인벤토리에서 고유해야하므로 식별자를 가져야 한다.
이러한 &amp;lsquo;연속성&amp;rsquo;과 &amp;lsquo;정체성&amp;rsquo;은 엔티티를 결정하는 요소이다.&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>&lt;code>DDD&lt;/code>의 그 도메인을 이야기한다.&lt;/li>
&lt;li>&lt;code>Entity&lt;/code>, &lt;code>Value Object&lt;/code>, &lt;code>aggregate&lt;/code>의 개념도 그대로 있다.&lt;/li>
&lt;li>아마 아래에서 한 번 더 정리할 것 같다.&lt;/li>
&lt;li>여기서는 &amp;lsquo;헥사고날 아키텍처에서는 가장 안쪽 Layer를 이루고 있다.&amp;lsquo;는 사실이 중요하다.&lt;/li>
&lt;/ul>
&lt;h3 id="애플리케이션-헥사곤">애플리케이션 헥사곤&lt;/h3>
&lt;blockquote>
&lt;p>비즈니스 규칙을 &amp;lsquo;지원&amp;rsquo;하지만, 소프트웨어의 컨텍스트 외부에는 존재하지 않는다.
애플리케이션에 특화된 오퍼레이션이다. 유즈케이스, 입력포트, 출력 포트를 기반으로 구성되어있다.&lt;/p></description></item><item><title>레거시 프로젝트 로깅 개선!</title><link>https://smallzoodev.netlify.app/_wiki/%EB%A0%88%EA%B1%B0%EC%8B%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%9D%98-%EB%A1%9C%EA%B9%85-%EA%B0%9C%EC%84%A0%ED%95%98%EA%B8%B0/</link><pubDate>Wed, 25 Dec 2024 23:34:00 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/%EB%A0%88%EA%B1%B0%EC%8B%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%9D%98-%EB%A1%9C%EA%B9%85-%EA%B0%9C%EC%84%A0%ED%95%98%EA%B8%B0/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;hr>
&lt;ol>
&lt;li>Thread local한 MDC를 이용해서 로그에서 요청을 단위로 식별 할 수 있게 했다.&lt;/li>
&lt;li>PII가 아니면서도 사용자를 식별 할 수 있는 값으로 사용자의 연속성 있는 요청 흐름을 볼 수 있게 보완했다.&lt;/li>
&lt;li>그라파나에 관련한 메트릭을 추가했다.&lt;/li>
&lt;li>해당 이슈도 해결하고, 과정중에서 밝혀진 숨겨진 이슈도 특정해서 해결했다.&lt;/li>
&lt;/ol>
&lt;h2 id="about-mdc">About MDC&lt;/h2>
&lt;hr>
&lt;p>위에서 설명한 불편한 일들을 가지고 동료와 이야기를 나누던 도중 mdc에대해서 알게 되었고, 딱 필요한 부분이 mdc라는 것을 알게 되었다. 간단하게 찾아본 내용들을 요약하면, 쓰레드로컬을 사용하는 로그 전용 키밸류 저장소였다.&lt;/p></description></item><item><title>전시영역 백엔드 테스트코드 도입기</title><link>https://smallzoodev.netlify.app/_wiki/%EC%A0%84%EC%8B%9C%EC%98%81%EC%97%AD-%EB%B0%B1%EC%97%94%EB%93%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%BD%94%EB%93%9C-%EB%8F%84%EC%9E%85%EA%B8%B0/</link><pubDate>Sun, 22 Dec 2024 14:12:48 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/%EC%A0%84%EC%8B%9C%EC%98%81%EC%97%AD-%EB%B0%B1%EC%97%94%EB%93%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%BD%94%EB%93%9C-%EB%8F%84%EC%9E%85%EA%B8%B0/</guid><description>프론트엔드 잔여작업 마치기, 테스트코드 도입하기</description></item><item><title>Day-03, 대충 쓰고 wil 써야지 (뭔가 플래그 같지만)</title><link>https://smallzoodev.netlify.app/_wiki/ldady-03/</link><pubDate>Thu, 19 Dec 2024 20:36:51 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/ldady-03/</guid><description>&lt;p>일단 너무 바쁘다.&lt;/p>
&lt;p>이달 말까지 잡힌 프론트업무를 다 쳐냈다.&lt;/p>
&lt;p>그리고 야근과 틈내나는대로 테스트코드도 도입중이다&lt;/p>
&lt;p>hasura 이부분은 정리해서 wil로 올릴 예정이다&lt;/p></description></item><item><title>프론트 업무이지만, 더 나은 방법을 고민하며</title><link>https://smallzoodev.netlify.app/_wiki/lday-02/</link><pubDate>Wed, 18 Dec 2024 23:31:44 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/lday-02/</guid><description>&lt;h2 id="커뮤니티-서비스-개발">커뮤니티 서비스 개발&lt;/h2>
&lt;hr></description></item><item><title>Day-01, 목표 설정하기, 기존 프론트엔드 작업 쳐내기</title><link>https://smallzoodev.netlify.app/_wiki/lday-01/</link><pubDate>Tue, 17 Dec 2024 19:38:35 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/lday-01/</guid><description>&lt;h2 id="목표-설정">목표 설정&lt;/h2>
&lt;p>목표를 설정하려고 어제오늘 내내 고민했고 어느정도 윤곽이 잡힌 것 같다.
지금 작업과 관련해서 할 수 있는일과, 다음 작업을 통해서 개선 할 일 두가지의 꼭지로 되어있다.&lt;/p>
&lt;p>지금 작업 관련&lt;/p>
&lt;ol>
&lt;li>hasura, gql의 문서와 레퍼런스를 보고 전시영역 backend 개선&lt;/li>
&lt;li>해당 backend 프로젝트에 테스트 코드 도입.&lt;/li>
&lt;/ol>
&lt;p>다음 작업 관련&lt;/p>
&lt;ol>
&lt;li>프로젝트가 리뉴얼 될 때 인증과 인가쪽의 리뉴얼(소셜로그인, 본인인증, 회원가입 등)도 담당했는데, 관련한 이슈가 나한테 들어온다.&lt;/li>
&lt;li>문제는 이슈가 cs센터 통해서 들어오기 전에 이슈를 파악하지 못했고&lt;/li>
&lt;li>엄청 레거시한 로깅 구조때문에 이슈를 파악하고 감지하는것도 늦었고, 실제 이슈를 해결하는데 도움을 받지 못한다.&lt;/li>
&lt;li>매번 일회성 로그를 작성하고 일부남기는 등의일을 통해 개선되지 못하고 있다.&lt;/li>
&lt;li>인증 인가쪽은 로그로 남기면 안되는 폭탄 천지라 더더욱 그런점이 심한 것 같다.&lt;/li>
&lt;li>그래서 일단 우리 레거시가 사용하는 솔루션의 로그 관련 문서도 뒤져보고, 담당자한테 물어봐서 그라파나 환경을 물어봤는데, 로키 관련 설정은 있긴 하다고 한다.&lt;/li>
&lt;li>명분도 있고 권한 관련 문제도 없어서 지금 있는 태스크를 쳐내고 여기부터 할 것 같다.&lt;/li>
&lt;/ol>
&lt;p>위 두가지는 다시 문제정의를 하고 작업을 진행할 예정&lt;/p></description></item><item><title>데이터 중심 애플리케이션 설계 11장</title><link>https://smallzoodev.netlify.app/_wiki/11%EC%9E%A5/</link><pubDate>Sun, 15 Dec 2024 22:44:03 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/11%EC%9E%A5/</guid><description>스트림 처리</description></item><item><title>데이터 중심 애플리케이션 설계 10장</title><link>https://smallzoodev.netlify.app/_wiki/10%EC%9E%A5/</link><pubDate>Sun, 15 Dec 2024 21:00:34 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/10%EC%9E%A5/</guid><description>일괄 처리</description></item><item><title>L-Day-00</title><link>https://smallzoodev.netlify.app/_wiki/l-day-00/</link><pubDate>Sat, 14 Dec 2024 12:16:01 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/l-day-00/</guid><description>준비!</description></item><item><title>mpsc refactoring review 🦀</title><link>https://smallzoodev.netlify.app/_wiki/mpsc-%EC%A7%88%EB%AC%B8-%EB%8B%B5%EB%B3%80-%EB%B0%B1%EC%97%85/</link><pubDate>Thu, 28 Nov 2024 18:23:06 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/mpsc-%EC%A7%88%EB%AC%B8-%EB%8B%B5%EB%B3%80-%EB%B0%B1%EC%97%85/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#[tokio::main]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">async&lt;/span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 1. 필요한 설정, 데이터 등을 세팅함.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> state &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> StateManager::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> config_handler &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> ConfigHandler::new(state.get_db(), state.get_config(), state.get_replication_config());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config_handler.load_config().&lt;span style="color:#cba6f7">await&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config_handler.configure_db().&lt;span style="color:#cba6f7">await&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config_handler.configure_replication().&lt;span style="color:#cba6f7">await&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> port &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> config_handler.get_port().&lt;span style="color:#cba6f7">await&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> listener &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> TcpListener::bind(&lt;span style="color:#89b4fa">format!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;127.0.0.1:&lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, port)).&lt;span style="color:#cba6f7">await&lt;/span>.unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Listening on port &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, port);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">loop&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">match&lt;/span> listener.accept().&lt;span style="color:#cba6f7">await&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 2. 스트림을 따서, 스트림을 handle_client로 전달
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#89dceb">Ok&lt;/span>((stream, _)) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> db &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> state.get_db();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> config &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> state.get_config();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> replication_config &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> state.get_replication_config();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> task::spawn(&lt;span style="color:#cba6f7">async&lt;/span> &lt;span style="color:#cba6f7">move&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 3. 딱 봐도 알 수 있겠지만, 일단 경합자원이고 뭐고 다 넘겨버린다.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> handle_client(stream, db, config, replication_config).&lt;span style="color:#cba6f7">await&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Err&lt;/span>(e) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Error accepting connection: &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// === 이하 handler.rs ===
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">pub&lt;/span> &lt;span style="color:#cba6f7">async&lt;/span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">handle_client&lt;/span>(&lt;span style="color:#cba6f7">mut&lt;/span> stream: &lt;span style="color:#f9e2af">TcpStream&lt;/span>, db: &lt;span style="color:#f9e2af">Db&lt;/span>, config: &lt;span style="color:#f9e2af">Config&lt;/span>, replication_config: &lt;span style="color:#f9e2af">ReplicationConfig&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> buffer &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">0&lt;/span>; &lt;span style="color:#fab387">512&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">loop&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buffer.fill(&lt;span style="color:#fab387">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 1. (직접 받아온 스트림에서) 버퍼로 요청 메세지를 읽는다.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">match&lt;/span> stream.read(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> buffer).&lt;span style="color:#cba6f7">await&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Ok&lt;/span>(&lt;span style="color:#fab387">0&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#cba6f7">break&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Ok&lt;/span>(n) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> message &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">match&lt;/span> std::&lt;span style="color:#f38ba8">str&lt;/span>::from_utf8(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>buffer[&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Ok&lt;/span>(msg) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> msg,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Err&lt;/span>(_) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Failed to parse message as UTF-8&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Received message: &lt;/span>&lt;span style="color:#a6e3a1">{:?}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, message);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 2. 메세지를 파싱해서, Command 객체를 (정확히는 enum)을 만들어준다.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">match&lt;/span> CommandParser::parse_message(message) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Ok&lt;/span>(command) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 3. 커맨드를 실행하는, 메서드는 다음과 같이 경합자원들을 물고 들어간다(stream, db, 등등...)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#89dceb">Err&lt;/span>(e) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> command.handle_command(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> stream, Arc::clone(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>db), Arc::clone(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>config), replication_config.clone()).&lt;span style="color:#cba6f7">await&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Failed to send response: &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Err&lt;/span>(e) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Failed to parse command: &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Err&lt;/span>(e) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Error reading from stream: &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// === 이하 command.rs ===
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">pub&lt;/span> &lt;span style="color:#cba6f7">async&lt;/span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">handle_command&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#89dceb">self&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stream: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f9e2af">mut&lt;/span> TcpStream,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> db: &lt;span style="color:#f9e2af">Db&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config: &lt;span style="color:#f9e2af">Config&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> replication_config: &lt;span style="color:#f9e2af">ReplicationConfig&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ) -&amp;gt; &lt;span style="color:#f9e2af">std&lt;/span>::io::&lt;span style="color:#89dceb">Result&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>()&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> peer_addr &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">match&lt;/span> stream.peer_addr() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Ok&lt;/span>(addr) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> addr,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Err&lt;/span>(_) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> err_response &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;-ERR Failed to retrieve client address&lt;/span>&lt;span style="color:#89b4fa">\r\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>.to_string();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stream.write_all(err_response.as_bytes()).&lt;span style="color:#cba6f7">await&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">Ok&lt;/span>(());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 1. 커맨드에서 받아온 처리 응답 결과를 경합자원인 stream에 직접 쓰는 문제.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">match&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>.execute(db, config, replication_config, peer_addr).&lt;span style="color:#cba6f7">await&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Ok&lt;/span>(responses) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> response &lt;span style="color:#cba6f7">in&lt;/span> responses {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">match&lt;/span> response {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CommandResponse::Simple(response) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stream.write_all(response.as_bytes()).&lt;span style="color:#cba6f7">await&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CommandResponse::Bulk(data) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> header &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">format!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;$&lt;/span>&lt;span style="color:#a6e3a1">{}{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, data.len(), &lt;span style="color:#f9e2af">CRLF&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stream.write_all(header.as_bytes()).&lt;span style="color:#cba6f7">await&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stream.write_all(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>data).&lt;span style="color:#cba6f7">await&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CommandResponse::EndStream &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#cba6f7">break&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Err&lt;/span>(e) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> err_response &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">format!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;-ERR &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#89b4fa">\r\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stream.write_all(err_response.as_bytes()).&lt;span style="color:#cba6f7">await&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Ok&lt;/span>(())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">pub&lt;/span> &lt;span style="color:#cba6f7">async&lt;/span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">execute&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#89dceb">self&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> db: &lt;span style="color:#f9e2af">Db&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config: &lt;span style="color:#f9e2af">Config&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> replication_config: &lt;span style="color:#f9e2af">ReplicationConfig&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> peer_addr: &lt;span style="color:#f9e2af">SocketAddr&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ) -&amp;gt; &lt;span style="color:#89dceb">Result&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>CommandResponse&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>, &lt;span style="color:#89dceb">String&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">match&lt;/span> &lt;span style="color:#89dceb">self&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 각 커맨드에 해당하는 처리 함수를 호출한다.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> Command::&lt;span style="color:#f9e2af">SET&lt;/span> { key, value, ex, px } &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#89dceb">Ok&lt;/span>(&lt;span style="color:#89b4fa">vec!&lt;/span>[CommandResponse::Simple(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Self&lt;/span>::execute_set(key, value, &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>ex, &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>px, db).&lt;span style="color:#cba6f7">await&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )]),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// (중략 ... )
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">async&lt;/span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">execute_set&lt;/span>(key: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#89dceb">String&lt;/span>, value: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#89dceb">String&lt;/span>, ex: &lt;span style="color:#89dceb">Option&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">u64&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>, px: &lt;span style="color:#89dceb">Option&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">u64&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>, db: &lt;span style="color:#f9e2af">Db&lt;/span>) -&amp;gt; &lt;span style="color:#89dceb">String&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> expiration_ms &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">match&lt;/span> (px, ex) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#89dceb">Some&lt;/span>(ms), _) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#89dceb">Some&lt;/span>(ms),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#89dceb">None&lt;/span>, &lt;span style="color:#89dceb">Some&lt;/span>(s)) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#89dceb">Some&lt;/span>(s &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#fab387">1000&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#89dceb">None&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 2. 실제 스레드에서 경합자원을 직접적으로 이용한다.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> db.write().&lt;span style="color:#cba6f7">await&lt;/span>.insert(key.clone(), ValueEntry::new_relative(value.clone(), expiration_ms));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 3. 심지어 레플리케이션 전파와 같은 로직이 늘어난다면 또하나의 경합자원을 생성한다.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#89b4fa">format!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">OK&lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, &lt;span style="color:#f9e2af">SIMPLE_STRING_PREFIX&lt;/span>, &lt;span style="color:#f9e2af">CRLF&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// ====== 이하 진행하고 있는 리팩토링 =======
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#6c7086;font-style:italic">#[tokio::main]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">async&lt;/span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> listener &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> TcpListener::bind(&lt;span style="color:#a6e3a1">&amp;#34;127.0.0.1:6379&amp;#34;&lt;/span>).&lt;span style="color:#cba6f7">await&lt;/span>.unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> client_manager &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> ClientManager::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> (tx, &lt;span style="color:#cba6f7">mut&lt;/span> rx) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mpsc::channel::&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>RedisEvent&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>(&lt;span style="color:#fab387">32&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> db &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> Arc::new(tokio::sync::RwLock::new(&lt;span style="color:#89dceb">Default&lt;/span>::default()));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> config &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> Arc::new(tokio::sync::RwLock::new(&lt;span style="color:#89dceb">Default&lt;/span>::default()));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> replication_config &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> Arc::new(tokio::sync::RwLock::new(&lt;span style="color:#89dceb">Default&lt;/span>::default()));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">//# client manager 자체를 넘기고, 아래 spawn에서는 client manager를 사용하지 않고
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#6c7086;font-style:italic">//# client추가, 삭제를 RedisEvent에 더 추가해서 넘기기 (RedisEvent::AddClient(...), RemoveClient(...))
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#6c7086;font-style:italic">//# db, config, replication_config, cilent_manager는 모두 event handler에서만 사용하게 바뀌게 되어서
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#6c7086;font-style:italic">//# Arc, RwLock 등 삭제
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> event_handler &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> EventHandler::new(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> db.clone(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config.clone(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> replication_config.clone(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> client_manager.clients.clone(), &lt;span style="color:#6c7086;font-style:italic">//# client_manager자체를 넘기고, 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> event_publisher &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> EventPublisher::new(tx);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tokio::spawn(&lt;span style="color:#cba6f7">async&lt;/span> &lt;span style="color:#cba6f7">move&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#89dceb">Ok&lt;/span>((stream, addr)) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> listener.accept().&lt;span style="color:#cba6f7">await&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">//# id는 atomic같은것을 이용해서 unique함을 보장
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> client_id &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> addr.port() &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">u64&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">//# AddClient event로 수정하면서
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#6c7086;font-style:italic">//# stream을 split 시켜서 읽는 쪽과 쓰는쪽을 분리. 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#6c7086;font-style:italic">//# 읽는쪽은 아래spawn 내부에서 사용하고, 쓰는쪽은 client에서 사용
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#6c7086;font-style:italic">//# https://docs.rs/tokio/latest/tokio/net/struct.TcpStream.html#method.split
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> client_manager.add_client(client_id, stream.try_clone().unwrap()).&lt;span style="color:#cba6f7">await&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> publisher &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> event_publisher.clone();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">//# 매니저는 event_handler에서만 존재
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> manager &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> client_manager.clone();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tokio::spawn(&lt;span style="color:#cba6f7">async&lt;/span> &lt;span style="color:#cba6f7">move&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">//# 분리한 sream중 reader 사용
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> stream &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> manager.get_stream(client_id).&lt;span style="color:#cba6f7">await&lt;/span>.unwrap().write().&lt;span style="color:#cba6f7">await&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> buffer &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">0&lt;/span>; &lt;span style="color:#fab387">1024&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">loop&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> bytes_read &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">match&lt;/span> stream.read(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> buffer).&lt;span style="color:#cba6f7">await&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Ok&lt;/span>(&lt;span style="color:#fab387">0&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#cba6f7">break&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Ok&lt;/span>(n) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> n,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Err&lt;/span>(_) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">eprintln!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Failed to read from client &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, client_id);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">//# 보낸 데이터를 한번에 다 읽는다는 보장이 없기 때문에
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#6c7086;font-style:italic">//# 보낼때도 byte len같은걸 해더에 담아 보내고
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#6c7086;font-style:italic">//# 읽을때도 해당 바이트를 다 읽을때까지 계속 돌면서 buffer를 채워야 함.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> input &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::from_utf8_lossy(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>buffer[&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>bytes_read]).to_string();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#89dceb">Err&lt;/span>(e) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> publisher.publish(client_id, input.clone()).&lt;span style="color:#cba6f7">await&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">eprintln!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Error publishing event: &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> manager.remove_client(client_id).&lt;span style="color:#cba6f7">await&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#89dceb">Some&lt;/span>(event) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> rx.recv().&lt;span style="color:#cba6f7">await&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> event_handler.handle_event(event).&lt;span style="color:#cba6f7">await&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">//# 아래에 각족 Lock, Arc는 필요성이 없다면 모두 삭제
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">pub&lt;/span> &lt;span style="color:#cba6f7">type&lt;/span> &lt;span style="color:#f9e2af">SharedClients&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> Arc&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>RwLock&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>HashMap&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">u64&lt;/span>, Arc&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Client&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">pub&lt;/span> &lt;span style="color:#cba6f7">struct&lt;/span> &lt;span style="color:#f9e2af">ClientManager&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clients: &lt;span style="color:#f9e2af">SharedClients&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">impl&lt;/span> ClientManager {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">pub&lt;/span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">new&lt;/span>() -&amp;gt; &lt;span style="color:#f9e2af">Self&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Self&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clients: &lt;span style="color:#f9e2af">Arc&lt;/span>::new(RwLock::new(HashMap::new())),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">pub&lt;/span> &lt;span style="color:#cba6f7">async&lt;/span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">add_client&lt;/span>(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#89dceb">self&lt;/span>, client_id: &lt;span style="color:#f38ba8">u64&lt;/span>, client: &lt;span style="color:#f9e2af">Client&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> clients &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>.clients.write().&lt;span style="color:#cba6f7">await&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clients.insert(client_id, Arc::new(client));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">pub&lt;/span> &lt;span style="color:#cba6f7">async&lt;/span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">remove_client&lt;/span>(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#89dceb">self&lt;/span>, client_id: &lt;span style="color:#f38ba8">u64&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> clients &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>.clients.write().&lt;span style="color:#cba6f7">await&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clients.remove(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>client_id);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">pub&lt;/span> &lt;span style="color:#cba6f7">async&lt;/span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">get_client&lt;/span>(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#89dceb">self&lt;/span>, client_id: &lt;span style="color:#f38ba8">u64&lt;/span>) -&amp;gt; &lt;span style="color:#89dceb">Option&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Arc&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Client&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> clients &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>.clients.read().&lt;span style="color:#cba6f7">await&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clients.get(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>client_id).cloned()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#[derive(Debug)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">pub&lt;/span> &lt;span style="color:#cba6f7">struct&lt;/span> &lt;span style="color:#f9e2af">Client&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">pub&lt;/span> id: &lt;span style="color:#f38ba8">u64&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">pub&lt;/span> stream: &lt;span style="color:#f9e2af">Arc&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>RwLock&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>TcpStream&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">pub&lt;/span> connected_at: &lt;span style="color:#f9e2af">Instant&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">pub&lt;/span> request_count: &lt;span style="color:#f9e2af">RwLock&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">u64&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">impl&lt;/span> Client {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">pub&lt;/span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">new&lt;/span>(id: &lt;span style="color:#f38ba8">u64&lt;/span>, stream: &lt;span style="color:#f9e2af">TcpStream&lt;/span>) -&amp;gt; &lt;span style="color:#f9e2af">Self&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Self&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stream: &lt;span style="color:#f9e2af">Arc&lt;/span>::new(RwLock::new(stream)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> connected_at: &lt;span style="color:#f9e2af">Instant&lt;/span>::now(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> request_count: &lt;span style="color:#f9e2af">RwLock&lt;/span>::new(&lt;span style="color:#fab387">0&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">pub&lt;/span> &lt;span style="color:#cba6f7">async&lt;/span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">increment_request_count&lt;/span>(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#89dceb">self&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> count &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>.request_count.write().&lt;span style="color:#cba6f7">await&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>count &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">pub&lt;/span> &lt;span style="color:#cba6f7">async&lt;/span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">get_request_count&lt;/span>(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#89dceb">self&lt;/span>) -&amp;gt; &lt;span style="color:#f38ba8">u64&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>&lt;span style="color:#89dceb">self&lt;/span>.request_count.read().&lt;span style="color:#cba6f7">await&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>난개발된 레디스를 이벤트 루프 기반으로 리팩토링하기 🥶</title><link>https://smallzoodev.netlify.app/_wiki/%EB%82%9C%EA%B0%9C%EB%B0%9C%EB%90%9C-%EB%A0%88%EB%94%94%EC%8A%A4%EB%A5%BC-%EC%9D%B4%EB%B2%A4%ED%8A%B8%EB%A3%A8%ED%94%84-%EA%B8%B0%EB%B0%98%EC%9C%BC%EB%A1%9C-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81%ED%95%98%EA%B8%B0/</link><pubDate>Tue, 26 Nov 2024 14:10:39 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/%EB%82%9C%EA%B0%9C%EB%B0%9C%EB%90%9C-%EB%A0%88%EB%94%94%EC%8A%A4%EB%A5%BC-%EC%9D%B4%EB%B2%A4%ED%8A%B8%EB%A3%A8%ED%94%84-%EA%B8%B0%EB%B0%98%EC%9C%BC%EB%A1%9C-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81%ED%95%98%EA%B8%B0/</guid><description>&lt;h2 id="prerequisite">Prerequisite&lt;/h2>
&lt;hr>
&lt;p>내가 직면한 문제는 아래의 문서에 있다.&lt;/p>
&lt;p>👉 [[Redis-Stream-Issue]]&lt;/p>
&lt;ul>
&lt;li>
&lt;p>아주 간단하게 요약하자면, 각 스레드가 스트림을 물고다니면서 태스크가 처리되고, 리소스들을 lock으로 관리한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>지금까지는 그나마 괜찮았는데, 레플리케이션의 쓰기 전파를 생각해봤을 때, 다수의 슬레이브 스트림을 락으로 관리하는 구조에서는 간단한 쓰기 요청에서도 슬레이브들의 스트림을 사용하는 쓰기 락 때문에 지나친 병목이 발생한 구조라는 것이다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>원조 레디스는 싱글스레드와 이벤트루프로 구현된다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>과정에서 좋은 방법이 없을까 하다가 찾게된건 mpsc이고 mpsc에 대한 간단한 조사를 아래의 문서에 정리했다.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>👉 [[rust-mpsc]]&lt;/p></description></item><item><title>러스트의 mpsc 🤔</title><link>https://smallzoodev.netlify.app/_wiki/rust-mpsc/</link><pubDate>Tue, 26 Nov 2024 11:03:50 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/rust-mpsc/</guid><description>&lt;h2 id="mpsc란">mpsc란?&lt;/h2>
&lt;hr>
&lt;blockquote>
&lt;p>Rust의 mpsc 채널은 &amp;ldquo;여러 생산자 (Multiple Producer)&amp;ldquo;와 &amp;ldquo;하나의 소비자 (Single Consumer)&amp;ldquo;로 메시지를 보내고 처리 할 수 있는
비동기 도구이다. 아이디어도 아이디어지만, 기본적으로 설계와 동작이 Rust의 소유권과 동시성 모델에 기반을 두고 있다.&lt;/p>&lt;/blockquote>
&lt;p>기본적인 사용 방식은 아래와 같다.&lt;/p>
&lt;p>&lt;code>mpsc::channel&lt;/code>&lt;/p>
&lt;ul>
&lt;li>tx (생산자), rx(소비자) 를 반환받는다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> tokio::sync::mpsc;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#[tokio::main]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">async&lt;/span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 채널 생성 (버퍼 크기: 32)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> (tx, &lt;span style="color:#cba6f7">mut&lt;/span> rx) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> mpsc::channel(&lt;span style="color:#fab387">32&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 생산자 (Producer)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> tokio::spawn(&lt;span style="color:#cba6f7">async&lt;/span> &lt;span style="color:#cba6f7">move&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">1&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..=&lt;/span>&lt;span style="color:#fab387">5&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// tx.send()로 채널에 메세지를 보낸다.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#89dceb">Err&lt;/span>(_) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> tx.send(&lt;span style="color:#89b4fa">format!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Message &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, i)).&lt;span style="color:#cba6f7">await&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Receiver dropped&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Sent: Message &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, i);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// 소비자 (Consumer) : rx.recv()로 수신한 메세지를 처리한다.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#cba6f7">while&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#89dceb">Some&lt;/span>(message) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> rx.recv().&lt;span style="color:#cba6f7">await&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Received: &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, message);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Sent: Message &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Received: Message &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Sent: Message &lt;span style="color:#fab387">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Received: Message &lt;span style="color:#fab387">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Sender&lt;/code>의 복제&lt;/p></description></item><item><title>Lock과 Stream을 어떻게 접근 할 것인가..</title><link>https://smallzoodev.netlify.app/_wiki/redis-stream-issue/</link><pubDate>Sun, 24 Nov 2024 00:23:54 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/redis-stream-issue/</guid><description>산넘어 산..</description></item><item><title>레디스 HandShake중 이슈 처리하기😬</title><link>https://smallzoodev.netlify.app/_wiki/redis-handshake-for-replicas/</link><pubDate>Sat, 23 Nov 2024 15:52:17 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/redis-handshake-for-replicas/</guid><description>레디스 레플리카를 등록하는 과정 중 replconf, psync를 처리하는 중 발생한 문제.</description></item><item><title>데이터 중심 어플리케이션 설계 7장</title><link>https://smallzoodev.netlify.app/_wiki/7%EC%9E%A5/</link><pubDate>Sat, 16 Nov 2024 22:39:25 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/7%EC%9E%A5/</guid><description>&lt;h1 id="07장-트랜잭션">07장 트랜잭션&lt;/h1>
&lt;blockquote>
&lt;p>어떤 저자들은 2단계 커밋에서 유발되는 성능이나 가용성 문제 때문에 생기는
비용이 너무 커서 이를 지원할 수 없다고 주장했다. 우리는 항상 트랜잭션 없이 코딩하는 것보다
트랜잭션을 과용해서 병목지점이 생기는 성능 문제를 애플리케이션 프로그래머가 처리하는게 낫다고 생각한다.&lt;/p>&lt;/blockquote>
&lt;p>냉혹한 현실 세계에서 데이터 시스템은 여러 가지 문제가 생길 수 있다.&lt;/p>
&lt;ol>
&lt;li>데이터베이스 소프트웨어나 하드웨어는 언제라도 실패할 수 있다.&lt;/li>
&lt;li>애플리케이션은 언제라도 죽을 수 있따.&lt;/li>
&lt;li>네트워크가 끊기면 애플리케이션과 데이터베이스의 연결이 갑자기 끊기거나 데이터베이스 노드 사이의 통신이 안될 수 있다.&lt;/li>
&lt;li>여러 클라이언트가 동시에 데이터베이스에 쓰기를 실행해서 다른 클라이언트가 쓴 내용을 덮어 쓸 수 있다.&lt;/li>
&lt;li>클라이언트가 부분적으로만 갱신돼서 비정상적인 데이터를 읽을 수 있다.&lt;/li>
&lt;li>클라이언트 사이의 경쟁 조건은 예측하지 못한 버그를 유발할 수 있다.&lt;/li>
&lt;/ol>
&lt;p>수십년동안 트랜잭션은 문제를 &lt;code>단순화&lt;/code>하는 방식으로 해결해왔다.
몇개의 읽기와 쓰기를 하나의 논리적 단위로 묶는 방법이다.
(하나의 쓰기가 실패하면 해당 논리적 단위가 전부 실패)&lt;/p></description></item><item><title>데이터 중심 어플리케이션 설계 6장</title><link>https://smallzoodev.netlify.app/_wiki/6%EC%9E%A5/</link><pubDate>Sat, 09 Nov 2024 21:32:25 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/6%EC%9E%A5/</guid><description>&lt;h2 id="파티셔닝">파티셔닝&lt;/h2>
&lt;blockquote>
&lt;p>데이터셋이 매우 크거나 질의 처리량이 매우 높다면 복제만으로는 부족하고, 데이터를 파티션으로 쪼갤 필요가 있다.
이 작업을 샤딩이라고 한다.&lt;/p>&lt;/blockquote>
&lt;p>데이터를 파티셔닝 하는 주된 이유는 &lt;code>확장성&lt;/code>이다.&lt;/p>
&lt;h2 id="파티셔닝과-복제">파티셔닝과 복제&lt;/h2>
&lt;p>파티셔닝을 해도, 파티션 된 단위를 기준으로는 복제를 할 수 있다.
한 노드에 여러 파티션을 복제 할 수도 있어서, 노드 하나에 특정 파티션의 리더와 나머지 파티션의 복제를 가지는식으로 교차해 두기도 한다.&lt;/p>
&lt;h2 id="키-값-데이터-파티셔닝">키-값 데이터 파티셔닝&lt;/h2>
&lt;p>파티셔닝의 목적은 데이터와 질의 부하를 분산시키는 것이다.
이것이 달성되지 않았을 때 &lt;code>쏠렸다(skewed)&lt;/code> 라고 한다.
이러한 쏠림이 발생하면, 특정 파티션에만 부하가 몰리게 되고, 다른 파티션은 거의 사용되지 않는 병목이 발생한다.
그 때 몰린 파티션을 &lt;code>핫스팟&lt;/code> 이라고 한다.&lt;/p></description></item><item><title/><link>https://smallzoodev.netlify.app/_wiki/rust-redis-d4/</link><pubDate>Thu, 07 Nov 2024 19:19:31 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/rust-redis-d4/</guid><description>&lt;h2 id="rust-redis-d4-code-">Rust-Redis-D4 Code 🥸&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> &lt;span style="color:#cba6f7">crate&lt;/span>::protocol_constants::{&lt;span style="color:#f9e2af">MAGIC_NUMBER&lt;/span>, &lt;span style="color:#f9e2af">OPCODE_EOF&lt;/span>, &lt;span style="color:#f9e2af">OPCODE_META&lt;/span>, &lt;span style="color:#f9e2af">OPCODE_START_DB&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> &lt;span style="color:#cba6f7">crate&lt;/span>::{Config, Db, ValueEntry};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> byteorder::{LittleEndian, ReadBytesExt};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> crc::{Crc, &lt;span style="color:#f9e2af">CRC_64_ECMA_182&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::fs::File;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io::{&lt;span style="color:#89dceb">self&lt;/span>, BufReader, Read, Seek, SeekFrom};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">bytes_to_hex&lt;/span>(bytes: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>[&lt;span style="color:#f38ba8">u8&lt;/span>]) -&amp;gt; &lt;span style="color:#89dceb">String&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> bytes.iter().map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>b&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> &lt;span style="color:#89b4fa">format!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>&lt;span style="color:#a6e3a1">{:02X}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, b)).collect::&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#89dceb">Vec&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#89dceb">String&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span>().join(&lt;span style="color:#a6e3a1">&amp;#34; &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">read_length_or_integer&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>R: &lt;span style="color:#f9e2af">Read&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>(reader: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f9e2af">mut&lt;/span> R, first_byte: &lt;span style="color:#f38ba8">u8&lt;/span>) -&amp;gt; &lt;span style="color:#f9e2af">io&lt;/span>::&lt;span style="color:#89dceb">Result&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">usize&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">match&lt;/span> first_byte &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#fab387">6&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fab387">0b00&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#89dceb">Ok&lt;/span>((first_byte &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#fab387">0x3F&lt;/span>) &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fab387">0b01&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> second_byte &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> reader.read_u8()&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Ok&lt;/span>((((first_byte &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#fab387">0x3F&lt;/span>) &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#fab387">8&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> (second_byte &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fab387">0b10&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> reader.read_u32::&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>LittleEndian&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>().map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>len&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> len &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fab387">0b11&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#cba6f7">match&lt;/span> first_byte &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> &lt;span style="color:#fab387">0x3F&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#89dceb">Ok&lt;/span>(reader.read_u8()&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span> &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#89dceb">Ok&lt;/span>(reader.read_u16::&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>LittleEndian&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>()&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span> &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fab387">2&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#89dceb">Ok&lt;/span>(reader.read_u32::&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>LittleEndian&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>()&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span> &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#89dceb">Err&lt;/span>(io::Error::new(io::ErrorKind::InvalidData, &lt;span style="color:#a6e3a1">&amp;#34;Unsupported encoding type&amp;#34;&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#89dceb">Err&lt;/span>(io::Error::new(io::ErrorKind::InvalidData, &lt;span style="color:#a6e3a1">&amp;#34;Invalid length encoding&amp;#34;&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">pub&lt;/span> &lt;span style="color:#cba6f7">async&lt;/span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">run&lt;/span>(db: &lt;span style="color:#f9e2af">Db&lt;/span>, config: &lt;span style="color:#f9e2af">Config&lt;/span>) -&amp;gt; &lt;span style="color:#f9e2af">io&lt;/span>::&lt;span style="color:#89dceb">Result&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>()&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> config_read &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> config.read().&lt;span style="color:#cba6f7">await&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> dir &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> config_read.get(&lt;span style="color:#a6e3a1">&amp;#34;dir&amp;#34;&lt;/span>).cloned().unwrap_or_else(&lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&lt;/span>.to_string());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> db_file_name &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> config_read.get(&lt;span style="color:#a6e3a1">&amp;#34;dbfilename&amp;#34;&lt;/span>).cloned().unwrap_or_else(&lt;span style="color:#89dceb;font-weight:bold">||&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&lt;/span>.to_string());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> path &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;&amp;#34;&lt;/span>.to_string();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>dir.is_empty() &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>db_file_name.is_empty() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Initiating Redis with Data File&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">format!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">/&lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, dir, db_file_name);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Initiating Redis without Data File&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">Ok&lt;/span>(());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> file &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> File::open(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>path)&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> reader &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> BufReader::new(file);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> magic &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">0&lt;/span>; &lt;span style="color:#fab387">5&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reader.read_exact(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> magic)&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>magic &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> &lt;span style="color:#f9e2af">MAGIC_NUMBER&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">eprintln!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Invalid RDB file format.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">Ok&lt;/span>(());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Valid Redis RDB file detected.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> version &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">0&lt;/span>; &lt;span style="color:#fab387">4&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reader.read_exact(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> version)&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;RDB Version: &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, &lt;span style="color:#89dceb">String&lt;/span>::from_utf8_lossy(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>version));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">loop&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> marker &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">0&lt;/span>; &lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> reader.read_exact(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> marker).is_err() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Reached the end of file.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">match&lt;/span> marker[&lt;span style="color:#fab387">0&lt;/span>] {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f9e2af">OPCODE_META&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> first_key_byte &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> reader.read_u8()&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> key_length &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> read_length_or_integer(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> reader, first_key_byte)&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> key_bytes &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#fab387">0&lt;/span>; key_length];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reader.read_exact(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> key_bytes)&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> key &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::from_utf8_lossy(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>key_bytes);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Metadata key: &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, key);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> first_value_byte &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> reader.read_u8()&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> first_value_byte &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#fab387">6&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0b11&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> value &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> read_length_or_integer(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> reader, first_value_byte)&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Metadata value : &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, value);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> value_length &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> read_length_or_integer(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> reader, first_value_byte)&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> value_bytes &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#fab387">0&lt;/span>; value_length];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reader.read_exact(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> value_bytes)&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">match&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::from_utf8(value_bytes.clone()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Ok&lt;/span>(value) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Metadata value: &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, value),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Err&lt;/span>(_) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> hex_value &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> bytes_to_hex(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>value_bytes);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Invalid UTF-8 in metadata value, raw HEX bytes: &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, hex_value);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f9e2af">OPCODE_START_DB&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Detected start of new database.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> db_index &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> reader.read_u8()&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Database index: &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, db_index);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fab387">0xFB&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Resizedb field detected.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> total_size &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> reader.read_u8()&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> expires_size &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> reader.read_u8()&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Hash table size: &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">, Expires table size: &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, total_size, expires_size);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fab387">0xFD&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> &lt;span style="color:#fab387">0xFC&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> expiry_type &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> marker[&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0xFD&lt;/span> { &lt;span style="color:#a6e3a1">&amp;#34;seconds&amp;#34;&lt;/span> } &lt;span style="color:#cba6f7">else&lt;/span> { &lt;span style="color:#a6e3a1">&amp;#34;milliseconds&amp;#34;&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> expiration &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> expiry_type &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;seconds&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Some&lt;/span>(reader.read_u32::&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>LittleEndian&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>()&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span> &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">u64&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Some&lt;/span>(reader.read_u64::&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>LittleEndian&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>()&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> value_type &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> reader.read_u8()&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Value type ::::: &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, value_type);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> key_length &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> reader.read_u8()&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span> &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> key &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#fab387">0&lt;/span>; key_length];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reader.read_exact(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> key)&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> key_str &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::from_utf8_lossy(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>key).to_string();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> value_length &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> reader.read_u8()&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span> &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> value &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#fab387">0&lt;/span>; value_length];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reader.read_exact(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> value)&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> value_str &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::from_utf8_lossy(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>value).to_string();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> entry &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> ValueEntry::new(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> value_str.clone(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> marker[&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0xFD&lt;/span> { expiration } &lt;span style="color:#cba6f7">else&lt;/span> { &lt;span style="color:#89dceb">None&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> marker[&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0xFC&lt;/span> { expiration } &lt;span style="color:#cba6f7">else&lt;/span> { &lt;span style="color:#89dceb">None&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> db.write().&lt;span style="color:#cba6f7">await&lt;/span>.insert(key_str.clone(), entry);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Inserted key: &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1"> with value: &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, key_str, value_str);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fab387">0x00&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Processing key-value pair without expiration.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> key_length &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> reader.read_u8()&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span> &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> key &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#fab387">0&lt;/span>; key_length];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reader.read_exact(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> key)&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> key_str &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::from_utf8_lossy(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>key).to_string();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> value_length &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> reader.read_u8()&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span> &lt;span style="color:#cba6f7">as&lt;/span> &lt;span style="color:#f38ba8">usize&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> value &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89b4fa">vec!&lt;/span>[&lt;span style="color:#fab387">0&lt;/span>; value_length];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reader.read_exact(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> value)&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> value_str &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::from_utf8_lossy(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>value).to_string();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> entry &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> ValueEntry::new(value_str.clone(), &lt;span style="color:#89dceb">None&lt;/span>, &lt;span style="color:#89dceb">None&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> db.write().&lt;span style="color:#cba6f7">await&lt;/span>.insert(key_str.clone(), entry);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Inserted key: &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1"> with value: &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, key_str, value_str);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f9e2af">OPCODE_EOF&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Reached end of RDB file.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> checksum_bytes &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">0&lt;/span>; &lt;span style="color:#fab387">8&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reader.read_exact(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> checksum_bytes)&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> read_checksum &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#f38ba8">u64&lt;/span>::from_le_bytes(checksum_bytes);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Read checksum (Little-Endian): &lt;/span>&lt;span style="color:#a6e3a1">{:X}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, read_checksum);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reader.seek(SeekFrom::Start(&lt;span style="color:#fab387">0&lt;/span>))&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> buffer &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">Vec&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> reader.read_to_end(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> buffer)&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> data_to_hash &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>buffer[&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>buffer.len() &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span> &lt;span style="color:#fab387">8&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Data length for checksum calculation: &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, data_to_hash.len());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Data (first 64 bytes for check): &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, bytes_to_hex(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>data_to_hash[&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>&lt;span style="color:#fab387">64.&lt;/span>min(data_to_hash.len())]));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> crc &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> Crc::&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">u64&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>::new(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#f9e2af">CRC_64_ECMA_182&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> calculated_checksum &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> crc.checksum(data_to_hash);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Calculated checksum: &lt;/span>&lt;span style="color:#a6e3a1">{:X}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, calculated_checksum);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> calculated_checksum &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> read_checksum {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Checksum valid.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">eprintln!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Checksum invalid! Expected: &lt;/span>&lt;span style="color:#a6e3a1">{:X}&lt;/span>&lt;span style="color:#a6e3a1">, Got: &lt;/span>&lt;span style="color:#a6e3a1">{:X}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, read_checksum, calculated_checksum);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">eprintln!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Unknown or unsupported marker: 0x&lt;/span>&lt;span style="color:#a6e3a1">{:02X}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, marker[&lt;span style="color:#fab387">0&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Ok&lt;/span>(())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>일단 레포를 따로 올릴 수 있다는걸 알아서 주요한 부분만 올려놓았다.&lt;/li>
&lt;li>오래걸리긴 했는데, 그게 내가 스테이지과제가 저rdb(redis database) 파일을 읽어야 하는 부분을 전부 구현해야 한다고 생각해서 그런 것 같다.&lt;/li>
&lt;li>코드를 submit하니까 4단계가 clear 되어 뛰어넘었다.&lt;/li>
&lt;li>말하는중에 생각이나서 조금 더 하고 와야겠다.&lt;/li>
&lt;/ul></description></item><item><title>Build Redis With Rust 🦀</title><link>https://smallzoodev.netlify.app/_wiki/rust-redis-d3/</link><pubDate>Sat, 02 Nov 2024 17:20:03 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/rust-redis-d3/</guid><description>&lt;h2 id="day-3-코드">Day 3 코드&lt;/h2>
&lt;hr>
&lt;p>&lt;code>command.rs&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> &lt;span style="color:#cba6f7">crate&lt;/span>::{Config, Db, ValueEntry};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> tokio::io::AsyncWriteExt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> tokio::net::TcpStream;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">pub&lt;/span> &lt;span style="color:#cba6f7">enum&lt;/span> &lt;span style="color:#f9e2af">Command&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f9e2af">PING&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f9e2af">ECHO&lt;/span>(&lt;span style="color:#89dceb">String&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f9e2af">GET&lt;/span>(&lt;span style="color:#89dceb">String&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f9e2af">SET&lt;/span> { key: &lt;span style="color:#89dceb">String&lt;/span>, value: &lt;span style="color:#89dceb">String&lt;/span>, px: &lt;span style="color:#89dceb">Option&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">u64&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>, ex: &lt;span style="color:#89dceb">Option&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">u64&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f9e2af">CONFIG&lt;/span>(ConfigCommand),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">pub&lt;/span> &lt;span style="color:#cba6f7">enum&lt;/span> &lt;span style="color:#f9e2af">ConfigCommand&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f9e2af">GET&lt;/span>(&lt;span style="color:#89dceb">String&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">impl&lt;/span> Command {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">pub&lt;/span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">parse_message&lt;/span>(message: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f38ba8">str&lt;/span>) -&amp;gt; &lt;span style="color:#89dceb">Result&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Command, &lt;span style="color:#89dceb">String&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> lines &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> message.lines();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> first_line &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().ok_or(&lt;span style="color:#a6e3a1">&amp;#34;Argument Error : Empty message&amp;#34;&lt;/span>)&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> first_line.starts_with(&lt;span style="color:#a6e3a1">&amp;#39;*&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> num_args: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> first_line[&lt;span style="color:#fab387">1&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>].parse().map_err(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>_&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Invalid array size&amp;#34;&lt;/span>)&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> args &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">Vec&lt;/span>::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> _ &lt;span style="color:#cba6f7">in&lt;/span> &lt;span style="color:#fab387">0&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>num_args {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> bulk_len_line &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().ok_or(&lt;span style="color:#a6e3a1">&amp;#34;Missing bulk length&amp;#34;&lt;/span>)&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>bulk_len_line.starts_with(&lt;span style="color:#a6e3a1">&amp;#39;$&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">Err&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Invalid bulk string format&amp;#34;&lt;/span>.into());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> bulk_len: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> bulk_len_line[&lt;span style="color:#fab387">1&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>].parse().map_err(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>_&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Invalid bulk length&amp;#34;&lt;/span>)&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> bulk_string &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> lines.next().ok_or(&lt;span style="color:#a6e3a1">&amp;#34;Missing bulk string&amp;#34;&lt;/span>)&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> bulk_string.len() &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> bulk_len {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">Err&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Bulk string length mismatch&amp;#34;&lt;/span>.into());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> args.push(bulk_string.to_string());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#89dceb">Some&lt;/span>(command_name) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> args.get(&lt;span style="color:#fab387">0&lt;/span>).map(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>s&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> s.as_str()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">match&lt;/span> command_name {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;PING&amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> Command::parse_ping(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>args),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;ECHO&amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> Command::parse_echo(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>args),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;GET&amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> Command::parse_get(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>args),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;SET&amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> Command::parse_set(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>args),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;CONFIG&amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> Command::parse_config(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>args),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#89dceb">Err&lt;/span>(&lt;span style="color:#89b4fa">format!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Unknown command: &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, command_name)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Err&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Empty command&amp;#34;&lt;/span>.into())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Err&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Unsupported protocol type&amp;#34;&lt;/span>.into())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">pub&lt;/span> &lt;span style="color:#cba6f7">async&lt;/span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">handle_command&lt;/span>(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#89dceb">self&lt;/span>, stream: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f9e2af">mut&lt;/span> TcpStream, db: &lt;span style="color:#f9e2af">Db&lt;/span>, config: &lt;span style="color:#f9e2af">Config&lt;/span>) -&amp;gt; &lt;span style="color:#f9e2af">std&lt;/span>::io::&lt;span style="color:#89dceb">Result&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>()&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> response &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>.execute(db, config).&lt;span style="color:#cba6f7">await&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stream.write_all(response.as_bytes()).&lt;span style="color:#cba6f7">await&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Ok&lt;/span>(())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">pub&lt;/span> &lt;span style="color:#cba6f7">async&lt;/span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">execute&lt;/span>(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#89dceb">self&lt;/span>, db: &lt;span style="color:#f9e2af">Db&lt;/span>, config: &lt;span style="color:#f9e2af">Config&lt;/span>) -&amp;gt; &lt;span style="color:#89dceb">String&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">match&lt;/span> &lt;span style="color:#89dceb">self&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Command::&lt;span style="color:#f9e2af">PING&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;+PONG&lt;/span>&lt;span style="color:#89b4fa">\r\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>.to_string(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Command::&lt;span style="color:#f9e2af">ECHO&lt;/span>(echo_message) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#89b4fa">format!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;$&lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#89b4fa">\r\n&lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#89b4fa">\r\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, echo_message.len(), echo_message),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Command::&lt;span style="color:#f9e2af">GET&lt;/span>(key) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#89dceb">Self&lt;/span>::execute_get(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>key, db).&lt;span style="color:#cba6f7">await&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Command::&lt;span style="color:#f9e2af">SET&lt;/span> { key, value, ex, px } &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#89dceb">Self&lt;/span>::execute_set(key, value, &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>ex, &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>px, db).&lt;span style="color:#cba6f7">await&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Command::&lt;span style="color:#f9e2af">CONFIG&lt;/span>(command) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#89dceb">Self&lt;/span>::execute_config(command, config).&lt;span style="color:#cba6f7">await&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">async&lt;/span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">execute_get&lt;/span>(key: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#89dceb">String&lt;/span>, db: &lt;span style="color:#f9e2af">Db&lt;/span>) -&amp;gt; &lt;span style="color:#89dceb">String&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">match&lt;/span> db.read().&lt;span style="color:#cba6f7">await&lt;/span>.get(key) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Some&lt;/span>(value_entry) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> value_entry.is_expired() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;$-1&lt;/span>&lt;span style="color:#89b4fa">\r\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>.to_string()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">format!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;$&lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#89b4fa">\r\n&lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#89b4fa">\r\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, value_entry.value.len(), value_entry.value.clone())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">None&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;$-1&lt;/span>&lt;span style="color:#89b4fa">\r\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>.to_string(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">async&lt;/span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">execute_set&lt;/span>(key: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#89dceb">String&lt;/span>, value: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#89dceb">String&lt;/span>, ex: &lt;span style="color:#89dceb">Option&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">u64&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>, px: &lt;span style="color:#89dceb">Option&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">u64&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>, db: &lt;span style="color:#f9e2af">Db&lt;/span>) -&amp;gt; &lt;span style="color:#89dceb">String&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> db.write().&lt;span style="color:#cba6f7">await&lt;/span>.insert(key.clone(), ValueEntry::new(value.clone(), ex, px));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;+OK&lt;/span>&lt;span style="color:#89b4fa">\r\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>.to_string()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">async&lt;/span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">execute_config&lt;/span>(command: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f9e2af">ConfigCommand&lt;/span>, config: &lt;span style="color:#f9e2af">Config&lt;/span>) -&amp;gt; &lt;span style="color:#89dceb">String&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">match&lt;/span> command {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ConfigCommand::&lt;span style="color:#f9e2af">GET&lt;/span>(key) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">match&lt;/span> config.read().&lt;span style="color:#cba6f7">await&lt;/span>.get(key.as_str()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Some&lt;/span>(value) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">format!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;*2&lt;/span>&lt;span style="color:#89b4fa">\r\n&lt;/span>&lt;span style="color:#a6e3a1">$&lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#89b4fa">\r\n&lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#89b4fa">\r\n&lt;/span>&lt;span style="color:#a6e3a1">$&lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#89b4fa">\r\n&lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#89b4fa">\r\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, key.len(), key, value.len(), value)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">None&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;$-1&lt;/span>&lt;span style="color:#89b4fa">\r\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>.to_string(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">parse_ping&lt;/span>(args: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>[&lt;span style="color:#89dceb">String&lt;/span>]) -&amp;gt; &lt;span style="color:#89dceb">Result&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Command, &lt;span style="color:#89dceb">String&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>(args.len() &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">Err&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Argument Error : PING command takes no arguments&amp;#34;&lt;/span>.into());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Ok&lt;/span>(Command::&lt;span style="color:#f9e2af">PING&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">parse_echo&lt;/span>(args: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>[&lt;span style="color:#89dceb">String&lt;/span>]) -&amp;gt; &lt;span style="color:#89dceb">Result&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Command, &lt;span style="color:#89dceb">String&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>(args.len() &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">2&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">Err&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Argument Error : ECHO command takes only one argument&amp;#34;&lt;/span>.into());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Ok&lt;/span>(Command::&lt;span style="color:#f9e2af">ECHO&lt;/span>(args[&lt;span style="color:#fab387">1&lt;/span>].clone()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">parse_get&lt;/span>(args: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>[&lt;span style="color:#89dceb">String&lt;/span>]) -&amp;gt; &lt;span style="color:#89dceb">Result&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Command, &lt;span style="color:#89dceb">String&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>(args.len() &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">2&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">Err&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Argument Error : GET command takes only one argument&amp;#34;&lt;/span>.into());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Ok&lt;/span>(Command::&lt;span style="color:#f9e2af">GET&lt;/span>(args[&lt;span style="color:#fab387">1&lt;/span>].clone()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">parse_set&lt;/span>(args: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>[&lt;span style="color:#89dceb">String&lt;/span>]) -&amp;gt; &lt;span style="color:#89dceb">Result&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Command, &lt;span style="color:#89dceb">String&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> args.len() &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#fab387">3&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">Err&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Argument Error : SET requires at least key value argument&amp;#34;&lt;/span>.into());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> key &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> args[&lt;span style="color:#fab387">1&lt;/span>].clone();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> value &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> args[&lt;span style="color:#fab387">2&lt;/span>].clone();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> ex &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">None&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> px &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">None&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> arg_index &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">3&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> arg_index &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> args.len() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">match&lt;/span> args[arg_index].to_uppercase().as_str() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;PX&amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> arg_index &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> args.len() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> px &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">Some&lt;/span>(args[arg_index &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>].parse::&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">u64&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>().map_err(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>_&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Argument Error : Invalid px value&amp;#34;&lt;/span>)&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arg_index &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">Err&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Argument Error : Px option argument err&amp;#34;&lt;/span>.into());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;EX&amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> arg_index &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> args.len() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ex &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">Some&lt;/span>(args[arg_index &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>].parse::&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">u64&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>().map_err(&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>_&lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Argument Error : Invalid ex value&amp;#34;&lt;/span>)&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> arg_index &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">2&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">Err&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Argument Error : Ex option argument err&amp;#34;&lt;/span>.into());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">Err&lt;/span>(&lt;span style="color:#89b4fa">format!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Argument Error: &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1"> unknown option&amp;#34;&lt;/span>, args[arg_index]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Ok&lt;/span>(Command::&lt;span style="color:#f9e2af">SET&lt;/span> { key, value, ex, px })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">parse_config&lt;/span>(args: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>[&lt;span style="color:#89dceb">String&lt;/span>]) -&amp;gt; &lt;span style="color:#89dceb">Result&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Command, &lt;span style="color:#89dceb">String&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">match&lt;/span> args[&lt;span style="color:#fab387">1&lt;/span>].to_uppercase().as_str() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;GET&amp;#34;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Ok&lt;/span>(Command::&lt;span style="color:#f9e2af">CONFIG&lt;/span>(ConfigCommand::&lt;span style="color:#f9e2af">GET&lt;/span>(args[&lt;span style="color:#fab387">2&lt;/span>].clone())))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#89dceb">Err&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Argument Error : Unsupported CONFIG subcommand!&amp;#34;&lt;/span>.into()),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>handler.rs&lt;/code>&lt;/p></description></item><item><title>데이터 중심 애플리케이션 설계 5장</title><link>https://smallzoodev.netlify.app/_wiki/5%EC%9E%A5/</link><pubDate>Thu, 31 Oct 2024 19:51:28 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/5%EC%9E%A5/</guid><description>&lt;h2 id="about-part-2">About Part 2&lt;/h2>
&lt;blockquote>
&lt;p>저장소와 데이터 검색에 여러 장비가 관여한다면 어떻게 될까?
이번 장에서는 분산 데이터에 대해 다룬다.&lt;/p>&lt;/blockquote>
&lt;p>여러 장비가 필요한 이유&lt;/p>
&lt;ol>
&lt;li>확장성 : 부하를 분산시킬수 있다.&lt;/li>
&lt;li>내결함성/고가용성 : 장애가 발생해도 시스템이 계속 동작할 수 있다.&lt;/li>
&lt;li>지연시간 : 사용자 가까이 데이터를 분산시킬 수 있다.&lt;/li>
&lt;/ol>
&lt;p>공유 메모리 아키텍처, 공유 디스크 아키텍처&lt;/p>
&lt;ul>
&lt;li>많은 CPU, 메모리, 디스크를 하나의 운영체제로 합친다.&lt;/li>
&lt;li>단순한 구조에 어느정도 내결함성을 가진다.&lt;/li>
&lt;li>선형적이지 않은 비용증가, 제한적인 내결함성이 단점이다.&lt;/li>
&lt;/ul>
&lt;p>비공유 아키텍처&lt;/p></description></item><item><title>Rust-Redis-D2</title><link>https://smallzoodev.netlify.app/_wiki/rust-redis-d2/</link><pubDate>Thu, 31 Oct 2024 19:26:52 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/rust-redis-d2/</guid><description>&lt;h2 id="1-code">1. Code&lt;/h2>
&lt;hr>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> regex::Regex;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::collections::HashMap;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::sync::Arc;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> tokio::io::{AsyncReadExt, AsyncWriteExt};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> tokio::net::{TcpListener, TcpStream};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> tokio::sync::RwLock;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> tokio::task;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">type&lt;/span> &lt;span style="color:#f9e2af">Db&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> Arc&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>RwLock&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>HashMap&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#89dceb">String&lt;/span>, &lt;span style="color:#89dceb">String&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&amp;gt;&amp;gt;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">enum&lt;/span> &lt;span style="color:#f9e2af">Command&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f9e2af">PING&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f9e2af">ECHO&lt;/span>(&lt;span style="color:#89dceb">String&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f9e2af">GET&lt;/span>(&lt;span style="color:#89dceb">String&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f9e2af">SET&lt;/span>(&lt;span style="color:#89dceb">String&lt;/span>, &lt;span style="color:#89dceb">String&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">impl&lt;/span> Command {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">parse_message&lt;/span>(message: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f38ba8">str&lt;/span>) -&amp;gt; &lt;span style="color:#89dceb">Result&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Command, &lt;span style="color:#89dceb">String&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> re_ping &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> Regex::new(&lt;span style="color:#f38ba8">r&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;^\*1\r\n\$4\r\nPING\r\n$&amp;#34;&lt;/span>).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> re_echo &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> Regex::new(&lt;span style="color:#f38ba8">r&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;^\*2\r\n\$4\r\nECHO\r\n\$(\d+)\r\n(.+)\r\n$&amp;#34;&lt;/span>).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> re_get &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> Regex::new(&lt;span style="color:#f38ba8">r&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;^\*2\r\n\$3\r\nGET\r\n\$(\d+)\r\n(.+)\r\n$&amp;#34;&lt;/span>).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> re_set &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> Regex::new(&lt;span style="color:#f38ba8">r&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;^\*3\r\n\$3\r\nSET\r\n\$(\d+)\r\n(.+)\r\n\$(\d+)\r\n(.+)\r\n$&amp;#34;&lt;/span>).unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> re_ping.is_match(message) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Ok&lt;/span>(Command::&lt;span style="color:#f9e2af">PING&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#89dceb">Some&lt;/span>(captures) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> re_echo.captures(message) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> length: &lt;span style="color:#f38ba8">usize&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> captures[&lt;span style="color:#fab387">1&lt;/span>].parse().unwrap_or(&lt;span style="color:#fab387">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> echo_message &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>captures[&lt;span style="color:#fab387">2&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> echo_message.len() &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> length {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Ok&lt;/span>(Command::&lt;span style="color:#f9e2af">ECHO&lt;/span>(echo_message.to_string()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Err&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Invalid ECHO command format: length mismatch&amp;#34;&lt;/span>.to_string())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#89dceb">Some&lt;/span>(captures) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> re_get.captures(message) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> key &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> captures[&lt;span style="color:#fab387">2&lt;/span>].to_string();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Ok&lt;/span>(Command::&lt;span style="color:#f9e2af">GET&lt;/span>(key))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#89dceb">Some&lt;/span>(captures) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> re_set.captures(message) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> key &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> captures[&lt;span style="color:#fab387">2&lt;/span>].to_string();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> value &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> captures[&lt;span style="color:#fab387">4&lt;/span>].to_string();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Ok&lt;/span>(Command::&lt;span style="color:#f9e2af">SET&lt;/span>(key, value))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Err&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Unknown command&amp;#34;&lt;/span>.to_string())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">async&lt;/span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">handle_command&lt;/span>(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#89dceb">self&lt;/span>, stream: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#f9e2af">mut&lt;/span> TcpStream, db: &lt;span style="color:#f9e2af">Db&lt;/span>) -&amp;gt; &lt;span style="color:#f9e2af">std&lt;/span>::io::&lt;span style="color:#89dceb">Result&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>()&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> response &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>.execute(db).&lt;span style="color:#cba6f7">await&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stream.write_all(response.as_bytes()).&lt;span style="color:#cba6f7">await&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Ok&lt;/span>(())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">async&lt;/span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">execute&lt;/span>(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#89dceb">self&lt;/span>, db: &lt;span style="color:#f9e2af">Db&lt;/span>) -&amp;gt; &lt;span style="color:#89dceb">String&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">match&lt;/span> &lt;span style="color:#89dceb">self&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Command::&lt;span style="color:#f9e2af">PING&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;+PONG&lt;/span>&lt;span style="color:#89b4fa">\r\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>.to_string(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Command::&lt;span style="color:#f9e2af">ECHO&lt;/span>(echo_message) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#89b4fa">format!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;$&lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#89b4fa">\r\n&lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#89b4fa">\r\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, echo_message.len(), echo_message),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Command::&lt;span style="color:#f9e2af">GET&lt;/span>(key) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#89dceb">Self&lt;/span>::execute_get(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>key, db).&lt;span style="color:#cba6f7">await&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Command::&lt;span style="color:#f9e2af">SET&lt;/span>(key, value) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#89dceb">Self&lt;/span>::execute_set(key, value, db).&lt;span style="color:#cba6f7">await&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">async&lt;/span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">execute_get&lt;/span>(key: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#89dceb">String&lt;/span>, db: &lt;span style="color:#f9e2af">Db&lt;/span>) -&amp;gt; &lt;span style="color:#89dceb">String&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">match&lt;/span> db.read().&lt;span style="color:#cba6f7">await&lt;/span>.get(key) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Some&lt;/span>(value) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#89b4fa">format!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;$&lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#89b4fa">\r\n&lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#89b4fa">\r\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, value.len(), value),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">None&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;$-1&lt;/span>&lt;span style="color:#89b4fa">\r\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>.to_string()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">async&lt;/span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">execute_set&lt;/span>(key: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#89dceb">String&lt;/span>, value: &lt;span style="color:#cba6f7">&amp;amp;&lt;/span>&lt;span style="color:#89dceb">String&lt;/span>, db: &lt;span style="color:#f9e2af">Db&lt;/span>) -&amp;gt; &lt;span style="color:#89dceb">String&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> db.write().&lt;span style="color:#cba6f7">await&lt;/span>.insert(key.clone(), value.clone());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;+OK&lt;/span>&lt;span style="color:#89b4fa">\r\n&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>.to_string()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#[tokio::main]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">async&lt;/span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> listener &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> TcpListener::bind(&lt;span style="color:#a6e3a1">&amp;#34;127.0.0.1:6379&amp;#34;&lt;/span>).&lt;span style="color:#cba6f7">await&lt;/span>.unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> db &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> Arc::new(RwLock::new(HashMap::new()));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">loop&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">match&lt;/span> listener.accept().&lt;span style="color:#cba6f7">await&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Ok&lt;/span>((stream, _)) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> db_clone &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> Arc::clone(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>db);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> task::spawn(&lt;span style="color:#cba6f7">async&lt;/span> &lt;span style="color:#cba6f7">move&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> handle_client(stream, db_clone).&lt;span style="color:#cba6f7">await&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Err&lt;/span>(e) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Error accepting connection : &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">async&lt;/span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">handle_client&lt;/span>(&lt;span style="color:#cba6f7">mut&lt;/span> stream: &lt;span style="color:#f9e2af">TcpStream&lt;/span>, db: &lt;span style="color:#f9e2af">Db&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> buffer &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> [&lt;span style="color:#fab387">0&lt;/span>; &lt;span style="color:#fab387">512&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">loop&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> buffer.fill(&lt;span style="color:#fab387">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">match&lt;/span> stream.read(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> buffer).&lt;span style="color:#cba6f7">await&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Ok&lt;/span>(&lt;span style="color:#fab387">0&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#cba6f7">break&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Ok&lt;/span>(n) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> message &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">match&lt;/span> std::&lt;span style="color:#f38ba8">str&lt;/span>::from_utf8(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>buffer[&lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>n]) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Ok&lt;/span>(msg) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> msg,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Err&lt;/span>(_) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Failed to parse message as UTF-8&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Received message: &lt;/span>&lt;span style="color:#a6e3a1">{:?}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, message);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">match&lt;/span> Command::parse_message(message) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Ok&lt;/span>(command) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#89dceb">Err&lt;/span>(e) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> command.handle_command(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> stream, Arc::clone(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>db)).&lt;span style="color:#cba6f7">await&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Failed to send response: &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Err&lt;/span>(e) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Failed to parse command: &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">Err&lt;/span>(e) &lt;span style="color:#89dceb;font-weight:bold">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Error reading from stream: &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, e);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-review">2. Review&lt;/h2>
&lt;ol>
&lt;li>정말 간단한 리팩토링을 진행했다, 정말 보기 싫은 것들만 정리했고, 모듈 분리는 일단 계속 해보다가 할 것 같다.(포스팅 하기 편하고, 사이트에서 리뷰받기가 수월한 것 같다)&lt;/li>
&lt;li>Tokio의 &lt;code>RwLock&lt;/code>을 사용했는데, 이것은 &lt;code>Mutex&lt;/code>와 비슷하지만 읽기 전용 락을 여러 스레드가 가질 수 있다.&lt;/li>
&lt;li>그리고 SET, GET을 추가했다.&lt;/li>
&lt;li>명령을 파싱하는 부분이 정규식 쓰는것도 그렇고 너무 마음에 안들고 더럽다, 레디스 프로토콜이 있다는걸 생각하면 좋은 방법이 있을것같아서 생각해봐야겠다.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>생각해본 절차는 명령어를 먼저 뽑고, 그 다음을 프로토콜대로 파싱하면 key-val 혹은 match하는 구조로 만들 수 있을 것 같다.&lt;/li>
&lt;li>일단 빨리 프로토콜을 봐야지..&lt;/li>
&lt;/ul></description></item><item><title>Rust-Redis-D1</title><link>https://smallzoodev.netlify.app/_wiki/rust-redis-d1/</link><pubDate>Wed, 30 Oct 2024 20:28:17 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/rust-redis-d1/</guid><description>&lt;h2 id="0-prerequisite">0. PreRequisite&lt;/h2>
&lt;hr>
&lt;blockquote>
&lt;p>해당 문서의 참고입니다! &lt;a href="https://app.codecrafters.io/concepts/rust-tcp-server">https://app.codecrafters.io/concepts/rust-tcp-server&lt;/a>&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>&lt;code>std::net&lt;/code> 모듈은 TCP 서버를 만들기 위한 모듈이다.&lt;/li>
&lt;li>그리고 아래의 다섯가지 메셔드를 주요하게 이용한다.&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>&lt;code>TcpListener::bind&lt;/code> : &lt;code>pub fn bind&amp;lt;A: ToSocketAddrs&amp;gt;(addr: A) -&amp;gt; Result&amp;lt;TcpListener&amp;gt;&lt;/code> - 주어진 주소에 바인딩된 새로운 &lt;code>TcpListener&lt;/code> 인스턴스를 반환한다&lt;/li>
&lt;li>&lt;code>TcpListener::incoming&lt;/code> : &lt;code>pub fn incoming(&amp;amp;self) -&amp;gt; Incoming&lt;/code> - 이 리스너로 들어오는 coneection에 대한 iterator를 반환한다.&lt;/li>
&lt;li>&lt;code>TcpStream::connect&lt;/code> : &lt;code>pub fn connect&amp;lt;A: ToSocketAddrs&amp;gt;(addr: A) -&amp;gt; Result&amp;lt;TcpStream&amp;gt;&lt;/code> - 주어진 주소로 연결된 새로운 &lt;code>TcpStream&lt;/code> 인스턴스를 반환한다.&lt;/li>
&lt;li>&lt;code>TcpStream::read&lt;/code> : &lt;code>pub fn read(&amp;amp;mut self, buf: &amp;amp;mut [u8]) -&amp;gt; Result&amp;lt;usize&amp;gt;&lt;/code> - 스트림에서 데이터를 읽어서 주어진 버퍼에 저장한다.&lt;/li>
&lt;li>&lt;code>TcpStream::write_all&lt;/code> : &lt;code>pub fn write_all(&amp;amp;mut self, buf: &amp;amp;[u8]) -&amp;gt; Result&amp;lt;()&amp;gt;&lt;/code> - 스트림에 주어진 버퍼의 모든 데이터를 쓴다.&lt;/li>
&lt;/ol>
&lt;p>TcpLister Struct는 아래와 같이 구성되어 있다.&lt;/p></description></item><item><title>Build Redis With Rust 🦀</title><link>https://smallzoodev.netlify.app/_wiki/build-redis-with-rust/</link><pubDate>Wed, 30 Oct 2024 20:26:13 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/build-redis-with-rust/</guid><description>&lt;h1 id="build-redis-with-rust-">Build Redis With Rust 🦀&lt;/h1>
&lt;blockquote>
&lt;p>이건 &lt;a href="https://app.codecrafters.io/">코드크래프터스&lt;/a> 에서 진행하는 프로젝트를 따라하면서 작성한 문서입니다.
전적으로 제가 작성한 코드와 저의 생각만 포스팅을 할 예정입니다.
주요한 가이드는 직접 위 사이트에서 확인해주세요.&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/SmallzooDev/codecrafters-redis-rust">Github-Repo&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@OutOfBedlam/redis-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EA%B7%9C%EA%B2%A9-b1c46c273274">Redis-Protocol&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>[[Rust-Redis-D1]]&lt;/p>
&lt;/li>
&lt;li>
&lt;p>[[Rust-Redis-D2]]&lt;/p>
&lt;/li>
&lt;li>
&lt;p>[[Rust-Redis-D3]]&lt;/p>
&lt;/li>
&lt;li>
&lt;p>[[Rust-Redis-D4]]&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="trouble-shootings">Trouble Shootings&lt;/h3>
&lt;ul>
&lt;li>[[Redis-Handshake-For-Replicas]] : 레플리카(슬레이브) 등록을 위한 HandShake중 클라이언트를 식별하는 이슈&lt;/li>
&lt;li>[[Redis-Stream-Issue]]&lt;/li>
&lt;/ul></description></item><item><title>데이저 중심 애플리케이션 4장 스터디</title><link>https://smallzoodev.netlify.app/_wiki/4%EC%9E%A5/</link><pubDate>Sat, 26 Oct 2024 16:31:32 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/4%EC%9E%A5/</guid><description>&lt;h2 id="4장-부호화와-발전">4장 부호화와 발전&lt;/h2>
&lt;hr>
&lt;blockquote>
&lt;p>어플리케이션의 변경과 변화에 대응하는 방법을 소개하는 장.
일단 먼저 대규모 어플리케이션 변화에 있어 장애물이 되는 부분은 크게 아래와같다.&lt;/p>
&lt;ol>
&lt;li>데이터타입이나 스키마가 변경되는 경우 서버측에서는 순회식 업그레이드를 진행한다.&lt;/li>
&lt;li>클라이언트측 어플리케이션은 사용자에 전적으로 좌우된다. 어떤 사용자는 한동안 업그레이드를 하지 않을 수도 있다.&lt;/li>
&lt;/ol>&lt;/blockquote>
&lt;p>즉 예전버전의 코드와 새로운 버전의 코드, 이전의 데이터타입과 새로운 데이터타입 이 시스템에 공존 할 수 있다는 것이다.
그래서 시스템에는 양방향의 호환성이 필요하다.&lt;/p>
&lt;ol>
&lt;li>하위 호환성 : 새로운 코드는 이전 코드가 기록한 데이터를 읽을 수 있어야 한다.&lt;/li>
&lt;li>상위 호환성 : 이전 코드는 새로운 코드가 기록한 데이터를 읽을 수 있어야 한다.&lt;/li>
&lt;/ol>
&lt;h3 id="데이터-부호화-형식">데이터 부호화 형식&lt;/h3>
&lt;p>데이터는 크게 두가지 형식으로 다뤄진다.&lt;/p></description></item><item><title>Rust 🦀</title><link>https://smallzoodev.netlify.app/_wiki/rust-index/</link><pubDate>Sat, 26 Oct 2024 12:49:33 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/rust-index/</guid><description>러스트 관련 모든 문서의 Index 🗂️</description></item><item><title>데이터 중심 애플리케이션 설계 스터디3장</title><link>https://smallzoodev.netlify.app/_wiki/3%EC%9E%A5/</link><pubDate>Sun, 20 Oct 2024 15:51:22 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/3%EC%9E%A5/</guid><description>&lt;h1 id="저장소와-검색">저장소와 검색&lt;/h1>
&lt;hr>
&lt;blockquote>
&lt;p>데이터베이스의 가장 중요한 두가지 추상화는 쓰기/읽기이다.
그리고 이 두가지 성능은 항상 Trade-off 관계에 있다.
그 Trade-off 관계를 이해하는 것과, 가장 대표적인 저장소 엔진인 로그구조(Log-Structured) 저장소 엔진과 B-트리 같은 페이지지향(page-oriented)
저장소 엔진을 비교하는 것이 이 장의 목표이다.&lt;/p>&lt;/blockquote>
&lt;h3 id="데이터베이스를-강력하게-만드는-데이터-구조">데이터베이스를 강력하게 만드는 데이터 구조&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>db_set &lt;span style="color:#89dceb;font-weight:bold">()&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">echo&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>&lt;span style="color:#f5e0dc">$1&lt;/span>&lt;span style="color:#a6e3a1">,&lt;/span>&lt;span style="color:#f5e0dc">$2&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span> &amp;gt;&amp;gt; database
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>db_get &lt;span style="color:#89dceb;font-weight:bold">()&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> grep &lt;span style="color:#a6e3a1">&amp;#34;^&lt;/span>&lt;span style="color:#f5e0dc">$1&lt;/span>&lt;span style="color:#a6e3a1">,&amp;#34;&lt;/span> database | sed -e &lt;span style="color:#a6e3a1">&amp;#34;s/^&lt;/span>&lt;span style="color:#f5e0dc">$1&lt;/span>&lt;span style="color:#a6e3a1">,//&amp;#34;&lt;/span> | tail -n &lt;span style="color:#fab387">1&lt;/span> // 특정 키에 대한 마지막 값을 가져온다.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>가장 간단한 데이터 베이스의 구조&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&amp;gt; db_set &lt;span style="color:#a6e3a1">&amp;#34;small&amp;#34;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;{&amp;#34;name&amp;#34;: &amp;#34;SmallzooDev&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;helloWorld@helloWorld.com&amp;#34;}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; db &lt;span style="color:#89dceb">set&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;big&amp;#34;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;{&amp;#34;name&amp;#34;: &amp;#34;BigzooDev&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;helloWorld2@helloWorld.com&amp;#34;}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; db &lt;span style="color:#89dceb">set&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;small&amp;#34;&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;{&amp;#34;name&amp;#34;: &amp;#34;SmallzooDev&amp;#34;, &amp;#34;email&amp;#34;: &amp;#34;foo@bar.com&amp;#34;}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;gt; cat database
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e3a1">&amp;#34;small&amp;#34;&lt;/span>,&lt;span style="color:#a6e3a1">&amp;#34;{&amp;#34;&lt;/span>name&lt;span style="color:#a6e3a1">&amp;#34;: &amp;#34;&lt;/span>SmallzooDev&lt;span style="color:#a6e3a1">&amp;#34;, &amp;#34;&lt;/span>email&lt;span style="color:#a6e3a1">&amp;#34;: &amp;#34;&lt;/span>helloWorld@helloWorld.com&lt;span style="color:#f38ba8">&amp;#39;&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>big&lt;span style="color:#a6e3a1">&amp;#34;,&amp;#34;&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">{&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#a6e3a1">&amp;#34;BigzooDev&amp;#34;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#34;email&amp;#34;&lt;/span>: &lt;span style="color:#a6e3a1">&amp;#34;hellowWorld@helloWorld.com&amp;#34;&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>small&lt;span style="color:#a6e3a1">&amp;#34;,&amp;#34;&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">{&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#a6e3a1">&amp;#34;SmallzooDev&amp;#34;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#34;email&amp;#34;&lt;/span>: &lt;span style="color:#a6e3a1">&amp;#34;foo@bar.com&amp;#34;&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>언뜻 장난같지만 이 데이터베이스는 실제로 매우 강력하다.&lt;/p></description></item><item><title>러스트의 함수영 언어 특징</title><link>https://smallzoodev.netlify.app/_wiki/funcional-langauges-features/</link><pubDate>Sat, 19 Oct 2024 15:53:40 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/funcional-langauges-features/</guid><description>&lt;h1 id="1300-functional-languages-features-iterators-and-closures">13.0.0 Functional Languages Features: Iterators and Closures&lt;/h1>
&lt;hr>
&lt;blockquote>
&lt;p>Rust의 디자인과 기능은 함수형 프로그래밍에서 영감을 받았습니다. 함수형 스타일로 프로그래밍하는 것은 종종 함수를 값으로 사용하여 인수로 전달하거나, 다른 함수에서 반환하거나, 나중에 실행하기 위해 변수에 할당하는 등의 작업을 포함합니다. 이 장에서는 함수형 프로그래밍이 무엇인지 아닌지에 대해 논쟁하지 않고, 대신 함수형이라고 불리는 많은 언어의 기능과 유사한 Rust의 일부 기능에 대해 논의할 것입니다.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>요약하자면 러스트의 디자인과 기능은 함수형 프로그래밍에서도 영감을 받았다. 하지만 뭐가 함수형인지 논의하는것보다는 많은 언어들에서 함수형 언어로 일컫어지는 기능들이 러스트에서 어떻게 사용할 수 있는지 알아본다고 한다.&lt;/p></description></item><item><title>Effective Rust Item 2 공통 종작은 타입 시스템으로 표현하라</title><link>https://smallzoodev.netlify.app/_wiki/item-2/</link><pubDate>Sat, 19 Oct 2024 15:44:29 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/item-2/</guid><description>&lt;h1 id="공통-종작은-타입-시스템으로-표현하라">공통 종작은 타입 시스템으로 표현하라&lt;/h1></description></item><item><title>Effective Rust Item 1 데이터 구조를 타입 시스템으로 표현하라</title><link>https://smallzoodev.netlify.app/_wiki/item-1/</link><pubDate>Sat, 19 Oct 2024 15:17:47 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/item-1/</guid><description>&lt;h1 id="데이터-구조를-타입-시스템으로-표현하라">데이터 구조를 타입 시스템으로 표현하라&lt;/h1>
&lt;blockquote>
&lt;p>복잡한 데이터 구조를 구성하는 방법을 배운다. 이 과정에서 enum은 핵심적인 역할을 한다.
러스트의 enum은 기본적으로 다른 언어와 같지만, 배리언트에 직접 데이터 필드를 넣을 수 있다는 점에서 다른 언어보다 훨씬 유연하고 표현력이 높다.&lt;/p>&lt;/blockquote>
&lt;p>&lt;strong>기본 타입&lt;/strong>&lt;/p>
&lt;p>&lt;code>i8 i16 i32 i64 i128&lt;/code> : 부호 있는 정수
&lt;code>u8 u16 u32 u64 u128&lt;/code> : 부호 없는 정수
&lt;code>isize usize&lt;/code> : 시스템 아키텍처에 따라 크키가 변하는 정수, 포인터와 인덱스 연산에 사용
&lt;code>f32 f64&lt;/code> : 부동 소수점
&lt;code>bool&lt;/code> : 참/거짓
&lt;code>char&lt;/code> : 유니코드 문자
&lt;code>()&lt;/code> : 유닛타입, c언어의 void와 비슷한 역할&lt;/p></description></item><item><title>Effective Rust 🦀</title><link>https://smallzoodev.netlify.app/_wiki/effective-rust/</link><pubDate>Sat, 19 Oct 2024 14:09:41 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/effective-rust/</guid><description>&lt;h1 id="effective-rust-">Effective Rust 🦀&lt;/h1>
&lt;blockquote>
&lt;p>Effective Rust를 읽고 기억할만한 내용을 정리하는 문서입니다.&lt;/p>&lt;/blockquote>
&lt;h2 id="chapter-1--type">Chapter 1 : Type&lt;/h2>
&lt;ol>
&lt;li>[[Item-1]] : 데이터 구조를 타입 시스템으로 표현하라&lt;/li>
&lt;li>[[Item-2]] : 공통 동작은 타입 시스템으로 표현하라&lt;/li>
&lt;/ol></description></item><item><title>데이터 모델과 질의 언어 📚</title><link>https://smallzoodev.netlify.app/_wiki/2%EC%9E%A5/</link><pubDate>Sun, 13 Oct 2024 16:08:01 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/2%EC%9E%A5/</guid><description>&lt;blockquote>
&lt;p>데이터 모델은 아마도 소프트웨어 개발에서 제일 중요한 부분일 것이다.
왜냐하면 데이터 모델은 소프트웨어가 어떻게 작성됐는지 뿐만 아니라, &lt;strong>문제를 어떻게 생각해야 하는지&lt;/strong>에 지대한 영향을 미치기 때문이다.&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>대부분의 애플리케이션은 하나의 데이터 모델을 다른 데이터 모델 위에 계층을 둬서 만든다. 각 계층의 핵심적인 문제는 다음 하위 계층 관점에서 데이터 모델을 표현하는 것이다.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>참고로 레이어 패턴은 하나의 레이어가 직전 레이어의 성립을 전제로 존재하고, 그러한 레이어들로 이루어진 구조를 말한다.&lt;/p>&lt;/blockquote>
&lt;p>무튼 이번 장에서는 아래와 같은 것들을 살펴본다.&lt;/p></description></item><item><title>블로그 작성 가이드라인(지속적으로 보충할 문서!) 📝</title><link>https://smallzoodev.netlify.app/_wiki/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9E%91%EC%84%B1-%EA%B0%80%EC%9D%B4%EB%93%9C%EB%9D%BC%EC%9D%B8/</link><pubDate>Fri, 11 Oct 2024 20:53:03 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9E%91%EC%84%B1-%EA%B0%80%EC%9D%B4%EB%93%9C%EB%9D%BC%EC%9D%B8/</guid><description>사실 그냥 나 혼자 지켜야 할 가이드라인 🤔</description></item><item><title>데이터 중심 애플리케이션 설계 1장</title><link>https://smallzoodev.netlify.app/_wiki/1%EC%9E%A5/</link><pubDate>Sun, 06 Oct 2024 16:14:30 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/1%EC%9E%A5/</guid><description>&lt;h2 id="데이터-중심-애플리케이션-설계-1장">데이터 중심 애플리케이션 설계 1장&lt;/h2>
&lt;h3 id="00-머리말">00 머리말&lt;/h3>
&lt;ul>
&lt;li>환경에 대한 이야기를 한다.&lt;/li>
&lt;li>머리말에서는 최근 사업적으로는 클라우드와 saas 환경, 하드웨어 적으로는 cpu클럭이 더이상 오르지 않고 멀티코어가 표준이 된 환경을 이야기하며 병렬 처리에 대한 환경을 강조한다.&lt;/li>
&lt;li>위의 예시를 &lt;code>데이터 중심적&lt;/code> 이라고 정의하며 반대로 cpu사이클이 병목인경우를 &lt;code>계산 중심적이라고 정의한다&lt;/code>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>이 책은 (&amp;hellip;) 데이터 시스템의 기초가 되는 다양한 원리와 트레이드오프에 대해 논의한다.
데이터 시스템 아키텍처와 데이터 중심 애플리케이션으로 데이터 시스템을 통합하는 방법을 주로 다룬다.&lt;/p>&lt;/blockquote>
&lt;p>&lt;strong>이 책의 개요&lt;/strong>&lt;/p></description></item><item><title>데이터 중심 애플리케이션 설계 스터디</title><link>https://smallzoodev.netlify.app/_wiki/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A4%91%EC%8B%AC-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%84%A4%EA%B3%84/</link><pubDate>Sun, 06 Oct 2024 16:13:53 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A4%91%EC%8B%AC-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%84%A4%EA%B3%84/</guid><description>&lt;h2 id="데이터-중심-애플리케이션-설계">데이터 중심 애플리케이션 설계&lt;/h2>
&lt;p>&lt;strong>1부 데이터 시스템의 기초&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>처음 4개의 장에서는 데이터 시스템이 잔일 장비거나 여러 클러스터 장비에 분산됐거나 상관없이 모든 상황에서 적용되는 기본 개념을 알아본다.&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>[[1장]] : 신뢰성, 확장성, 유지보수성같은 단어의 실제 의미와 이같은 목표를 달성하기 위해 어떻게 해야하는지&lt;/li>
&lt;li>[[2장]] : 데이터 모델과 질의 언어, 데이터 모델의 종류와 각 모델이 어떤 상황에 적합한지&lt;/li>
&lt;li>[[3장]] : 저장소와 검색&lt;/li>
&lt;li>[[4장]] : 부호화와 발전&lt;/li>
&lt;li>[[5장]] : 분산 데이터&lt;/li>
&lt;li>[[6장]] : 파티셔닝&lt;/li>
&lt;li>[[7장]] : 트랜잭션&lt;/li>
&lt;li>[[10장]] : 일괄 처리&lt;/li>
&lt;li>[[11장]] : 스트림 처리&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>보조 인덱스는 데이터 레코드를 직접 가리키거나 해당 레코드의 기본 키를 저장한다. 데이터 레코드 포인터는 힘파일 또는 iot의 오프셋이다.
여러 보조 인덱스가 같은 레코드를 가리킬 수 있으며, 하나의 레코드는 여러 다른 필드로 식별될 수 있고 다양한 인덱스를 사용해 검색할 수 있다.
기본 인덱스 파일은 키별로 하나의 레코드만 가리키는 반면, 보조 인덱스는 키별로 여러 레코드를 가리킬 수도 있다.&lt;/p></description></item><item><title>AeroSpace Cheat Sheet</title><link>https://smallzoodev.netlify.app/_wiki/aerospace-macos/</link><pubDate>Sat, 05 Oct 2024 13:47:32 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/aerospace-macos/</guid><description>i3 like tiling tool for macos</description></item><item><title>AeroSpace Toml</title><link>https://smallzoodev.netlify.app/_wiki/aerospace/</link><pubDate>Sat, 05 Oct 2024 13:44:32 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/aerospace/</guid><description>&lt;h1 id="settings-for-aerospace-">Settings for AeroSpace 🧊️&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># Place a copy of this config to ~/.aerospace.toml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># After that, you can edit ~/.aerospace.toml to your liking&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># It&amp;#39;s not necessary to copy all keys to your config.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># If the key is missing in your config, &amp;#34;default-config.toml&amp;#34; will serve as a fallback&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># You can use it to add commands that run after login to macOS user session.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># &amp;#39;start-at-login&amp;#39; needs to be &amp;#39;true&amp;#39; for &amp;#39;after-login-command&amp;#39; to work&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># Available commands: https://nikitabobko.github.io/AeroSpace/commands&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>after-login-command = []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># You can use it to add commands that run after AeroSpace startup.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># &amp;#39;after-startup-command&amp;#39; is run after &amp;#39;after-login-command&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># Available commands : https://nikitabobko.github.io/AeroSpace/commands&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>after-startup-command = []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># Start AeroSpace at login&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>start-at-login = &lt;span style="color:#fab387">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># Normalizations. See: https://nikitabobko.github.io/AeroSpace/guide#normalization&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>enable-normalization-flatten-containers = &lt;span style="color:#fab387">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>enable-normalization-opposite-orientation-for-nested-containers = &lt;span style="color:#fab387">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># See: https://nikitabobko.github.io/AeroSpace/guide#layouts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># The &amp;#39;accordion-padding&amp;#39; specifies the size of accordion padding&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># You can set 0 to disable the padding feature&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>accordion-padding = &lt;span style="color:#fab387">30&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># Possible values: tiles|accordion&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>default-root-container-layout = &lt;span style="color:#a6e3a1">&amp;#39;tiles&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># Possible values: horizontal|vertical|auto&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># &amp;#39;auto&amp;#39; means: wide monitor (anything wider than high) gets horizontal orientation,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># tall monitor (anything higher than wide) gets vertical orientation&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>default-root-container-orientation = &lt;span style="color:#a6e3a1">&amp;#39;auto&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># Possible values: (qwerty|dvorak)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># See https://nikitabobko.github.io/AeroSpace/guide#key-mapping&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>key-mapping.preset = &lt;span style="color:#a6e3a1">&amp;#39;qwerty&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># Mouse follows focus when focused monitor changes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># Drop it from your config, if you don&amp;#39;t like this behavior&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># See https://nikitabobko.github.io/AeroSpace/guide#on-focus-changed-callbacks&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># See https://nikitabobko.github.io/AeroSpace/commands#move-mouse&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>on-focused-monitor-changed = [&lt;span style="color:#a6e3a1">&amp;#39;move-mouse monitor-lazy-center&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>on-focus-changed = &lt;span style="color:#a6e3a1">&amp;#34;move-mouse window-lazy-center&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># Gaps between windows (inner-*) and between monitor edges (outer-*).&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># Possible values:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># - Constant: gaps.outer.top = 8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># - Per monitor: gaps.outer.top = [{ monitor.main = 16 }, { monitor.&amp;#34;some-pattern&amp;#34; = 32 }, 24]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># In this example, 24 is a default value when there is no match.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># Monitor pattern is the same as for &amp;#39;workspace-to-monitor-force-assignment&amp;#39;.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># See: https://nikitabobko.github.io/AeroSpace/guide#assign-workspaces-to-monitors&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[gaps]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>inner.horizontal = &lt;span style="color:#fab387">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>inner.vertical = &lt;span style="color:#fab387">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>outer.left = &lt;span style="color:#fab387">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>outer.bottom = &lt;span style="color:#fab387">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>outer.top = &lt;span style="color:#fab387">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>outer.right = &lt;span style="color:#fab387">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># &amp;#39;main&amp;#39; binding mode declaration&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># See: https://nikitabobko.github.io/AeroSpace/guide#binding-modes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># &amp;#39;main&amp;#39; binding mode must be always presented&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[mode.main.binding]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># All possible keys:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># - Letters. a, b, c, ..., z&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># - Numbers. 0, 1, 2, ..., 9&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># - Keypad numbers. keypad0, keypad1, keypad2, ..., keypad9&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># - F-keys. f1, f2, ..., f20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># - Special keys. minus, equal, period, comma, slash, backslash, quote, semicolon, backtick,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># leftSquareBracket, rightSquareBracket, space, enter, esc, backspace, tab&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># - Keypad special. keypadClear, keypadDecimalMark, keypadDivide, keypadEnter, keypadEqual,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># keypadMinus, keypadMultiply, keypadPlus&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># - Arrows. left, down, up, right&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># All possible modifiers: cmd, alt, ctrl, shift&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># All possible commands: https://nikitabobko.github.io/AeroSpace/commands&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># You can uncomment this line to open up terminal with alt + enter shortcut&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># See: https://nikitabobko.github.io/AeroSpace/commands#exec-and-forget&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># alt-enter = &amp;#39;exec-and-forget open -n /System/Applications/Utilities/Terminal.app&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># See: https://nikitabobko.github.io/AeroSpace/commands#layout&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-slash = &lt;span style="color:#a6e3a1">&amp;#39;layout tiles horizontal vertical&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-comma = &lt;span style="color:#a6e3a1">&amp;#39;layout accordion horizontal vertical&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># See: https://nikitabobko.github.io/AeroSpace/commands#focus&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-h = &lt;span style="color:#a6e3a1">&amp;#39;focus left&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-j = &lt;span style="color:#a6e3a1">&amp;#39;focus down&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-k = &lt;span style="color:#a6e3a1">&amp;#39;focus up&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-l = &lt;span style="color:#a6e3a1">&amp;#39;focus right&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># See: https://nikitabobko.github.io/AeroSpace/commands#move&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-shift-h = &lt;span style="color:#a6e3a1">&amp;#39;move left&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-shift-j = &lt;span style="color:#a6e3a1">&amp;#39;move down&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-shift-k = &lt;span style="color:#a6e3a1">&amp;#39;move up&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-shift-l = &lt;span style="color:#a6e3a1">&amp;#39;move right&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># See: https://nikitabobko.github.io/AeroSpace/commands#resize&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-shift-minus = &lt;span style="color:#a6e3a1">&amp;#39;resize smart -50&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-shift-equal = &lt;span style="color:#a6e3a1">&amp;#39;resize smart +50&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># See: https://nikitabobko.github.io/AeroSpace/commands#workspace&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-1 = &lt;span style="color:#a6e3a1">&amp;#39;workspace 1&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-2 = &lt;span style="color:#a6e3a1">&amp;#39;workspace 2&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-3 = &lt;span style="color:#a6e3a1">&amp;#39;workspace 3&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-4 = &lt;span style="color:#a6e3a1">&amp;#39;workspace 4&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-5 = &lt;span style="color:#a6e3a1">&amp;#39;workspace 5&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-q = &lt;span style="color:#a6e3a1">&amp;#39;workspace T&amp;#39;&lt;/span> &lt;span style="color:#6c7086;font-style:italic"># for Terminal&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-w = &lt;span style="color:#a6e3a1">&amp;#39;workspace B&amp;#39;&lt;/span> &lt;span style="color:#6c7086;font-style:italic"># for Browsers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-e = &lt;span style="color:#a6e3a1">&amp;#39;workspace G&amp;#39;&lt;/span> &lt;span style="color:#6c7086;font-style:italic"># for GPT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-r = &lt;span style="color:#a6e3a1">&amp;#39;workspace C&amp;#39;&lt;/span> &lt;span style="color:#6c7086;font-style:italic"># for Chat&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-m = &lt;span style="color:#a6e3a1">&amp;#39;workspace M&amp;#39;&lt;/span> &lt;span style="color:#6c7086;font-style:italic"># for Music&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-n = &lt;span style="color:#a6e3a1">&amp;#39;workspace N&amp;#39;&lt;/span> &lt;span style="color:#6c7086;font-style:italic"># for Notes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># See: https://nikitabobko.github.io/AeroSpace/commands#move-node-to-workspace&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-shift-1 = &lt;span style="color:#a6e3a1">&amp;#39;move-node-to-workspace 1&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-shift-2 = &lt;span style="color:#a6e3a1">&amp;#39;move-node-to-workspace 2&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-shift-3 = &lt;span style="color:#a6e3a1">&amp;#39;move-node-to-workspace 3&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-shift-4 = &lt;span style="color:#a6e3a1">&amp;#39;move-node-to-workspace 4&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-shift-5 = &lt;span style="color:#a6e3a1">&amp;#39;move-node-to-workspace 5&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-shift-q = &lt;span style="color:#a6e3a1">&amp;#39;move-node-to-workspace T&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-shift-w = &lt;span style="color:#a6e3a1">&amp;#39;move-node-to-workspace B&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-shift-e = &lt;span style="color:#a6e3a1">&amp;#39;move-node-to-workspace G&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-shift-r = &lt;span style="color:#a6e3a1">&amp;#39;move-node-to-workspace C&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-shift-m = &lt;span style="color:#a6e3a1">&amp;#39;move-node-to-workspace M&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-shift-n = &lt;span style="color:#a6e3a1">&amp;#39;move-node-to-workspace N&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># See: https://nikitabobko.github.io/AeroSpace/commands#workspace-back-and-forth&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-tab = &lt;span style="color:#a6e3a1">&amp;#39;workspace-back-and-forth&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># See: https://nikitabobko.github.io/AeroSpace/commands#move-workspace-to-monitor&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-shift-tab = &lt;span style="color:#a6e3a1">&amp;#39;move-workspace-to-monitor --wrap-around next&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># See: https://nikitabobko.github.io/AeroSpace/commands#mode&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-shift-semicolon = &lt;span style="color:#a6e3a1">&amp;#39;mode service&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-shift-f = &lt;span style="color:#a6e3a1">&amp;#39;fullscreen&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># &amp;#39;service&amp;#39; binding mode declaration.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># See: https://nikitabobko.github.io/AeroSpace/guide#binding-modes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[mode.service.binding]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>esc = [&lt;span style="color:#a6e3a1">&amp;#39;reload-config&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;mode main&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>r = [&lt;span style="color:#a6e3a1">&amp;#39;flatten-workspace-tree&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;mode main&amp;#39;&lt;/span>] &lt;span style="color:#6c7086;font-style:italic"># reset layout&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#s = [&amp;#39;layout sticky tiling&amp;#39;, &amp;#39;mode main&amp;#39;] # sticky is not yet supported https://github.com/nikitabobko/AeroSpace/issues/2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>f = [&lt;span style="color:#a6e3a1">&amp;#39;layout floating tiling&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;mode main&amp;#39;&lt;/span>] &lt;span style="color:#6c7086;font-style:italic"># Toggle between floating and tiling layout&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>backspace = [&lt;span style="color:#a6e3a1">&amp;#39;close-all-windows-but-current&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;mode main&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-shift-h = [&lt;span style="color:#a6e3a1">&amp;#39;join-with left&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;mode main&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-shift-j = [&lt;span style="color:#a6e3a1">&amp;#39;join-with down&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;mode main&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-shift-k = [&lt;span style="color:#a6e3a1">&amp;#39;join-with up&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;mode main&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alt-shift-l = [&lt;span style="color:#a6e3a1">&amp;#39;join-with right&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;mode main&amp;#39;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[[on-window-detected]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>if.app-id = &lt;span style="color:#a6e3a1">&amp;#39;com.googlecode.iterm2&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>run = &lt;span style="color:#a6e3a1">&amp;#39;move-node-to-workspace T&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[[on-window-detected]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>if.app-id = &lt;span style="color:#a6e3a1">&amp;#39;com.google.Chrome&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>run = &lt;span style="color:#a6e3a1">&amp;#39;move-node-to-workspace B&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[[on-window-detected]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>if.app-id = &lt;span style="color:#a6e3a1">&amp;#39;com.kakao.KakaoTalkMac&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>run = &lt;span style="color:#a6e3a1">&amp;#39;move-node-to-workspace C&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[[on-window-detected]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>if.app-id = &lt;span style="color:#a6e3a1">&amp;#39;com.tinyspeck.slackmacgap&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>run = &lt;span style="color:#a6e3a1">&amp;#39;move-node-to-workspace C&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[[on-window-detected]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>if.app-id = &lt;span style="color:#a6e3a1">&amp;#39;com.openai.chat&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>run = &lt;span style="color:#a6e3a1">&amp;#39;move-node-to-workspace G&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Settings 🧊️</title><link>https://smallzoodev.netlify.app/_wiki/settings/</link><pubDate>Sat, 05 Oct 2024 13:43:15 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/settings/</guid><description>&lt;h1 id="settings-">Settings 🧊️&lt;/h1>
&lt;blockquote>
&lt;p>TODO : dotfiles 레포를 만들자!&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>[[AeroSpace]]&lt;/li>
&lt;/ul></description></item><item><title>러스트 에러 처리하기</title><link>https://smallzoodev.netlify.app/_wiki/error-handling/</link><pubDate>Wed, 02 Oct 2024 20:44:13 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/error-handling/</guid><description>&lt;h2 id="900-error-handling">9.0.0 Error Handling&lt;/h2>
&lt;blockquote>
&lt;p>Error는 소프트웨어의 한 요소이다.
당연히 러스트에서도 다양한 방식으로 에러를 핸들링 할 수 있도록 지원한다.
러스트 역시 에러의 가능성과 그에대한 대응을 컴파일 시점에 체크해준다.
러스트는 에러를 두가지로 그룹화한다. &lt;code>recoverable&lt;/code>과 &lt;code>unrecoverable&lt;/code> 에러로 나누어진다.
다른 언어에서는 해당 에러들을 굳이 구분하지 않고, 모두 exception과 같은 시스템으로 처리한다.
러스트는 이러한 에러를 &lt;code>Result&amp;lt;T, E&amp;gt;&lt;/code>와 &lt;code>panic!&lt;/code> 매크로를 통해 나눠서 처리한다.&lt;/p>&lt;/blockquote>
&lt;h3 id="910-unrecoverable-errors-with-panic">9.1.0 Unrecoverable Errors with panic!&lt;/h3>
&lt;blockquote>
&lt;p>가끔 우리의 코드에는 안좋은 일들이 일어나고, 그 부분에 대해서 더이상 뭔가를 할 수 없는 경우가 있다.
이러한 경우를 &lt;code>unrecoverable&lt;/code> 에러라고 하며, 러스트는 이러한 에러를 처리하기 위해 &lt;code>panic!&lt;/code> 매크로를 제공한다.&lt;/p></description></item><item><title>burrow-checker에 대한 추가 정리자료</title><link>https://smallzoodev.netlify.app/_wiki/burrow-checker/</link><pubDate>Sun, 29 Sep 2024 16:44:30 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/burrow-checker/</guid><description>&lt;h2 id="burrow-checker에-대해-도움이-될-만-한-내용을-정리한-문서-rust-in-action-내용을-참고하여-작성하였습니다">burrow-checker에 대해 도움이 될 만 한 내용을 정리한 문서, rust-in-action 내용을 참고하여 작성하였습니다.&lt;/h2>
&lt;blockquote>
&lt;p>대여 검사는 서로 연결된 세 가지 개념인 수명, 소유권, 대여에 의존한다.&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>&lt;code>소유권&lt;/code> : 러스트에서 소유권은 해당 값이 더 이상 필요 없을 때 깨끗이 지우는 것 과 관련이 있다.&lt;/li>
&lt;li>&lt;code>수명&lt;/code> : 값에 접근해도 문제없는 기간을 의미한다.&lt;/li>
&lt;li>&lt;code>대여&lt;/code> : 값에 접근함을 의미한다. 원래 소유자에게 값을 되돌려 주지 않아도 된다는 점에서 현실의 대여와 헷갈린다. &amp;ldquo;값의 소유자는 하나이며, 프로그램의 많은 다른 부분에서 이 값을 접근하기 위한 장치&amp;quot;를 생각하면 조금 더 편하다.&lt;/li>
&lt;/ul>
&lt;h3 id="01-preriquisite">01. Preriquisite&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#[derive(Debug)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">struct&lt;/span> &lt;span style="color:#f9e2af">SomeStruct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> some_field: &lt;span style="color:#f38ba8">u64&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">do_not_take_ownership&lt;/span>(primitive_type_case_param: &lt;span style="color:#f38ba8">u64&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;do nothing!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">take_ownership&lt;/span>(some_struct: &lt;span style="color:#f9e2af">SomeStruct&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;do nothing!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> fine_case: &lt;span style="color:#f38ba8">u64&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> ownership_error_case: &lt;span style="color:#f9e2af">SomeStruct&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> SomeStruct { some_field: &lt;span style="color:#fab387">1&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> do_not_take_ownership(fine_case);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> take_ownership(ownership_error_case);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;fine_case: &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, fine_case);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;ownership_error_case: &lt;/span>&lt;span style="color:#a6e3a1">{:?}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, ownership_error_case);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-mysql" data-lang="mysql">&lt;span style="display:flex;">&lt;span>error[E0382]: borrow of moved value: &lt;span style="color:#89dceb;font-weight:bold">`&lt;/span>ownership_error_case&lt;span style="color:#89dceb;font-weight:bold">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">--&amp;gt;&lt;/span> src&lt;span style="color:#89dceb;font-weight:bold">/&lt;/span>main.rs:&lt;span style="color:#fab387">22&lt;/span>:&lt;span style="color:#fab387">44&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fab387">16&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> let ownership_error_case: SomeStruct &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> SomeStruct &lt;span style="color:#f38ba8">{&lt;/span> some_field: &lt;span style="color:#fab387">1&lt;/span> &lt;span style="color:#f38ba8">}&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">------------------&lt;/span>&lt;span style="color:#6c7086;font-style:italic">-- move occurs because `ownership_error_case` has type `SomeStruct`, which does not implement the `Copy` trait
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fab387">19&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> &lt;span style="color:#89b4fa">take_ownership&lt;/span>(ownership_error_case);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">------------------&lt;/span>&lt;span style="color:#6c7086;font-style:italic">-- value moved here
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fab387">22&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> println&lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;ownership_error_case: {:?}&amp;#34;&lt;/span>, ownership_error_case);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">|&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">^^^^^^^^^^^^^^^^^^^^&lt;/span> value borrowed here after move
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">|&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>note: consider changing this parameter type &lt;span style="color:#cba6f7">in&lt;/span> function &lt;span style="color:#89dceb;font-weight:bold">`&lt;/span>take_ownership&lt;span style="color:#89dceb;font-weight:bold">`&lt;/span> &lt;span style="color:#cba6f7">to&lt;/span> borrow instead &lt;span style="color:#cba6f7">if&lt;/span> owning the value isn&lt;span style="color:#a6e3a1">&amp;#39;t necessary
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e3a1"> --&amp;gt; src/main.rs:10:32
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e3a1"> |
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e3a1">10 | fn take_ownership(some_struct: SomeStruct) {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e3a1"> | -------------- ^^^^^^^^^^ this parameter takes ownership of the value
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e3a1"> | |
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e3a1"> | in this function
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e3a1"> = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>fine_case&lt;/code>는 &lt;code>u64&lt;/code> 타입이기 때문에 &lt;code>Copy&lt;/code> 트레이트를 구현하고 있어서 &lt;code>do_not_take_ownership&lt;/code> 함수에 값을 전달해도 문제가 없다.&lt;/li>
&lt;li>&lt;code>ownership_error_case&lt;/code>는 &lt;code>SomeStruct&lt;/code> 타입이기 때문에 &lt;code>Copy&lt;/code> 트레이트를 구현하고 있지 않아서 &lt;code>take_ownership&lt;/code> 함수에 값을 전달하면 소유권이 이동하게 된다. 그래서 &lt;code>ownership_error_case&lt;/code>를 사용하려고 하면 컴파일 에러가 발생한다.&lt;/li>
&lt;li>여기까지는 rust 기본 문접 가이드에서 나온 내용이라 어렵지는 않다. &lt;code>}&lt;/code> 를 만나면 스코프의 종료와 함께 해당 스코프에 있는 변수(정확히는 스코프 내에서 생성된, 아규먼트를 포함한)들을 drop한다.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>값이 범위를 넘어가거나 다른 어떤 이유로 수명이 끝난다면, 파괴자가 호출된다.
파괴자는 값에 대한 참조를 지우고 메모리를 해제함으로써 프로그램으로부터 값의 흔적을 지우는 함다.
&amp;hellip; (중략)
이 시스템에 함축된 한 가지 의미는 &amp;ldquo;값은 절대로 소유자보다 오래 지속될 수 없다&amp;rdquo; 는 것이다.&lt;/p></description></item><item><title>Daily-Log 2024 (Daily 아님주의) 🙈</title><link>https://smallzoodev.netlify.app/_wiki/daily-log-2024/</link><pubDate>Tue, 24 Sep 2024 21:29:39 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/daily-log-2024/</guid><description>&lt;h1 id="daily-log-">Daily-Log 📝&lt;/h1>
&lt;hr>
&lt;p>2024-09-24&lt;/p>
&lt;ul>
&lt;li>가장 큰 프로젝트가 오픈했고, 오픈 직후의 이슈들도 정리되어 가고 있다.&lt;/li>
&lt;li>밀렸던 포스팅들을 하나씩 올리려고 한다.&lt;/li>
&lt;li>프로젝트 때문에 몇날 밤을 새웠는데, 몇일 쉬었다고 정신 못차리고 스터디와 사이드 프로젝트를 진행하려고 한다.&lt;/li>
&lt;li>그 때문에 러스트 공부를 시급하게 해야한다.&lt;/li>
&lt;li>당장 오늘 Rust In Action 복습을 시작했다.&lt;/li>
&lt;/ul>
&lt;p>2024-09-25&lt;/p>
&lt;ul>
&lt;li>러스트 사이드 프로젝트의 교모와 시기가 상당히 타이트 할 것 같다.&lt;/li>
&lt;li>10월 초 긴 연휴 내에 각자 필요한 것들을 준비하기로 했다.&lt;/li>
&lt;li>최소 서버는 러스트로 구현 할 것 같다 (actix-web)&lt;/li>
&lt;li>러스트 문법에 대한 복습을 짧게 마치고, 프레임워크에 대한 공부와 러스트 웹소켓 관련 코드들을 찾아보려고 한다.&lt;/li>
&lt;/ul>
&lt;p>-09-26&lt;/p></description></item><item><title>Week-06</title><link>https://smallzoodev.netlify.app/_wiki/segmentation-paging/</link><pubDate>Tue, 25 Jun 2024 20:33:49 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/segmentation-paging/</guid><description>&lt;h2 id="16-세그멘테이션">16. 세그멘테이션&lt;/h2>
&lt;h3 id="161-베이스-바운드의-일반화">16.1 베이스 바운드의 일반화&lt;/h3>
&lt;blockquote>
&lt;p>지금 가정의 단계에서 내부단편화가 발생하는 요인은 스택과 힙 사이에 사용하지 않는 메모리가 존재하는 것이다.&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>&lt;code>세그멘테이션&lt;/code>은 60년대에 이미 사용되던 메모리 관리 기법이다.&lt;/li>
&lt;li>기본적으로 &lt;code>세그멘테이션&lt;/code>은 &lt;code>세그먼트&lt;/code>마다 &lt;code>베이스&lt;/code>와 &lt;code>바운드&lt;/code>를 가지고 있다.&lt;/li>
&lt;li>세그먼트란 논리적인 단위로, 프로그램이나 데이터를 담고 있는 논리적인 단위이다. (스택, 힙, 데이터영역, 코드영역 등)&lt;/li>
&lt;li>즉 논리적인 단위로 나누어진 세그먼트(논리적 단위)에 각각 베이스와 바운드를 주는 것이다.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://github.com/SmallzooDev/OSTEP/assets/121675217/78f43eff-479d-4083-9aae-8db4d42ec561" alt="segmentation">&lt;/p>
&lt;ul>
&lt;li>그외에는 베이스 바운드 기법을 사용한다. 예를들어 가상주소가 100, 베이스가 50, 바운드가 110이라면, 베이스 주소인 50으로 가서 100을 더하면 150이 되는데, 이는 바운드보다 크기 때문에 오류가 발생한다. (똑같음)&lt;/li>
&lt;li>그리고 그 세그먼트 종류마다 주소를 세그먼트 레지스터에 저장한다.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>참고로 베이스 + 오프셋(가상주소)이 바운드보다 크면 오류가 발생하는데, 이걸 Segment Fault라고 한다.&lt;/p></description></item><item><title>cpp-casting 🐋</title><link>https://smallzoodev.netlify.app/_wiki/cpp-casting/</link><pubDate>Sun, 09 Jun 2024 17:08:32 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/cpp-casting/</guid><description>&lt;ol>
&lt;li>static_cast
static_cast는 가장 기본적인 형태의 캐스팅이다. 컴파일 시간에 타입 변환을 수행하며, 컴파일러가 타입 안전성을 어느 정도 보장해 준다. 주로 기본 타입 간의 변환, 명시적 생성자를 사용한 객체 생성, 상속 관계에 있는 클래스 간의 변환 등에 사용된다.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>Copy code
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">double&lt;/span> b &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">static_cast&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">double&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span>(a); &lt;span style="color:#6c7086;font-style:italic">// int를 double로 변환
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>dynamic_cast
dynamic_cast는 주로 다형성(polymorphism)을 사용하는 클래스 계층에서의 포인터 또는 참조 타입 변환에 사용된다. 실행 시간에 타입 검사를 수행하여 안전한 타입 변환을 보장해 준다. dynamic_cast는 주로 상속 관계에서 부모 클래스 포인터를 자식 클래스 포인터로 변환할 때 사용되며, 변환이 실패하면 nullptr을 반환한다.
RTTI(Runtime Type Information)를 사용하여 실행 시간에 타입 정보를 확인하므로, dynamic_cast를 사용하려면 반드시 가상 함수(virtual function)가 정의된 클래스여야 한다.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>Copy code
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">class&lt;/span> &lt;span style="color:#f9e2af">Base&lt;/span> { &lt;span style="color:#cba6f7">virtual&lt;/span> &lt;span style="color:#f38ba8">void&lt;/span> &lt;span style="color:#89b4fa">foo&lt;/span>() {} };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">class&lt;/span> &lt;span style="color:#f9e2af">Derived&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">:&lt;/span> &lt;span style="color:#cba6f7">public&lt;/span> Base { &lt;span style="color:#f38ba8">void&lt;/span> &lt;span style="color:#89b4fa">foo&lt;/span>() &lt;span style="color:#cba6f7">override&lt;/span> {} };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Base&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> basePtr &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">new&lt;/span> Derived;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Derived&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> derivedPtr &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">dynamic_cast&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>Derived&lt;span style="color:#89dceb;font-weight:bold">*&amp;gt;&lt;/span>(basePtr); &lt;span style="color:#6c7086;font-style:italic">// 성공하면 derivedPtr이 유효한 포인터가 된다
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>const_cast
const_cast는 변수의 const 또는 volatile 속성을 제거하거나 추가할 때 사용된다. 주로 기존의 const 객체를 변경해야 할 때 사용되며, 이는 안전하게 사용해야 한다. 비유하자면, const_cast는 책을 읽기 전용으로 두었다가 다시 수정 가능하도록 설정하는 것과 비슷하다.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>Copy code
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">const&lt;/span> &lt;span style="color:#f38ba8">int&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> b &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">const_cast&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">*&amp;gt;&lt;/span>(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>a); &lt;span style="color:#6c7086;font-style:italic">// const를 제거하여 a를 수정 가능하게 만든다
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>reinterpret_cast
reinterpret_cast는 가장 강력하고 위험한 형태의 캐스팅이다. 포인터나 데이터의 비트 패턴을 단순히 다른 타입으로 해석한다. 주로 포인터 타입 간의 변환이나 비트 패턴을 그대로 유지한 채 다른 타입으로 해석하고자 할 때 사용된다.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>Copy code
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> a &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">65&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">char&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> b &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">reinterpret_cast&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#f38ba8">char&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">*&amp;gt;&lt;/span>(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>a); &lt;span style="color:#6c7086;font-style:italic">// int 포인터를 char 포인터로 변환
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>cpp 타입 변환</title><link>https://smallzoodev.netlify.app/_wiki/%ED%83%80%EC%9E%85-%EB%B3%80%ED%99%98/</link><pubDate>Sat, 08 Jun 2024 17:39:01 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/%ED%83%80%EC%9E%85-%EB%B3%80%ED%99%98/</guid><description>멀끔한 정리는 항상 좋다.</description></item><item><title>c/cpp free는 어떻게 할당을 해제하는가</title><link>https://smallzoodev.netlify.app/_wiki/free%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%A0%EB%8B%B9%EC%9D%84-%ED%95%B4%EC%A0%9C%ED%95%98%EB%8A%94%EA%B0%80/</link><pubDate>Sat, 08 Jun 2024 17:17:54 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/free%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%A0%EB%8B%B9%EC%9D%84-%ED%95%B4%EC%A0%9C%ED%95%98%EB%8A%94%EA%B0%80/</guid><description>&lt;h2 id="malloc이-반환하는-값은-void-타입이다">malloc()이 반환하는 값은 void* 타입이다.&lt;/h2>
&lt;ul>
&lt;li>사실 할당하고 데이터의 시작 주소를 반환하긴 하지만, 사실은 내부적으로 헤더값이 있어, 방금 할당한 메모리 공간에 대한 메타 정보를 가지고 있다.&lt;/li>
&lt;/ul></description></item><item><title>Vibe Coding으로 프롬프트 관리 앱 만들어보기 🧊️</title><link>https://smallzoodev.netlify.app/_wiki/vibe-coding/</link><pubDate>Fri, 31 May 2024 22:12:00 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/vibe-coding/</guid><description>&lt;h2 id="intro-">Intro 👋&lt;/h2>
&lt;h3 id="다루지-않는-것들-">다루지 않는 것들 ⛔&lt;/h3>
&lt;ul>
&lt;li>LangChain, RAG와 같은 LLM을 서비스 관점에서 바라봤을 때 유용한 내용들&lt;/li>
&lt;li>객관적인 지식 혹은 학술적인 내용들&lt;/li>
&lt;li>지금 시점 앞의 이야기, 약간이라도 뒤의 이야기들&lt;/li>
&lt;/ul>
&lt;h3 id="다루고-싶은-내용들-">다루고 싶은 내용들 ✅&lt;/h3>
&lt;ul>
&lt;li>LLM을 사용자 관점에서 바라봤을때 경험한 내용들&lt;/li>
&lt;li>주관적인 의견 그리고 직접 해보며 경험했던 내용들&lt;/li>
&lt;li>지금 시점에 유용하다고 느꼈던 것들&lt;/li>
&lt;/ul>
&lt;h3 id="영감을-받은-것들-">영감을 받은 것들 💭&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://www.stdy.blog/warning-signs-for-off-track-ai-and-tdd-system-prompts-by-kent-beck/">바이브코딩을 넘어 증강형 코딩&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/anthropics/prompt-eng-interactive-tutorial">클로드 공식 프롬프트 관리 튜토리얼&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://news.hada.io/topic?id=21752">컨텍스트 엔지니어링&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="vibe-coding을-시작해본-계기-">Vibe Coding을 시작해본 계기 🆕&lt;/h2>
&lt;h3 id="처음에는-반감으로-시작했습니다-">처음에는 반감으로 시작했습니다 🤬&lt;/h3>
&lt;hr>
&lt;h4 id="xdd-뇌절과-비슷한-종류의-피로감">&amp;lsquo;XDD&amp;rsquo; 뇌절과 비슷한 종류의 피로감&lt;/h4>
&lt;p>&lt;img src="https://github.com/user-attachments/assets/183eaa23-1014-40cf-bb17-91f5a7fd6bac" alt="Image.png">&lt;/p></description></item><item><title>TCP/IP Illustrated 📚</title><link>https://smallzoodev.netlify.app/_wiki/introduction/</link><pubDate>Wed, 29 May 2024 22:28:46 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/introduction/</guid><description>&lt;h2 id="intro-">Intro 😃&lt;/h2>
&lt;blockquote>
&lt;p>프로토콜의 집합을 프로토콜 스위트라고 합니다.
프로토콜 스위트의 다양한 프로토콜이 서로 어떻게 연관되어 있으며 수행할 작업을 어떻게 나누는지 명시하는 설계를 아키텍처 또는 참조 모델이라고 합니다.
TCP/IP는 인터넷 아키텍처를 구현하는 프로토콜 스위트이며,
ARPANET 참조 모델(ARM)에서 유래했습니다.&lt;/p>&lt;/blockquote>
&lt;p>Clark는 인터엣 아키텍처의 주된 목표가 &amp;ldquo;기존 상호 연결된 네트워크의 다중화된 활용을 위한 효과적인 기술을 개발하는 것&amp;quot;이라고 설명한다.
즉 이 진술의 핵심은 인터넷 아키텍처가 여러 개별 네트워크를 상호 연결할 수 있어야 하고,
그 결과 생성된 상호 연결된 네트워크에서 여러 활동이 동시에 실행될 수 있어야 한다는 것이다.&lt;/p></description></item><item><title>Week-05</title><link>https://smallzoodev.netlify.app/_wiki/memory-virtualization/</link><pubDate>Mon, 27 May 2024 20:41:38 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/memory-virtualization/</guid><description>&lt;h2 id="14-막간--메모리-관리-api">14. 막간 : 메모리 관리 API&lt;/h2>
&lt;ul>
&lt;li>&lt;code>stack&lt;/code> : 프로그래머를 위해, 컴파일러에 의해 자동으로 할당과 해제가 이루어진다(automatic).&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">void&lt;/span> &lt;span style="color:#89b4fa">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> x;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>func()&lt;/code>가 호출되면 스택에 공간을 확보하고, &lt;code>func()&lt;/code>가 종료되면 스택에서 공간을 해제한다.&lt;/li>
&lt;li>&lt;code>heap&lt;/code> : 프로그래머가 직접 할당과 해제를 해야한다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">void&lt;/span> &lt;span style="color:#89b4fa">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>x &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>) &lt;span style="color:#89b4fa">malloc&lt;/span>(&lt;span style="color:#cba6f7">sizeof&lt;/span>(&lt;span style="color:#f38ba8">int&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">free&lt;/span>(x);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>malloc()&lt;/code>을 통해 메모리를 할당하고, &lt;code>free()&lt;/code>를 통해 메모리를 해제한다.&lt;/li>
&lt;li>heap에 데이터를 저장하고, func()의 스택에는 heap에 저장된 데이터의 주소를 저장한다.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>stack만큼 명시적이고 단순하기는 하지만, 쓰임새가 다양하고 실수를 할 여지가 많다.&lt;/p></description></item><item><title>포인터 지옥😢</title><link>https://smallzoodev.netlify.app/_wiki/pointer-%EC%A7%80%EC%98%A5/</link><pubDate>Wed, 15 May 2024 23:10:23 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/pointer-%EC%A7%80%EC%98%A5/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> arr[&lt;span style="color:#fab387">10&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {&lt;span style="color:#fab387">1&lt;/span>,&lt;span style="color:#fab387">2&lt;/span>,&lt;span style="color:#fab387">3&lt;/span>,&lt;span style="color:#fab387">4&lt;/span>,&lt;span style="color:#fab387">5&lt;/span>,&lt;span style="color:#fab387">6&lt;/span>,&lt;span style="color:#fab387">7&lt;/span>,&lt;span style="color:#fab387">8&lt;/span>,&lt;span style="color:#fab387">9&lt;/span>,&lt;span style="color:#fab387">10&lt;/span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>p &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> arr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> p[&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> arr[&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> p[&lt;span style="color:#fab387">5&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> arr[&lt;span style="color:#fab387">5&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>p &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>arr &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>(p&lt;span style="color:#89dceb;font-weight:bold">+&lt;/span>&lt;span style="color:#fab387">5&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cout &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>(arr&lt;span style="color:#89dceb;font-weight:bold">+&lt;/span>&lt;span style="color:#fab387">5&lt;/span>) &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&amp;lt;&lt;/span> endl;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> arr2[&lt;span style="color:#fab387">2&lt;/span>][&lt;span style="color:#fab387">2&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {{&lt;span style="color:#fab387">1&lt;/span>,&lt;span style="color:#fab387">2&lt;/span>},{&lt;span style="color:#fab387">3&lt;/span>,&lt;span style="color:#fab387">4&lt;/span>}};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">**&lt;/span> pp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> (&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">**&lt;/span>)arr2; &lt;span style="color:#6c7086;font-style:italic">// error : 2차원 배열은 다중 포인터와 다름
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>int** pp = (int**)arr2; // error : 2차원 배열은 다중 포인터와 다름&lt;/code> : 이 부분에서 에러가 나는 이유.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>첫 *(포인터 연산)은 arr2[0]의 주소값을 가리킨다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>두번째 *(포인터 연산)은 arr2[0][0]의 value를 가리킨다.&lt;/p></description></item><item><title/><link>https://smallzoodev.netlify.app/_wiki/pointer-array-%ED%97%B7%EA%B0%88%EB%A6%B4%EB%95%8C-%ED%8C%81/</link><pubDate>Wed, 15 May 2024 17:35:10 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/pointer-array-%ED%97%B7%EA%B0%88%EB%A6%B4%EB%95%8C-%ED%8C%81/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">const&lt;/span> &lt;span style="color:#f38ba8">char&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> test1 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Hello World&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// test1[0] = &amp;#39;A&amp;#39;; // error: assignment of read-only location &amp;#39;*(test1 + 0)&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">const&lt;/span> &lt;span style="color:#f38ba8">char&lt;/span> test2[] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#34;Hello World&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> test2[&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;A&amp;#39;&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// ok
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>배열 &lt;code>이름&lt;/code>은 배열의 시작 주소를 가리키는 상수 포인터이다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>인덱스 연산자 []는 배열 요소에 접근할 때 사용되며, 이는 사실 포인터 연산으로 구현된다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>test1[i]는 내부적으로 *(test1 + i)로 변환된다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>여기서 arr은 배열의 첫 번째 요소의 주소를 가리키는 포인터로 간주되며, i는 인덱스이다.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>아주 간단한 팁!</title><link>https://smallzoodev.netlify.app/_wiki/pointer-reference-%ED%97%B7%EA%B0%88%EB%A6%B4%EB%95%8C-%ED%8C%81/</link><pubDate>Wed, 15 May 2024 17:04:44 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/pointer-reference-%ED%97%B7%EA%B0%88%EB%A6%B4%EB%95%8C-%ED%8C%81/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span> value &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">10&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span> reference &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">int&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> pointer &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PrintInfoByRef(&lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>pointer);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PrintInfoByPointer(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>reference);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Week-04 📚</title><link>https://smallzoodev.netlify.app/_wiki/memory-virtual-intro/</link><pubDate>Mon, 13 May 2024 20:44:06 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/memory-virtual-intro/</guid><description>&lt;h2 id="11-cpu-가상화에-대한-마무리-대화">11. CPU 가상화에 대한 마무리 대화&lt;/h2>
&lt;ul>
&lt;li>간단한 Wrapup 대화를 진행한다.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>이 정책 전쟁은 영원히 계속 될 것처럼 보이네요.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>공학은 원래 그런거라네, 그리고 그것은 또한 권장 사항이야! 관점의 차이지,
나는 개인적으로 실용적인 것이 좋다고 생각하네. 실용주의자들은 모든 문제가 깔끔하고 쉬운 해결책이 있다고 생각하지 않아.&lt;/p>&lt;/blockquote>
&lt;h2 id="12-메모리-가상화에-관한-대화">12. 메모리 가상화에 관한 대화&lt;/h2>
&lt;blockquote>
&lt;p>수면 부족, 그것은 간단하게 해결할 수 있지.
좀 덜 놀고 더 자도록 하게.
가상 메모리를 이해하기 위해서는 여기서 부터 시작해야 하네.
사용자 프로그램이 생성하는 모든 주소는 가상주소이지.
운영체제는 각 프로세스에게 단지 환상을 제공하지.
구체적으로 프로세스가 자신만의 커다란 전용 메모리를 가진다는 환상 을 제공하는 것이지.
하드웨어로부터 약간의 도움을 얻어 운영체제는 이 가장된 가상 주소를 실제 물리 주소로 변환하고 원하는 정보의 위치를 찾을 수 있네.&lt;/p></description></item><item><title>네트워크 기본 개념 Cheatsheet 🦉</title><link>https://smallzoodev.netlify.app/_wiki/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EA%B8%B0%EB%B3%B8-%EA%B0%9C%EB%85%90/</link><pubDate>Sat, 11 May 2024 09:52:36 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EA%B8%B0%EB%B3%B8-%EA%B0%9C%EB%85%90/</guid><description>&lt;h2 id="네트워크-기본-개념cheatsheet--from-외워서-끝내는-네트워크-핵심이론">네트워크 기본 개념Cheatsheet 🦉 from 외워서 끝내는 네트워크 핵심이론&lt;/h2>
&lt;ul>
&lt;li>&lt;code>OSI 7 Layer&lt;/code> : 의존적 관계가 성립하는 (Layered, 상위 계층이 하위 계층에 의존) 프로토콜을 계층적으로 나열한 것&lt;/li>
&lt;/ul>
&lt;h3 id="protocol-suite-protocol-stack">Protocol suite, Protocol Stack&lt;/h3>
&lt;ul>
&lt;li>&lt;code>Protocol Suite&lt;/code>, &lt;code>Protocol Stack&lt;/code> : 여러 프로토콜의 집합&lt;/li>
&lt;/ul>
&lt;h3 id="network-성능-지표">Network 성능 지표&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>throughput&lt;/code> : 처리율 (bps, Mbps, Gbps 등), 실시간성을 띄며, 평균값을 보통 지표로 사용&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>bandwidth&lt;/code> : 대역폭, 통신망이 전송할 수 있는 데이터의 양, 단위는 bps&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>packet loss&lt;/code> : 패킷 손실률, 패킷이 전송 중 소멸되는 비율&lt;/p></description></item><item><title>Network 🦉</title><link>https://smallzoodev.netlify.app/_wiki/network/</link><pubDate>Sat, 11 May 2024 09:51:35 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/network/</guid><description>&lt;h2 id="intro-">Intro 😃&lt;/h2>
&lt;ul>
&lt;li>게임 서버 프로그래밍을 보는데, 소켓등 네트워크 관련 지식이 부족하다고 느껴서 마찬가지로 책을 한권 읽어보려고 하는데,&lt;/li>
&lt;li>TCP/IP Illustrated로 정했다.&lt;/li>
&lt;li>워낙 네트워크를 싫어하고 귀찮아하는데, 이번에는 좀 더 깊게 이해하고 싶고, 쉬운 개념부터 복습해두고 책을 시작해보려고 한다.&lt;/li>
&lt;/ul>
&lt;h2 id="warm-up-">Warm-up 👋&lt;/h2>
&lt;ul>
&lt;li>[[네트워크-기본-개념]]&lt;/li>
&lt;/ul>
&lt;h2 id="tcpip-illustrated-">TCP/IP Illustrated 📚&lt;/h2>
&lt;ul>
&lt;li>Chapter 1 : [[Introduction]]&lt;/li>
&lt;/ul></description></item><item><title>Week-03 📚</title><link>https://smallzoodev.netlify.app/_wiki/mlfq-multiprocessor-schedule/</link><pubDate>Mon, 06 May 2024 21:32:31 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/mlfq-multiprocessor-schedule/</guid><description>&lt;h2 id="80-스케줄링--멀티-레벨-피드백-큐">8.0 스케줄링 : 멀티 레벨 피드백 큐&lt;/h2>
&lt;ul>
&lt;li>MLFQ가 해결하려고 하는 기본적인 문제는 두 가지 이다.&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>짧은 작업을 먼저 실행시켜 반환 시간을 최적화 하는 것.&lt;/li>
&lt;li>대화형 사용자에게 빠른 시스템이라는 느낌을 주기 위해서 응답 시간을 최적화 하는 것.&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>그러나 1번은 작업수행시간을 모르기에, 2번은 rr과 같은 방식은 반환시간이 최악이기에 어렵다.
그래서 핵심 질문 &amp;gt; 정보 없이 스케줄 하는 방법은 무엇인가?&lt;/p>&lt;/blockquote>
&lt;h2 id="81-mlfq-기본-규칙">8.1 MLFQ: 기본 규칙&lt;/h2>
&lt;ul>
&lt;li>MLFQ는 여러개의 큐로 구성되며, 각각 다른 우선순위를 가진다.&lt;/li>
&lt;li>실행 준비가 된 프로세스는 이 중 하나의 큐에 존재한다.&lt;/li>
&lt;li>MLFQ는 프로세스 실행을 결정할 때 우선순위를 사용한다.&lt;/li>
&lt;li>물론 하나의 큐에 여러개의 작업이 들어갈 수 있지만, 이 경우 RR을 사용한다.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>여기까지는 쉬운데 어려운건 우선순위를 어떻게 정할 것인가이다.&lt;/p></description></item><item><title>Cpp 변수의 메모리 공간(작성중)</title><link>https://smallzoodev.netlify.app/_wiki/cpp-%EB%B3%80%EC%88%98%EC%9D%98-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B3%B5%EA%B0%84/</link><pubDate>Fri, 03 May 2024 15:57:54 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/cpp-%EB%B3%80%EC%88%98%EC%9D%98-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B3%B5%EA%B0%84/</guid><description>&lt;h2 id="1-변수의-메모리-공간">1. 변수의 메모리 공간&lt;/h2>
&lt;p>[데이터 영역]&lt;/p>
&lt;ul>
&lt;li>초기화된 데이터를 저장하는 공간&lt;/li>
&lt;li>전역 변수, 정적 변수, 상수 등이 저장된다.&lt;/li>
&lt;li>.data(미리 초기화 해 둔 경우), .rodata(읽기 전용 데이터), .bss(초기화 안해둔 경우) 섹션에 저장된다.&lt;/li>
&lt;/ul>
&lt;p>[스택 영역]&lt;/p>
&lt;ul>
&lt;li>지역 변수, 매개변수, 리턴 값 등이 저장된다.&lt;/li>
&lt;li>함수 호출 시 생성되고 함수 종료 시 소멸된다.&lt;/li>
&lt;li>함수 호출 시 생성되는 프레임에 저장된다.&lt;/li>
&lt;/ul>
&lt;p>[힙 영역]&lt;/p></description></item><item><title>어셈블리</title><link>https://smallzoodev.netlify.app/_wiki/%EC%96%B4%EC%85%88%EB%B8%94%EB%A6%AC/</link><pubDate>Fri, 03 May 2024 15:48:55 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/%EC%96%B4%EC%85%88%EB%B8%94%EB%A6%AC/</guid><description>어셈블리 디버깅을 위한 간단한 cheat sheet</description></item><item><title>비트 연산</title><link>https://smallzoodev.netlify.app/_wiki/%EB%B9%84%ED%8A%B8-%EC%97%B0%EC%82%B0/</link><pubDate>Fri, 03 May 2024 15:33:35 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/%EB%B9%84%ED%8A%B8-%EC%97%B0%EC%82%B0/</guid><description>거의 처음으로 실사용 하는 예제를 찾아서 정리하는 중</description></item><item><title>Cpp Index 🐋</title><link>https://smallzoodev.netlify.app/_wiki/cpp-index/</link><pubDate>Wed, 01 May 2024 10:19:44 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/cpp-index/</guid><description>Cpp 관련 문서 정리!</description></item><item><title/><link>https://smallzoodev.netlify.app/_wiki/2024-05/</link><pubDate>Mon, 29 Apr 2024 10:50:53 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/2024-05/</guid><description>&lt;h2 id="로드맵">로드맵&lt;/h2>
&lt;p>&lt;a href="https://www.inflearn.com/roadmaps/375">https://www.inflearn.com/roadmaps/375&lt;/a>&lt;/p></description></item><item><title>운영체제 아주 쉬운 세 가지 이야기 📚</title><link>https://smallzoodev.netlify.app/_wiki/lde-scheduling/</link><pubDate>Sat, 27 Apr 2024 13:42:50 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/lde-scheduling/</guid><description>&lt;h2 id="050-막간--프로세스-api">05.0 막간 : 프로세스 API&lt;/h2>
&lt;p>&lt;strong>거의 모든 소스코드와 강의자료는 아래 링크가 출처 입니다.&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>강의 소스코드 : &lt;a href="https://github.com/remzi-arpacidusseau/ostep-code">OSTEP&lt;/a>&lt;/li>
&lt;li>테스트 프로그램 : &lt;a href="https://github.com/remzi-arpacidusseau/ostep-projects">OSTEP Test Programs&lt;/a>&lt;/li>
&lt;li>역자 강의 자료 : &lt;a href="https://oslab.kaist.ac.kr/OSTEPSlides">강의자료&lt;/a>&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>개념적인 내용이 아닌 실제적인 측면에서 코드를 보는 장은 막간이라고 별도 표기한다.&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>이번 절에서는, Unix 시스템의 프로세스 생성에 관해 배운다.&lt;/li>
&lt;li>Unix는 프로세스를 생성하는 시스템콜로 다음 두가지를 제공한다.&lt;/li>
&lt;li>&lt;code>fork()&lt;/code>&lt;/li>
&lt;li>&lt;code>exec()&lt;/code>&lt;/li>
&lt;li>그리고 &lt;code>wait()&lt;/code> 함수를 통해 자식 프로세스가 종료될 때까지 기다릴 수 있다.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>핵심 질문 : 프로세스를 생성하고 제어하는 방법,
프로세스를 생성하고 제어하려면 운영체제가 어떤 인터페이스를 제공해야 하는가?
유용성, 편리성, 그리고 성능을 위해서는 어떻게 인터페이스를 설계해야 하는가?&lt;/p></description></item><item><title>코딩 테스트 언어 정하기</title><link>https://smallzoodev.netlify.app/_wiki/%EC%BD%94%EB%94%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%96%B8%EC%96%B4-%EC%A0%95%ED%95%98%EA%B8%B0/</link><pubDate>Thu, 25 Apr 2024 19:56:20 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/%EC%BD%94%EB%94%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%96%B8%EC%96%B4-%EC%A0%95%ED%95%98%EA%B8%B0/</guid><description>놀랍게도 언어 정하는데도 시간이 많이 필요하다..</description></item><item><title>Vim Improve Sheet 🦅</title><link>https://smallzoodev.netlify.app/_wiki/vim-impove-sheet/</link><pubDate>Tue, 23 Apr 2024 19:37:38 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/vim-impove-sheet/</guid><description>&lt;h2 id="vim-improve-sheet-">Vim Improve Sheet 🦅&lt;/h2>
&lt;blockquote>
&lt;p>Vim Improve Sheet 라고 작성했는데, 사실 안좋은 습관을 고치기 위한 시트라고 생각하면 더 좋을 것 같다.
뭔가 분명히 더 나은 방법이 있을 것 같은데, 당장 알아보기 귀찮아서 그냥 넘어가는 습관을 고치기 위한 시트이다.&lt;/p>&lt;/blockquote>
&lt;h4 id="01-vim으로-따옴표-씌우기">01. Vim으로 따옴표 씌우기&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>nvim-surround 플러그인을 이용한다 (&amp;ldquo;kylechui/nvim-surround&amp;rdquo;)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>별 표시된 부분이 커서의 위치를 나타낸다.&lt;/p>
&lt;p>Old text Command New text&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;pre>&lt;code>surr*ound_words ysiw) (surround_words)
*make strings ys$&amp;quot; &amp;quot;make strings&amp;quot;
[delete ar*ound me!] ds] delete around me!
remove &amp;lt;b&amp;gt;HTML t*ags&amp;lt;/b&amp;gt; dst remove HTML tags
'change quot*es' cs'&amp;quot; &amp;quot;change quotes&amp;quot;
&amp;lt;b&amp;gt;or tag* types&amp;lt;/b&amp;gt; csth1&amp;lt;CR&amp;gt; &amp;lt;h1&amp;gt;or tag types&amp;lt;/h1&amp;gt;
delete(functi*on calls) dsf function calls
&lt;/code>&lt;/pre>
&lt;h4 id="02---복사-붙여넣기-남들은-어떻게-편하게-하는지-확인하기">02. [ ] 복사 붙여넣기 남들은 어떻게 편하게 하는지 확인하기&lt;/h4>
&lt;h4 id="04-주석-관련-커맨드">04. 주석 관련 커맨드&lt;/h4>
&lt;ul>
&lt;li>&lt;code>shift + v&lt;/code> : 블록 선택&lt;/li>
&lt;li>&lt;code>:&lt;/code> + &lt;code>norm&lt;/code> + &lt;code>i//&lt;/code> : 블록 주석 처리&lt;/li>
&lt;li>&lt;code>:&lt;/code> + &lt;code>norm&lt;/code> + &lt;code>x&lt;/code> : 블록 주석 해제 (앞에 글자 삭제)&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>단축키 합치는중&lt;/p></description></item><item><title>프로세스 시뮬레이션 숙제 📚</title><link>https://smallzoodev.netlify.app/_wiki/chapter-04/</link><pubDate>Sun, 21 Apr 2024 19:31:01 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/chapter-04/</guid><description>&lt;p>source code : process-run.py
link : &lt;a href="https://github.com/remzi-arpacidusseau/ostep-homework/blob/master/cpu-intro/process-run.py">https://github.com/remzi-arpacidusseau/ostep-homework/blob/master/cpu-intro/process-run.py&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#! /usr/bin/env python&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">from&lt;/span> &lt;span style="color:#fab387">__future__&lt;/span> &lt;span style="color:#94e2d5">import&lt;/span> print_function
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">import&lt;/span> &lt;span style="color:#fab387">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">from&lt;/span> &lt;span style="color:#fab387">optparse&lt;/span> &lt;span style="color:#94e2d5">import&lt;/span> OptionParser
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#94e2d5">import&lt;/span> &lt;span style="color:#fab387">random&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># to make Python2 and Python3 act the same -- how dumb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">random_seed&lt;/span>(seed):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">try&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> random&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>seed(seed, version&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">except&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> random&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>seed(seed)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># process switch behavior&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SCHED_SWITCH_ON_IO &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;SWITCH_ON_IO&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SCHED_SWITCH_ON_END &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;SWITCH_ON_END&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># io finished behavior&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>IO_RUN_LATER &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;IO_RUN_LATER&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>IO_RUN_IMMEDIATE &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;IO_RUN_IMMEDIATE&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># process states&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>STATE_RUNNING &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;RUNNING&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>STATE_READY &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;READY&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>STATE_DONE &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;DONE&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>STATE_WAIT &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;BLOCKED&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># members of process structure&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PROC_CODE &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;code_&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PROC_PC &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;pc_&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PROC_ID &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;pid_&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PROC_STATE &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;proc_state_&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># things a process can do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DO_COMPUTE &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;cpu&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DO_IO &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;io&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DO_IO_DONE &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;io_done&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">class&lt;/span> &lt;span style="color:#f9e2af">scheduler&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">__init__&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>, process_switch_behavior, io_done_behavior, io_length):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># keep set of instructions for each of the processes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>process_switch_behavior &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> process_switch_behavior
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>io_done_behavior &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io_done_behavior
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>io_length &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io_length
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">new_process&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proc_id &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id][PROC_PC] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id][PROC_ID] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> proc_id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id][PROC_CODE] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id][PROC_STATE] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> STATE_READY
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> proc_id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># program looks like this:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># c7,i,c1,i&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># which means&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># compute for 7, then i/o, then compute for 1, then i/o&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">load_program&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>, program):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proc_id &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>new_process()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> line &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> program&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>split(&lt;span style="color:#a6e3a1">&amp;#39;,&amp;#39;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> opcode &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> line[&lt;span style="color:#fab387">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> opcode &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;c&amp;#39;&lt;/span>: &lt;span style="color:#6c7086;font-style:italic"># compute&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">int&lt;/span>(line[&lt;span style="color:#fab387">1&lt;/span>:])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(num):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id][PROC_CODE]&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(DO_COMPUTE)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">elif&lt;/span> opcode &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;i&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id][PROC_CODE]&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(DO_IO)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># add one compute to HANDLE the I/O completion&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id][PROC_CODE]&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(DO_IO_DONE)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;bad opcode &lt;/span>&lt;span style="color:#a6e3a1">%s&lt;/span>&lt;span style="color:#a6e3a1"> (should be c or i)&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> opcode)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit(&lt;span style="color:#fab387">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">load&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>, program_description):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proc_id &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>new_process()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> program_description&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>split(&lt;span style="color:#a6e3a1">&amp;#39;:&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(tmp) &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> &lt;span style="color:#fab387">2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;Bad description (&lt;/span>&lt;span style="color:#a6e3a1">%s&lt;/span>&lt;span style="color:#a6e3a1">): Must be number &amp;lt;x:y&amp;gt;&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> program_description)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39; where X is the number of instructions&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39; and Y is the percent change that an instruction is CPU not IO&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit(&lt;span style="color:#fab387">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_instructions, chance_cpu &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">int&lt;/span>(tmp[&lt;span style="color:#fab387">0&lt;/span>]), &lt;span style="color:#89dceb">float&lt;/span>(tmp[&lt;span style="color:#fab387">1&lt;/span>])&lt;span style="color:#89dceb;font-weight:bold">/&lt;/span>&lt;span style="color:#fab387">100.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(num_instructions):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> random&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>random() &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> chance_cpu:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id][PROC_CODE]&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(DO_COMPUTE)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id][PROC_CODE]&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(DO_IO)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># add one compute to HANDLE the I/O completion&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id][PROC_CODE]&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(DO_IO_DONE)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">move_to_ready&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>, expected, pid&lt;span style="color:#89dceb;font-weight:bold">=-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> pid &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pid &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">assert&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[pid][PROC_STATE] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> expected)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[pid][PROC_STATE] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> STATE_READY
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">move_to_wait&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>, expected):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">assert&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc][PROC_STATE] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> expected)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc][PROC_STATE] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> STATE_WAIT
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">move_to_running&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>, expected):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">assert&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc][PROC_STATE] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> expected)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc][PROC_STATE] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> STATE_RUNNING
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">move_to_done&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>, expected):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">assert&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc][PROC_STATE] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> expected)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc][PROC_STATE] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> STATE_DONE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">next_proc&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>, pid&lt;span style="color:#89dceb;font-weight:bold">=-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> pid &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">-&lt;/span>&lt;span style="color:#fab387">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> pid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>move_to_running(STATE_READY)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> pid &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>, &lt;span style="color:#89dceb">len&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[pid][PROC_STATE] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> STATE_READY:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> pid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>move_to_running(STATE_READY)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> pid &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[pid][PROC_STATE] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> STATE_READY:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> pid
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>move_to_running(STATE_READY)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">get_num_processes&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">get_num_instructions&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>, pid):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[pid][PROC_CODE])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">get_instruction&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>, pid, index):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[pid][PROC_CODE][index]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">get_num_active&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_active &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> pid &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#89dceb">len&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[pid][PROC_STATE] &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> STATE_DONE:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_active &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> num_active
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">get_num_runnable&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_active &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> pid &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#89dceb">len&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[pid][PROC_STATE] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> STATE_READY &lt;span style="color:#89dceb;font-weight:bold">or&lt;/span> \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[pid][PROC_STATE] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> STATE_RUNNING:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_active &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> num_active
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">get_ios_in_flight&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>, current_time):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_in_flight &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> pid &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#89dceb">len&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> t &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>io_finish_times[pid]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> t &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> current_time:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_in_flight &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> num_in_flight
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">check_for_switch&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">space&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>, num_columns):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(num_columns):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span>&lt;span style="color:#a6e3a1">%10s&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39; &amp;#39;&lt;/span>, end&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">check_if_done&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc][PROC_CODE]) &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc][PROC_STATE] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> STATE_RUNNING:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>move_to_done(STATE_RUNNING)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>next_proc()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">run&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clock_tick &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info) &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># track outstanding IOs, per process&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>io_finish_times &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> pid &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#89dceb">len&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>io_finish_times[pid] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># make first one active&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>move_to_running(STATE_READY)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># OUTPUT: headers for each column&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span>&lt;span style="color:#a6e3a1">%s&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;Time&amp;#39;&lt;/span>, end&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> pid &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#89dceb">len&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span>&lt;span style="color:#a6e3a1">%14s&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> (&lt;span style="color:#a6e3a1">&amp;#39;PID:&lt;/span>&lt;span style="color:#a6e3a1">%2d&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> (pid)), end&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span>&lt;span style="color:#a6e3a1">%14s&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;CPU&amp;#39;&lt;/span>, end&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span>&lt;span style="color:#a6e3a1">%14s&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;IOs&amp;#39;&lt;/span>, end&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># init statistics&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> io_busy &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cpu_busy &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>get_num_active() &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clock_tick &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># check for io finish&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> io_done &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> pid &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#89dceb">len&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> clock_tick &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>io_finish_times[pid]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> io_done &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>move_to_ready(STATE_WAIT, pid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>io_done_behavior &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> IO_RUN_IMMEDIATE:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># IO_RUN_IMMEDIATE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> pid:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc][PROC_STATE] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> STATE_RUNNING:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>move_to_ready(STATE_RUNNING)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>next_proc(pid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># IO_RUN_LATER&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>process_switch_behavior &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> SCHED_SWITCH_ON_END &lt;span style="color:#89dceb;font-weight:bold">and&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>get_num_runnable() &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># this means the process that issued the io should be run&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>next_proc(pid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>get_num_runnable() &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># this is the only thing to run: so run it&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>next_proc(pid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>check_if_done()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># if current proc is RUNNING and has an instruction, execute it&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> instruction_to_execute &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc][PROC_STATE] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> STATE_RUNNING &lt;span style="color:#89dceb;font-weight:bold">and&lt;/span> \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">len&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc][PROC_CODE]) &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> instruction_to_execute &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc][PROC_CODE]&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>pop(&lt;span style="color:#fab387">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cpu_busy &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># OUTPUT: print what everyone is up to&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> io_done:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span>&lt;span style="color:#a6e3a1">%3d&lt;/span>&lt;span style="color:#a6e3a1">*&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> clock_tick, end&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span>&lt;span style="color:#a6e3a1">%3d&lt;/span>&lt;span style="color:#a6e3a1"> &amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> clock_tick, end&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> pid &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#89dceb">len&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> pid &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc &lt;span style="color:#89dceb;font-weight:bold">and&lt;/span> instruction_to_execute &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span>&lt;span style="color:#a6e3a1">%14s&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> (&lt;span style="color:#a6e3a1">&amp;#39;RUN:&amp;#39;&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">+&lt;/span>instruction_to_execute), end&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span>&lt;span style="color:#a6e3a1">%14s&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> (&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[pid][PROC_STATE]), end&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># CPU output here: if no instruction executes, output a space, otherwise a 1 &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> instruction_to_execute &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span>&lt;span style="color:#a6e3a1">%14s&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39; &amp;#39;&lt;/span>, end&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span>&lt;span style="color:#a6e3a1">%14s&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;1&amp;#39;&lt;/span>, end&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># IO output here:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_outstanding &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>get_ios_in_flight(clock_tick)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> num_outstanding &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span>&lt;span style="color:#a6e3a1">%14s&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#89dceb">str&lt;/span>(num_outstanding), end&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> io_busy &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span>&lt;span style="color:#a6e3a1">%10s&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39; &amp;#39;&lt;/span>, end&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># if this is an IO start instruction, switch to waiting state&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># and add an io completion in the future&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> instruction_to_execute &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> DO_IO:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>move_to_wait(STATE_RUNNING)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>io_finish_times[&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc]&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(clock_tick &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>io_length &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>process_switch_behavior &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> SCHED_SWITCH_ON_IO:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>next_proc()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># ENDCASE: check if currently running thing is out of instructions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>check_if_done()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> (cpu_busy, io_busy, clock_tick)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># PARSE ARGUMENTS&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>parser &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> OptionParser()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>parser&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>add_option(&lt;span style="color:#a6e3a1">&amp;#39;-s&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;--seed&amp;#39;&lt;/span>, default&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">0&lt;/span>, help&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;the random seed&amp;#39;&lt;/span>, action&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;store&amp;#39;&lt;/span>, &lt;span style="color:#89dceb">type&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;int&amp;#39;&lt;/span>, dest&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;seed&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>parser&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>add_option(&lt;span style="color:#a6e3a1">&amp;#39;-P&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;--program&amp;#39;&lt;/span>, default&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>, help&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;more specific controls over programs&amp;#39;&lt;/span>, action&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;store&amp;#39;&lt;/span>, &lt;span style="color:#89dceb">type&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;string&amp;#39;&lt;/span>, dest&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;program&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>parser&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>add_option(&lt;span style="color:#a6e3a1">&amp;#39;-l&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;--processlist&amp;#39;&lt;/span>, default&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>, help&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;a comma-separated list of processes to run, in the form X1:Y1,X2:Y2,... where X is the number of instructions that process should run, and Y the chances (from 0 to 100) that an instruction will use the CPU or issue an IO (i.e., if Y is 100, a process will ONLY use the CPU and issue no I/Os; if Y is 0, a process will only issue I/Os)&amp;#39;&lt;/span>, action&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;store&amp;#39;&lt;/span>, &lt;span style="color:#89dceb">type&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;string&amp;#39;&lt;/span>, dest&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;process_list&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>parser&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>add_option(&lt;span style="color:#a6e3a1">&amp;#39;-L&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;--iolength&amp;#39;&lt;/span>, default&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">5&lt;/span>, help&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;how long an IO takes&amp;#39;&lt;/span>, action&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;store&amp;#39;&lt;/span>, &lt;span style="color:#89dceb">type&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;int&amp;#39;&lt;/span>, dest&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;io_length&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>parser&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>add_option(&lt;span style="color:#a6e3a1">&amp;#39;-S&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;--switch&amp;#39;&lt;/span>, default&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;SWITCH_ON_IO&amp;#39;&lt;/span>, help&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;when to switch between processes: SWITCH_ON_IO, SWITCH_ON_END&amp;#39;&lt;/span>, action&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;store&amp;#39;&lt;/span>, &lt;span style="color:#89dceb">type&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;string&amp;#39;&lt;/span>, dest&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;process_switch_behavior&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>parser&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>add_option(&lt;span style="color:#a6e3a1">&amp;#39;-I&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;--iodone&amp;#39;&lt;/span>, default&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;IO_RUN_LATER&amp;#39;&lt;/span>, help&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;type of behavior when IO ends: IO_RUN_LATER, IO_RUN_IMMEDIATE&amp;#39;&lt;/span>, action&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;store&amp;#39;&lt;/span>, &lt;span style="color:#89dceb">type&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;string&amp;#39;&lt;/span>, dest&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;io_done_behavior&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>parser&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>add_option(&lt;span style="color:#a6e3a1">&amp;#39;-c&amp;#39;&lt;/span>, help&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;compute answers for me&amp;#39;&lt;/span>, action&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;store_true&amp;#39;&lt;/span>, default&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">False&lt;/span>, dest&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;solve&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>parser&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>add_option(&lt;span style="color:#a6e3a1">&amp;#39;-p&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;--printstats&amp;#39;&lt;/span>, help&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;print statistics at end; only useful with -c flag (otherwise stats are not printed)&amp;#39;&lt;/span>, action&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;store_true&amp;#39;&lt;/span>, default&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">False&lt;/span>, dest&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;print_stats&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(options, args) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> parser&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>parse_args()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>random_seed(options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>seed)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">assert&lt;/span>(options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>process_switch_behavior &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> SCHED_SWITCH_ON_IO &lt;span style="color:#89dceb;font-weight:bold">or&lt;/span> options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>process_switch_behavior &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> SCHED_SWITCH_ON_END)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">assert&lt;/span>(options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>io_done_behavior &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> IO_RUN_IMMEDIATE &lt;span style="color:#89dceb;font-weight:bold">or&lt;/span> options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>io_done_behavior &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> IO_RUN_LATER)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> scheduler(options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>process_switch_behavior, options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>io_done_behavior, options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>io_length)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">if&lt;/span> options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>program &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> p &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>program&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>split(&lt;span style="color:#a6e3a1">&amp;#39;:&amp;#39;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>load_program(p)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># example process description (10:100,10:100)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> p &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>process_list&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>split(&lt;span style="color:#a6e3a1">&amp;#39;,&amp;#39;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>load(p)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">assert&lt;/span>(options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>io_length &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">if&lt;/span> options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>solve &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">False&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;Produce a trace of what would happen when you run these processes:&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> pid &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>get_num_processes()):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;Process &lt;/span>&lt;span style="color:#a6e3a1">%d&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> pid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> inst &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>get_num_instructions(pid)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39; &lt;/span>&lt;span style="color:#a6e3a1">%s&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>get_instruction(pid, inst))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;Important behaviors:&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39; System will switch when &amp;#39;&lt;/span>, end&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>process_switch_behavior &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> SCHED_SWITCH_ON_IO:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;the current process is FINISHED or ISSUES AN IO&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;the current process is FINISHED&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39; After IOs, the process issuing the IO will &amp;#39;&lt;/span>, end&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>io_done_behavior &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> IO_RUN_IMMEDIATE:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;run IMMEDIATELY&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;run LATER (when it is its turn)&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit(&lt;span style="color:#fab387">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(cpu_busy, io_busy, clock_tick) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>run()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">if&lt;/span> options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>print_stats:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;Stats: Total Time &lt;/span>&lt;span style="color:#a6e3a1">%d&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> clock_tick)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;Stats: CPU Busy &lt;/span>&lt;span style="color:#a6e3a1">%d&lt;/span>&lt;span style="color:#a6e3a1"> (&lt;/span>&lt;span style="color:#a6e3a1">%.2f%%&lt;/span>&lt;span style="color:#a6e3a1">)&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> (cpu_busy, &lt;span style="color:#fab387">100.0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#89dceb">float&lt;/span>(cpu_busy)&lt;span style="color:#89dceb;font-weight:bold">/&lt;/span>clock_tick))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;Stats: IO Busy &lt;/span>&lt;span style="color:#a6e3a1">%d&lt;/span>&lt;span style="color:#a6e3a1"> (&lt;/span>&lt;span style="color:#a6e3a1">%.2f%%&lt;/span>&lt;span style="color:#a6e3a1">)&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> (io_busy, &lt;span style="color:#fab387">100.0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#89dceb">float&lt;/span>(io_busy)&lt;span style="color:#89dceb;font-weight:bold">/&lt;/span>clock_tick))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="소스코드-분석">소스코드 분석&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># process switch behavior&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SCHED_SWITCH_ON_IO &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;SWITCH_ON_IO&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SCHED_SWITCH_ON_END &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;SWITCH_ON_END&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># io finished behavior&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>IO_RUN_LATER &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;IO_RUN_LATER&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>IO_RUN_IMMEDIATE &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;IO_RUN_IMMEDIATE&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># process states&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>STATE_RUNNING &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;RUNNING&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>STATE_READY &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;READY&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>STATE_DONE &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;DONE&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>STATE_WAIT &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;BLOCKED&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># members of process structure&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PROC_CODE &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;code_&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PROC_PC &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;pc_&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PROC_ID &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;pid_&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PROC_STATE &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;proc_state_&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># things a process can do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DO_COMPUTE &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;cpu&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DO_IO &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;io&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>DO_IO_DONE &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;io_done&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">class&lt;/span> &lt;span style="color:#f9e2af">scheduler&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">__init__&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>, process_switch_behavior, io_done_behavior, io_length):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># keep set of instructions for each of the processes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>process_switch_behavior &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> process_switch_behavior
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>io_done_behavior &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io_done_behavior
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>io_length &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> io_length
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">new_process&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proc_id &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id][PROC_PC] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id][PROC_ID] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> proc_id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id][PROC_CODE] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id][PROC_STATE] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> STATE_READY
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> proc_id
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">load_program&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>, program):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proc_id &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>new_process()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> line &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> program&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>split(&lt;span style="color:#a6e3a1">&amp;#39;,&amp;#39;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> opcode &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> line[&lt;span style="color:#fab387">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> opcode &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;c&amp;#39;&lt;/span>: &lt;span style="color:#6c7086;font-style:italic"># compute&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">int&lt;/span>(line[&lt;span style="color:#fab387">1&lt;/span>:])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(num):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id][PROC_CODE]&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(DO_COMPUTE)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">elif&lt;/span> opcode &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;i&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id][PROC_CODE]&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(DO_IO)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># add one compute to HANDLE the I/O completion&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id][PROC_CODE]&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(DO_IO_DONE)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;bad opcode &lt;/span>&lt;span style="color:#a6e3a1">%s&lt;/span>&lt;span style="color:#a6e3a1"> (should be c or i)&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> opcode)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit(&lt;span style="color:#fab387">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">load&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>, program_description):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proc_id &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>new_process()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tmp &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> program_description&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>split(&lt;span style="color:#a6e3a1">&amp;#39;:&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(tmp) &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> &lt;span style="color:#fab387">2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;Bad description (&lt;/span>&lt;span style="color:#a6e3a1">%s&lt;/span>&lt;span style="color:#a6e3a1">): Must be number &amp;lt;x:y&amp;gt;&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> program_description)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39; where X is the number of instructions&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39; and Y is the percent change that an instruction is CPU not IO&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit(&lt;span style="color:#fab387">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_instructions, chance_cpu &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">int&lt;/span>(tmp[&lt;span style="color:#fab387">0&lt;/span>]), &lt;span style="color:#89dceb">float&lt;/span>(tmp[&lt;span style="color:#fab387">1&lt;/span>])&lt;span style="color:#89dceb;font-weight:bold">/&lt;/span>&lt;span style="color:#fab387">100.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(num_instructions):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> random&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>random() &lt;span style="color:#89dceb;font-weight:bold">&amp;lt;&lt;/span> chance_cpu:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id][PROC_CODE]&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(DO_COMPUTE)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id][PROC_CODE]&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(DO_IO)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># add one compute to HANDLE the I/O completion&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id][PROC_CODE]&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(DO_IO_DONE)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">new_process&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proc_id &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id][PROC_PC] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id][PROC_ID] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> proc_id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id][PROC_CODE] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id][PROC_STATE] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> STATE_READY
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> proc_id
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">load_program&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>, program):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proc_id &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>new_process()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> line &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> program&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>split(&lt;span style="color:#a6e3a1">&amp;#39;,&amp;#39;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> opcode &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> line[&lt;span style="color:#fab387">0&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> opcode &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;c&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">int&lt;/span>(line[&lt;span style="color:#fab387">1&lt;/span>:])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> i &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(num):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id][PROC_CODE]&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(DO_COMPUTE)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">elif&lt;/span> opcode &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;i&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id][PROC_CODE]&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(DO_IO)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[proc_id][PROC_CODE]&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(DO_IO_DONE)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;bad opcode &lt;/span>&lt;span style="color:#a6e3a1">%s&lt;/span>&lt;span style="color:#a6e3a1"> (should be c or i)&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> opcode)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit(&lt;span style="color:#fab387">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">def&lt;/span> &lt;span style="color:#89b4fa">run&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clock_tick &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb">len&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info) &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>io_finish_times &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> pid &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#89dceb">len&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>io_finish_times[pid] &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>move_to_running(STATE_READY)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span>&lt;span style="color:#a6e3a1">%s&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;Time&amp;#39;&lt;/span>, end&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>) 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> pid &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#89dceb">len&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span>&lt;span style="color:#a6e3a1">%14s&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> (&lt;span style="color:#a6e3a1">&amp;#39;PID:&lt;/span>&lt;span style="color:#a6e3a1">%2d&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> (pid)), end&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span>&lt;span style="color:#a6e3a1">%14s&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;CPU&amp;#39;&lt;/span>, end&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span>&lt;span style="color:#a6e3a1">%14s&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;IOs&amp;#39;&lt;/span>, end&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> io_busy &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cpu_busy &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">while&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>get_num_active() &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clock_tick &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> io_done &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">False&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> pid &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#89dceb">len&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> clock_tick &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>io_finish_times[pid]:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> io_done &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">True&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>move_to_ready(STATE_WAIT, pid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>io_done_behavior &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> IO_RUN_IMMEDIATE:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> pid:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc][PROC_STATE] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> STATE_RUNNING:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>move_to_ready(STATE_RUNNING)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>next_proc(pid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>process_switch_behavior &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> SCHED_SWITCH_ON_END &lt;span style="color:#89dceb;font-weight:bold">and&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>get_num_runnable() &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>next_proc(pid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>get_num_runnable() &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">1&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>next_proc(pid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>check_if_done()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> instruction_to_execute &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc][PROC_STATE] &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> STATE_RUNNING &lt;span style="color:#89dceb;font-weight:bold">and&lt;/span> \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">len&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc][PROC_CODE]) &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> instruction_to_execute &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc][PROC_CODE]&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>pop(&lt;span style="color:#fab387">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> cpu_busy &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> io_done:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span>&lt;span style="color:#a6e3a1">%3d&lt;/span>&lt;span style="color:#a6e3a1">*&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> clock_tick, end&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span>&lt;span style="color:#a6e3a1">%3d&lt;/span>&lt;span style="color:#a6e3a1"> &amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> clock_tick, end&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> pid &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(&lt;span style="color:#89dceb">len&lt;/span>(&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> pid &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc &lt;span style="color:#89dceb;font-weight:bold">and&lt;/span> instruction_to_execute &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span>&lt;span style="color:#a6e3a1">%14s&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> (&lt;span style="color:#a6e3a1">&amp;#39;RUN:&amp;#39;&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">+&lt;/span>instruction_to_execute), end&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span>&lt;span style="color:#a6e3a1">%14s&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> (&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>proc_info[pid][PROC_STATE]), end&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> instruction_to_execute &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span>&lt;span style="color:#a6e3a1">%14s&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39; &amp;#39;&lt;/span>, end&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span>&lt;span style="color:#a6e3a1">%14s&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;1&amp;#39;&lt;/span>, end&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> num_outstanding &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>get_ios_in_flight(clock_tick)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> num_outstanding &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span>&lt;span style="color:#a6e3a1">%14s&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#89dceb">str&lt;/span>(num_outstanding), end&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> io_busy &lt;span style="color:#89dceb;font-weight:bold">+=&lt;/span> &lt;span style="color:#fab387">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span>&lt;span style="color:#a6e3a1">%10s&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39; &amp;#39;&lt;/span>, end&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> instruction_to_execute &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> DO_IO:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>move_to_wait(STATE_RUNNING)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>io_finish_times[&lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>curr_proc]&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>append(clock_tick &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>io_length &lt;span style="color:#89dceb;font-weight:bold">+&lt;/span> &lt;span style="color:#fab387">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>process_switch_behavior &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> SCHED_SWITCH_ON_IO:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>next_proc()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">self&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>check_if_done()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> (cpu_busy, io_busy, clock_tick)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic"># PARSE ARGUMENTS&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>parser &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> OptionParser()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>parser&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>add_option(&lt;span style="color:#a6e3a1">&amp;#39;-s&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;--seed&amp;#39;&lt;/span>, default&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">0&lt;/span>, help&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;the random seed&amp;#39;&lt;/span>, action&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;store&amp;#39;&lt;/span>, &lt;span style="color:#89dceb">type&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;int&amp;#39;&lt;/span>, dest&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;seed&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>parser&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>add_option(&lt;span style="color:#a6e3a1">&amp;#39;-P&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;--program&amp;#39;&lt;/span>, default&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>, help&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;more specific controls over programs&amp;#39;&lt;/span>, action&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;store&amp;#39;&lt;/span>, &lt;span style="color:#89dceb">type&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;string&amp;#39;&lt;/span>, dest&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;program&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>parser&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>add_option(&lt;span style="color:#a6e3a1">&amp;#39;-l&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;--processlist&amp;#39;&lt;/span>, default&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>, help&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;a comma-separated list of processes to run, in the form X1:Y1,X2:Y2,... where X is the number of instructions that process should run, and Y the chances (from 0 to 100) that an instruction will use the CPU or issue an IO (i.e., if Y is 100, a process will ONLY use the CPU and issue no I/Os; if Y is 0, a process will only issue I/Os)&amp;#39;&lt;/span>, action&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;store&amp;#39;&lt;/span>, &lt;span style="color:#89dceb">type&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;string&amp;#39;&lt;/span>, dest&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;process_list&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>parser&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>add_option(&lt;span style="color:#a6e3a1">&amp;#39;-L&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;--iolength&amp;#39;&lt;/span>, default&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">5&lt;/span>, help&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;how long an IO takes&amp;#39;&lt;/span>, action&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;store&amp;#39;&lt;/span>, &lt;span style="color:#89dceb">type&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;int&amp;#39;&lt;/span>, dest&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;io_length&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>parser&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>add_option(&lt;span style="color:#a6e3a1">&amp;#39;-S&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;--switch&amp;#39;&lt;/span>, default&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;SWITCH_ON_IO&amp;#39;&lt;/span>, help&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;when to switch between processes: SWITCH_ON_IO, SWITCH_ON_END&amp;#39;&lt;/span>, action&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;store&amp;#39;&lt;/span>, &lt;span style="color:#89dceb">type&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;string&amp;#39;&lt;/span>, dest&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;process_switch_behavior&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>parser&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>add_option(&lt;span style="color:#a6e3a1">&amp;#39;-I&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;--iodone&amp;#39;&lt;/span>, default&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;IO_RUN_LATER&amp;#39;&lt;/span>, help&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;type of behavior when IO ends: IO_RUN_LATER, IO_RUN_IMMEDIATE&amp;#39;&lt;/span>, action&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;store&amp;#39;&lt;/span>, &lt;span style="color:#89dceb">type&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;string&amp;#39;&lt;/span>, dest&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;io_done_behavior&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>parser&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>add_option(&lt;span style="color:#a6e3a1">&amp;#39;-c&amp;#39;&lt;/span>, help&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;compute answers for me&amp;#39;&lt;/span>, action&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;store_true&amp;#39;&lt;/span>, default&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">False&lt;/span>, dest&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;solve&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>parser&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>add_option(&lt;span style="color:#a6e3a1">&amp;#39;-p&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;--printstats&amp;#39;&lt;/span>, help&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;print statistics at end; only useful with -c flag (otherwise stats are not printed)&amp;#39;&lt;/span>, action&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;store_true&amp;#39;&lt;/span>, default&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#fab387">False&lt;/span>, dest&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;print_stats&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(options, args) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> parser&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>parse_args()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>random_seed(options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>seed)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">assert&lt;/span>(options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>process_switch_behavior &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> SCHED_SWITCH_ON_IO &lt;span style="color:#89dceb;font-weight:bold">or&lt;/span> options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>process_switch_behavior &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> SCHED_SWITCH_ON_END)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">assert&lt;/span>(options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>io_done_behavior &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> IO_RUN_IMMEDIATE &lt;span style="color:#89dceb;font-weight:bold">or&lt;/span> options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>io_done_behavior &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> IO_RUN_LATER)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>s &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> scheduler(options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>process_switch_behavior, options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>io_done_behavior, options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>io_length)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">if&lt;/span> options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>program &lt;span style="color:#89dceb;font-weight:bold">!=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> p &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>program&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>split(&lt;span style="color:#a6e3a1">&amp;#39;:&amp;#39;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>load_program(p)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic"># example process description (10:100,10:100)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> p &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>process_list&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>split(&lt;span style="color:#a6e3a1">&amp;#39;,&amp;#39;&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>load(p)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">assert&lt;/span>(options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>io_length &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">if&lt;/span> options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>solve &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> &lt;span style="color:#fab387">False&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;Produce a trace of what would happen when you run these processes:&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> pid &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>get_num_processes()):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;Process &lt;/span>&lt;span style="color:#a6e3a1">%d&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> pid)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">for&lt;/span> inst &lt;span style="color:#89dceb;font-weight:bold">in&lt;/span> &lt;span style="color:#89dceb">range&lt;/span>(s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>get_num_instructions(pid)):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39; &lt;/span>&lt;span style="color:#a6e3a1">%s&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>get_instruction(pid, inst))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;Important behaviors:&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39; System will switch when &amp;#39;&lt;/span>, end&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>process_switch_behavior &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> SCHED_SWITCH_ON_IO:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;the current process is FINISHED or ISSUES AN IO&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;the current process is FINISHED&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39; After IOs, the process issuing the IO will &amp;#39;&lt;/span>, end&lt;span style="color:#89dceb;font-weight:bold">=&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">if&lt;/span> options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>io_done_behavior &lt;span style="color:#89dceb;font-weight:bold">==&lt;/span> IO_RUN_IMMEDIATE:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;run IMMEDIATELY&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">else&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;run LATER (when it is its turn)&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> exit(&lt;span style="color:#fab387">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(cpu_busy, io_busy, clock_tick) &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> s&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>run()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">if&lt;/span> options&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>print_stats:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;Stats: Total Time &lt;/span>&lt;span style="color:#a6e3a1">%d&lt;/span>&lt;span style="color:#a6e3a1">&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> clock_tick)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;Stats: CPU Busy &lt;/span>&lt;span style="color:#a6e3a1">%d&lt;/span>&lt;span style="color:#a6e3a1"> (&lt;/span>&lt;span style="color:#a6e3a1">%.2f%%&lt;/span>&lt;span style="color:#a6e3a1">)&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> (cpu_busy, &lt;span style="color:#fab387">100.0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#89dceb">float&lt;/span>(cpu_busy)&lt;span style="color:#89dceb;font-weight:bold">/&lt;/span>clock_tick))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;Stats: IO Busy &lt;/span>&lt;span style="color:#a6e3a1">%d&lt;/span>&lt;span style="color:#a6e3a1"> (&lt;/span>&lt;span style="color:#a6e3a1">%.2f%%&lt;/span>&lt;span style="color:#a6e3a1">)&amp;#39;&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">%&lt;/span> (io_busy, &lt;span style="color:#fab387">100.0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span> &lt;span style="color:#89dceb">float&lt;/span>(io_busy)&lt;span style="color:#89dceb;font-weight:bold">/&lt;/span>clock_tick))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">print&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="문제">문제&lt;/h3></description></item><item><title>OSTEP-Week-01 질의 응답 📚</title><link>https://smallzoodev.netlify.app/_wiki/ostep-week-01/</link><pubDate>Sun, 21 Apr 2024 17:50:41 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/ostep-week-01/</guid><description/></item><item><title>Week-01 📚</title><link>https://smallzoodev.netlify.app/_wiki/os-overview-process/</link><pubDate>Sun, 21 Apr 2024 14:26:30 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/os-overview-process/</guid><description>&lt;h2 id="01-장---이-책에-대한-대화">01 장 - 이 책에 대한 대화&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>아주 간단한 이 책에 대한 소개를 하는 챕터이다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>두 장으로 이루어져 있고, 이 책에서 자주 나오게 되는 교수와 학생의 대화 형식으로 이루어져 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>핵심적인 아이디어를 요약하면 다음과 같다.&lt;/p>
&lt;ul>
&lt;li>리처드 파인만의 물리학 아주 쉬운 6가지 이야기라는 강의 노트가 있다.&lt;/li>
&lt;li>물리학이 6만큼 어려우면, 운영체제는 3만큼 어렵기 때문에, 이 책의 제목이 &amp;ldquo;운영체제 아주 쉬운 세 가지 이야기&amp;quot;이다.&lt;/li>
&lt;li>이 책은 운영체제에 대한 이야기를 3가지로 나누어서 설명한다. &lt;code>가상화&lt;/code>, &lt;code>병행성&lt;/code>, &lt;code>영속성&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="02-장---운영체제-개요">02 장 - 운영체제 개요&lt;/h2>
&lt;blockquote>
&lt;p>이 책에서 다루게 될 내용이지만 아주 간단하게 약식으로 설명하는 글이 있어 가져왔다.
c/cpp를 공부할 때 이분의 블로그와 강의자료를 들었는데 상대적으로 최근에 업로드된 문서이다.
&lt;a href="https://modoocode.com/315">내가 c언어를 배우기 전에 알았다면 좋았을 것들&lt;/a>&lt;/p></description></item><item><title>운영체제 아주 쉬운 세 가지 이야기 📚</title><link>https://smallzoodev.netlify.app/_wiki/ostep/</link><pubDate>Sun, 21 Apr 2024 14:20:57 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/ostep/</guid><description>OSTEP 스터디</description></item><item><title>nvim cheat sheet</title><link>https://smallzoodev.netlify.app/_wiki/lsp-cheat-sheet/</link><pubDate>Sat, 20 Apr 2024 16:30:53 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/lsp-cheat-sheet/</guid><description>&lt;h3 id="1일-1커맨드-정리">1일 1커맨드 정리&lt;/h3>
&lt;ul>
&lt;li>&lt;code>^ + b, f&lt;/code> : 한 페이지씩 스크롤&lt;/li>
&lt;li>&lt;code>zz&lt;/code> : 현재 커서가 있는 줄을 화면 중앙으로 이동&lt;/li>
&lt;li>&lt;code>yi(&lt;/code> : 괄호 안에 있는 내용 복사&lt;/li>
&lt;li>&lt;code>vap&lt;/code> : 비주얼모드 한 문단 블록 씌우기&lt;/li>
&lt;/ul>
&lt;h3 id="이동-관련">이동 관련&lt;/h3>
&lt;blockquote>
&lt;p>brace 관련 커맨드를 조금 더 잘쓰면 좋겠다는 생각을 한다.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>개인적으로 vim을 더 잘쓰기 위해서 정리를 잘 해둬야 할 것 같다.&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>&lt;code>^ + b, f&lt;/code>: 한 페이지씩 스크롤&lt;/li>
&lt;li>&lt;code>^ + d, u&lt;/code>: 반 페이지씩 스크롤&lt;/li>
&lt;li>&lt;code>e, E&lt;/code>: 다음 단어의 끝으로, 문자 단위 이동&lt;/li>
&lt;li>&lt;code>w, W&lt;/code>: 다음 단어의 처음으로, 문자 단위 이동&lt;/li>
&lt;li>&lt;code>$&lt;/code>: 줄의 마지막으로 이동&lt;/li>
&lt;li>&lt;code>0&lt;/code>: 줄의 처음으로 이동&lt;/li>
&lt;li>&lt;code>^&lt;/code>: 줄의 처음으로 이동 (공백이 아닌 처음 시작되는 문자)&lt;/li>
&lt;li>&lt;code>Shift + g&lt;/code>: 문서의 마지막으로 이동&lt;/li>
&lt;li>&lt;code>gg, 1g&lt;/code>: 문서의 처음으로 이동 (숫자 라인으로 이동)&lt;/li>
&lt;li>&lt;code>), (&lt;/code>: 다음, 이전 문장의 처음으로 이동&lt;/li>
&lt;li>&lt;code>}, {&lt;/code>: 다음, 이전 문단의 처음으로 이동&lt;/li>
&lt;li>&lt;code>]], [[&lt;/code>: 다음, 이전 구절의 처음으로 이동&lt;/li>
&lt;li>안녕하세요&lt;/li>
&lt;/ul>
&lt;h3 id="vimwiki-관련-커맨드">Vimwiki 관련 커맨드&lt;/h3>
&lt;ul>
&lt;li>&lt;code>Tab&lt;/code> – Find next wiki link&lt;/li>
&lt;li>&lt;code>Shift + Tab&lt;/code> – Find previous wiki link&lt;/li>
&lt;/ul>
&lt;h3 id="split-관련-커맨드">Split 관련 커맨드&lt;/h3>
&lt;ul>
&lt;li>&lt;code>&amp;lt;leader&amp;gt;sv&lt;/code>: 창 수직 분할&lt;/li>
&lt;li>&lt;code>&amp;lt;leader&amp;gt;sh&lt;/code>: 창 수평 분할&lt;/li>
&lt;li>&lt;code>&amp;lt;leader&amp;gt;se&lt;/code>: 창 확장&lt;/li>
&lt;li>&lt;code>&amp;lt;leader&amp;gt;sx&lt;/code>: 창 닫기&lt;/li>
&lt;/ul>
&lt;h3 id="lsp-관련-커맨드">lsp 관련 커맨드&lt;/h3>
&lt;ul>
&lt;li>&lt;code>&amp;lt;leader&amp;gt;gd&lt;/code>: 정의로 이동&lt;/li>
&lt;/ul>
&lt;h3 id="키-바인딩">키 바인딩&lt;/h3>
&lt;ul>
&lt;li>&lt;code>&amp;lt;leader&amp;gt;gR&lt;/code>: LSP 참조 표시&lt;/li>
&lt;li>&lt;code>&amp;lt;leader&amp;gt;gD&lt;/code>: 선언으로 이동&lt;/li>
&lt;li>&lt;code>&amp;lt;leader&amp;gt;gd&lt;/code>: LSP 정의 표시&lt;/li>
&lt;li>&lt;code>&amp;lt;leader&amp;gt;gi&lt;/code>: LSP 구현 표시&lt;/li>
&lt;li>&lt;code>&amp;lt;leader&amp;gt;gt&lt;/code>: LSP 유형 정의 표시&lt;/li>
&lt;li>&lt;code>&amp;lt;leader&amp;gt;ca&lt;/code>: 사용 가능한 코드 액션 표시&lt;/li>
&lt;li>&lt;code>&amp;lt;leader&amp;gt;rn&lt;/code>: 스마트 리네임&lt;/li>
&lt;li>&lt;code>&amp;lt;leader&amp;gt;D&lt;/code>: 버퍼 진단 표시&lt;/li>
&lt;li>&lt;code>&amp;lt;leader&amp;gt;d&lt;/code>: 줄 진단 표시&lt;/li>
&lt;li>&lt;code>&amp;lt;leader&amp;gt;[d&lt;/code>: 이전 진단으로 이동&lt;/li>
&lt;li>&lt;code>&amp;lt;leader&amp;gt;]d&lt;/code>: 다음 진단으로 이동&lt;/li>
&lt;li>&lt;code>&amp;lt;leader&amp;gt;K&lt;/code>: 커서 아래 항목에 대한 문서 표시&lt;/li>
&lt;li>&lt;code>&amp;lt;leader&amp;gt;rs&lt;/code>: LSP 재시작&lt;/li>
&lt;/ul>
&lt;h2 id="nvim-surround">nvim-surround&lt;/h2>
&lt;p>따옴표 추가&lt;/p></description></item><item><title>개발 관련 Cheat Sheet</title><link>https://smallzoodev.netlify.app/_wiki/cheat-sheet/</link><pubDate>Fri, 19 Apr 2024 22:55:18 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/cheat-sheet/</guid><description>&lt;h2 id="cheat-sheet-">Cheat Sheet 📜&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://kimchanjung.github.io/programming/2020/05/06/kotlin-basic-syntax-summary/">코틀린 Cheat Sheet&lt;/a> : 코틀린을 배워놓고 안써먹다보니 까먹는 부분이 많아 찾아온 Cheat Sheet&lt;/li>
&lt;/ul>
&lt;h2 id="coding-test-">Coding Test 🧩&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://velog.io/@jinho-dev/C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%ED%92%80%EC%9D%B4-%EC%A3%BC%EC%9A%94-%EB%AC%B8%EB%B2%95">cpp-문법-정리&lt;/a> : 코테용 C++ 문법 정리&lt;/li>
&lt;li>&lt;a href="https://velog.io/@shin421179/%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-C-%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%B2%98%EB%A6%AC">cpp-문자열&lt;/a> : 문자열 처리 팁&lt;/li>
&lt;li>&lt;a href="https://slothspeed.tistory.com/46">cpp-코테&lt;/a> : 코테 관련 자주 나오는 패턴들&lt;/li>
&lt;/ul>
&lt;h2 id="shortcuts-">ShortCuts 🚀&lt;/h2>
&lt;ul>
&lt;li>[[LSP-Cheat-Sheet]] : Neovim Language Server Cheat Sheet&lt;/li>
&lt;li>&lt;a href="https://www.josean.com/posts/vim-essentials-cheatsheet">Vim-Cheat-Sheet&lt;/a> : Vim Cheat Sheet&lt;/li>
&lt;li>[[AeroSpace-macOS]] : 윈도우 관리 툴&lt;/li>
&lt;/ul></description></item><item><title>러스트의 컬렉션 모아보기</title><link>https://smallzoodev.netlify.app/_wiki/common-collections/</link><pubDate>Sun, 14 Apr 2024 13:53:34 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/common-collections/</guid><description>&lt;h2 id="800-common-collections">8.0.0 Common Collections&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>러스트의 &lt;code>std::collections&lt;/code> 모듈은 여러 유용한 자료구조인 컬렉션을 제공한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>heap&lt;/code>에 저장되는 컬렉션들은 컴파일 시점에 크기를 알 수 없고 늘어나거나 줄어들거나 한다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>이번 장에서는 &lt;code>Vec&amp;lt;T&amp;gt;&lt;/code>, &lt;code>String&lt;/code>, &lt;code>HashMap&amp;lt;K, V&amp;gt;&lt;/code>에 대해 알아본다.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="810-storing-lists-of-values-with-vectors">8.1.0 Storing Lists of Values with Vectors&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;code>Vec&amp;lt;T&amp;gt;&lt;/code>는 가변 길이의 리스트를 저장할 수 있는 컬렉션이다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Vec&amp;lt;T&amp;gt;&lt;/code>는 동일한 타입의 여러 값을 저장할 수 있고, 다음 자료를 메모리 옆칸에 연속적으로 저장하는 선형 자료구조이다. (배열)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="811-creating-a-new-vector">8.1.1 Creating a New Vector&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>Vec&amp;lt;T&amp;gt;&lt;/code>를 생성하는 방법은 두 가지가 있다.&lt;/p></description></item><item><title>Package, Crates, Modules</title><link>https://smallzoodev.netlify.app/_wiki/managing-growing-projects-with-packages-crates-and-modules/</link><pubDate>Sat, 13 Apr 2024 23:04:16 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/managing-growing-projects-with-packages-crates-and-modules/</guid><description>&lt;h2 id="70-패키지-크래이트-모듈을-이용해-커지는-프로젝트를-관리하기">7.0 패키지, 크래이트, 모듈을 이용해 커지는 프로젝트를 관리하기&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>프로젝트가 커지면서 코드를 관리하는 것이 중요해진다, 기능을 단위로 모듈화하고 나눠야 관리하는것이 편리하다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>이 챕터는 그러한 것들을 하는 방법을 다룬다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>높은 레벨에서의 코드 재사용성을 위해 encaptulating, implementing등 달성하는 방법을 다룬다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>실제 구현을 알지 못해도 사용할 수 있는 인터페이스로 추상화를 제공하는 방법을 다룬다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>scope와 namespace를 이용해 코드를 구조화하는 방법을 다룬다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>위에 내용들을 아우르는 러스트의 모듈화 시스템은 아래와 같다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>package&lt;/code> : 크레이트를 빌드하고 공유하는 단위&lt;/li>
&lt;li>&lt;code>crate&lt;/code> : 라이브러리나 실행파일을 빌드하는 단위&lt;/li>
&lt;li>&lt;code>module&lt;/code> : 코드를 그룹화하고 namespace를 제공하는 단위&lt;/li>
&lt;li>&lt;code>path&lt;/code> : 모듈을 참조하는 방법&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="71-package-and-crates">7.1 Package and Crates&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>crate&lt;/code>는 러스트의 컴파일러가 한번에 고려 할 수 있는 가장 최소의 코드 단위이다.&lt;/p></description></item><item><title>짐켈러의 인터뷰를 보고 든 생각</title><link>https://smallzoodev.netlify.app/_wiki/interview-from-jim-keller/</link><pubDate>Sat, 13 Apr 2024 12:05:56 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/interview-from-jim-keller/</guid><description>&lt;h2 id="0-요즘-드는-생각과-걱정은-보통-ai와-관련된-것">0. 요즘 드는 생각과 걱정은 보통 AI와 관련된 것..&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>물론 피상적으로 AI가 나를 대체하지 않을까? 와 같은 걱정을 하는 것은 아니다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>그렇게 되지 않을 자신도 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>다만 나의 시장 가치를 고민 할 때, 어떠한 방식으로 발전해야 AI가 만들어갈 앞으로의 환경에서 가치가 높은 사람이 될 수 있을지에 대한 고민이 많았다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>사람들이 이야기 하는 부분은 주로 아래와 같이 두 부류로 나뉘는 것 같다.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>특정 지점 이하의 기술적인 지식은 AI가 대체할 수 있을 것이고, 사람은 문제를 만들어가고, AI라는 도구를 이용해 문제를 해결해야 한다 라는 관점&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>젠슨 황이 이야기하는 관점인 것 같다.&lt;/li>
&lt;li>프로그래밍을 하지 않아도 사람들이 프로그램을 만들 수 있게 된다고 말하며, 결국 그것을 잘 이용하는 능력 + 도메인의 지식등 문제를 만들고 설계하는 능력이 중요하다고 이야기하는 것 같다.&lt;/li>
&lt;li>실제로 본인이 대학시절로 돌아간다면 생명공학을 전공할 것이라고 이야기한다.(그 쪽이 해결해야 할 문제가 많다고 생각하기 때문이라고 한다.)&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>오히려 기본적인 지식을 (1번의 관점에서는 ai가 대체해줘야 할, 블랙박스가 되어야 할 지점)을 강조하는 입장.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>물론 &lt;code>칩 설계 분야&lt;/code>에 대한 이야기 였지만, ai가 발생시킬 생산성을 정확히 이해하고 이용하려면 본질적인 지식이 필요하다는 것을 강조하는 것 같다.&lt;/li>
&lt;li>도메인에 대한 특정성이 있지만, 적어도 논리적인 부분에서는 1번의 관점과 정확히 배치되는 이야기이다.&lt;/li>
&lt;li>AI가 너무 &lt;code>꽃밭&lt;/code>인 관계로 이러한 관점에서 이야기 하는 사람이 반가워서 아래의 인터뷰 내용을 정리하려고 한다.&lt;/li>
&lt;/ul>
&lt;h2 id="1짐-켈러의-인터뷰">1.&lt;a href="https://youtu.be/iwXr1IRaqWA?si=uYCxoniGhXu5UBGo">짐 켈러의 인터뷰&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>이 인터뷰는 AI 뿐 아니라 요즘 내가 가장 많이 하고 있는 고민들과 많이 맞닿아 있었다.&lt;/p></description></item><item><title>Blog에 대한 생각 정리 글</title><link>https://smallzoodev.netlify.app/_wiki/blog%EC%97%90-%EB%8C%80%ED%95%9C-%EC%83%9D%EA%B0%81/</link><pubDate>Sat, 13 Apr 2024 11:45:31 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/blog%EC%97%90-%EB%8C%80%ED%95%9C-%EC%83%9D%EA%B0%81/</guid><description>&lt;h2 id="블로그를-만드는데-시간을-쏟고-글을-쓰면서-들던-생각들">블로그를 만드는데 시간을 쏟고, 글을 쓰면서 들던 생각들&lt;/h2>
&lt;p>3월과 4월간 가장 많은 시간을 쏟은건 블로그와 neovim인 것 같다. 원하는 만큼의 공부 진도가 아니라 아쉬운 와중에, 블로그등에 뭔가 개인 시간을 지나치게 많이 썼나 싶어서 드는 생각을 써보려고 한다.&lt;/p>
&lt;h3 id="블로그를-만들게-된-계기">블로그를 만들게 된 계기&lt;/h3>
&lt;p>시작은 당연히 이직과 관련된 이유였다. 생각보다 회사 일에 대한 개발 내용을 이력서에 정리하기는 쉽지 않았고, 포트폴리오를 내기에도, 금전적으로 엮인게 많아 올릴 수 없어 블로그를 만들게 되었다.&lt;/p>
&lt;p>적어도 내 취향에 보기 좋게 블로그를 만들고, 기계적으로 정리를 하다 보면 내가 무엇을 했는지, 어떤 공부를 했는지, 어떤 프로젝트를 했는지 정리가 되어 경력기술서의 역할을 대신할 수 있을 것이라 생각했다.&lt;/p></description></item><item><title>Enums and Pattern Matching in Rust</title><link>https://smallzoodev.netlify.app/_wiki/enums-and-pattern-matching/</link><pubDate>Tue, 09 Apr 2024 21:57:53 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/enums-and-pattern-matching/</guid><description>&lt;h2 id="6-enum-and-pattern-matching">6 Enum and Pattern Matching&lt;/h2>
&lt;blockquote>
&lt;p>In this chapter, we’ll look at enumerations, also referred to as enums. Enums allow you to define a type by enumerating its possible variants&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>가능한 상태의 목록을 열거하여 타입을 정의한다는 정의가 마음에 든다.&lt;/li>
&lt;/ul>
&lt;h2 id="61-defining-an-enum">6.1 Defining an Enum&lt;/h2>
&lt;blockquote>
&lt;p>구조체가 데이터를 그룹화 하는 방법을 제공한다면, enum은 특정한 값이 가질수 있는 모든 가능한 값을 정의한다.&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>공식 가이드에서는 IP 주소를 다루는 예제를 들고 있다. IP주소라는 개념을 코드로 &amp;lsquo;표현&amp;rsquo;한다면
&lt;ul>
&lt;li>4개의 8비트 숫자로 구성된 IPv4 주소를 다루는 경우&lt;/li>
&lt;li>8개의 16비트 숫자로 구성된 IPv6 주소를 다루는 경우&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>이렇게 두가지 상태만 존재하고, 모든 IP의 버전은 두가지 중 하나에 속하게 된다.&lt;/li>
&lt;li>IP 주소이면서 저 두가지의 상태가 아닌 다른 상태에 속할 수 없고, 둘 다에 속할 수 없으며, 이런 경우에 enum을 이용해서 표현할 수 있다.&lt;/li>
&lt;li>버전 4와 버전 6 주소 모두 근본적으로는 IP 주소이므로, 코드가 어떤 종류의 IP 주소에도 적용되는 상황을 처리할 때 동일한 타입으로 취급되어야 한다.&lt;/li>
&lt;li>즉 모든, 고유한, 가능한 상태의 열거이므로 일정 정도의 추상화의 역할을 한다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">enum&lt;/span> &lt;span style="color:#f9e2af">IpAddrKind&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> V4,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> V6,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">let&lt;/span> four &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> IpAddrKind::V4;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">let&lt;/span> six &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> IpAddrKind::V6;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">route&lt;/span>(ip_kind: &lt;span style="color:#f9e2af">IpAddrKind&lt;/span>) {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>route(IpAddrKind::V4);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>route(IpAddrKind::V6);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>문법은 enum 키워드로 시작하고, 각 상태는 중괄호로 묶인 목록으로 정의된다.&lt;/li>
&lt;li>각 상태는 그 자체로 유효한 값이다. 이 값은 enum의 이름을 통해 접근할 수 있다.&lt;/li>
&lt;li>enum의 이름과 상태의 이름은 같은 이름 공간에 있으므로, enum의 이름을 통해 상태를 참조할 수 있다.&lt;/li>
&lt;li>enum에 값을 저장할 수도 있다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">enum&lt;/span> &lt;span style="color:#f9e2af">IpAddr&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> V4(&lt;span style="color:#89dceb">String&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> V6(&lt;span style="color:#89dceb">String&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">let&lt;/span> home &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> IpAddr::V4(&lt;span style="color:#89dceb">String&lt;/span>::from(&lt;span style="color:#a6e3a1">&amp;#34;127.0.0.1&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">let&lt;/span> loopback &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> IpAddr::V6(&lt;span style="color:#89dceb">String&lt;/span>::from(&lt;span style="color:#a6e3a1">&amp;#34;::1&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>이렇게 하면 각 상태가 다른 타입의 데이터를 가질 수 있다.&lt;/li>
&lt;li>단순히 열거형에 String을 매핑하는 정도가 아니라 아래와 같은 것들도 가능하다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">enum&lt;/span> &lt;span style="color:#f9e2af">IpAddr&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> V4(&lt;span style="color:#f38ba8">u8&lt;/span>, &lt;span style="color:#f38ba8">u8&lt;/span>, &lt;span style="color:#f38ba8">u8&lt;/span>, &lt;span style="color:#f38ba8">u8&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> V6(&lt;span style="color:#89dceb">String&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">let&lt;/span> home &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> IpAddr::V4(&lt;span style="color:#fab387">127&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">1&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">let&lt;/span> loopback &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> IpAddr::V6(&lt;span style="color:#89dceb">String&lt;/span>::from(&lt;span style="color:#a6e3a1">&amp;#34;::1&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>이렇게 하면 각 상태가 다른 타입의 데이터를 가질 수 있다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">struct&lt;/span> &lt;span style="color:#f9e2af">Ipv4Addr&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// --snip--
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">struct&lt;/span> &lt;span style="color:#f9e2af">Ipv6Addr&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// --snip--
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">enum&lt;/span> &lt;span style="color:#f9e2af">IpAddr&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> V4(Ipv4Addr),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> V6(Ipv6Addr),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>이렇게 하면 각 상태가 다른 구조체를 가질 수 있다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">enum&lt;/span> &lt;span style="color:#f9e2af">Message&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Quit,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Move { x: &lt;span style="color:#f38ba8">i32&lt;/span>, y: &lt;span style="color:#f38ba8">i32&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Write(&lt;span style="color:#89dceb">String&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ChangeColor(&lt;span style="color:#f38ba8">i32&lt;/span>, &lt;span style="color:#f38ba8">i32&lt;/span>, &lt;span style="color:#f38ba8">i32&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>다양한 것들을 매핑하되, 하나의 enumerate variants에 같은 타입이 아닌 것들을 매핑할 수 있다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">struct&lt;/span> &lt;span style="color:#f9e2af">QuitMessage&lt;/span>; &lt;span style="color:#6c7086;font-style:italic">// unit struct
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">struct&lt;/span> &lt;span style="color:#f9e2af">MoveMessage&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x: &lt;span style="color:#f38ba8">i32&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> y: &lt;span style="color:#f38ba8">i32&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">struct&lt;/span> &lt;span style="color:#f9e2af">WriteMessage&lt;/span>(&lt;span style="color:#89dceb">String&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// tuple struct
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>&lt;span style="color:#cba6f7">struct&lt;/span> &lt;span style="color:#f9e2af">ChangeColorMessage&lt;/span>(&lt;span style="color:#f38ba8">i32&lt;/span>, &lt;span style="color:#f38ba8">i32&lt;/span>, &lt;span style="color:#f38ba8">i32&lt;/span>); &lt;span style="color:#6c7086;font-style:italic">// tuple struct
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">impl&lt;/span> Message {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">call&lt;/span>(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#89dceb">self&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// method body would be defined here
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> m &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> Message::Write(&lt;span style="color:#89dceb">String&lt;/span>::from(&lt;span style="color:#a6e3a1">&amp;#34;hello&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> m.call();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>impl로 메소드를 정의할 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="611-the-option-enum-and-its-advantages-over-null-values">6.1.1 The Option Enum and Its Advantages Over Null Values&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>Option&amp;lt;T&amp;gt;&lt;/code>는 표준 라이브러리에 정의된 enum이다.&lt;/p></description></item><item><title>Using Structs to Structure Related Data</title><link>https://smallzoodev.netlify.app/_wiki/using-structs-to-structure-related-data/</link><pubDate>Tue, 09 Apr 2024 00:11:26 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/using-structs-to-structure-related-data/</guid><description>&lt;h2 id="50-defining-and-instantiating-structs">5.0 Defining and Instantiating Structs&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">struct&lt;/span> &lt;span style="color:#f9e2af">User&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> username: &lt;span style="color:#89dceb">String&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> email: &lt;span style="color:#89dceb">String&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sign_in_count: &lt;span style="color:#f38ba8">u64&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> active: &lt;span style="color:#f38ba8">bool&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>기본적으로 튜플과 비슷하게 데이터를 묶어주는 역할을 한다.&lt;/li>
&lt;li>튜플보다 더 많은 유연성을 제공한다.&lt;/li>
&lt;li>cpp의 구조체와 거의 동일하다.&lt;/li>
&lt;li>ts의 인터페이스와 유사하다.&lt;/li>
&lt;li>&lt;code>struct&lt;/code> 키워드를 사용하여 정의한다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> user1 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> User {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> email: &lt;span style="color:#89dceb">String&lt;/span>::from(&lt;span style="color:#a6e3a1">&amp;#34;some@example.com&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> username: &lt;span style="color:#89dceb">String&lt;/span>::from(&lt;span style="color:#a6e3a1">&amp;#34;someusername&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> active: &lt;span style="color:#f9e2af">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sign_in_count: &lt;span style="color:#fab387">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>.&lt;/code>을 사용하여 필드에 접근할 수 있다.&lt;/li>
&lt;li>만약 instance가 mutable하다면 필드의 값을 변경할 수 있다.&lt;/li>
&lt;li>필드의 일부는 mutable이고 일부는 immutable일 수 없다.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">build_user&lt;/span>(email: &lt;span style="color:#89dceb">String&lt;/span>, username: &lt;span style="color:#89dceb">String&lt;/span>) -&amp;gt; &lt;span style="color:#f9e2af">User&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> User {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> email: &lt;span style="color:#f9e2af">email&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> username: &lt;span style="color:#f9e2af">username&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> active: &lt;span style="color:#f9e2af">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sign_in_count: &lt;span style="color:#fab387">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">build_user2&lt;/span>(email: &lt;span style="color:#89dceb">String&lt;/span>, username: &lt;span style="color:#89dceb">String&lt;/span>) -&amp;gt; &lt;span style="color:#f9e2af">User&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> User {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> email,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> username,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> active: &lt;span style="color:#f9e2af">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sign_in_count: &lt;span style="color:#fab387">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>표현식 형태로 함수의 반환값으로 사용할 수 있다.&lt;/li>
&lt;li>필드의 이름과 변수의 이름이 같다면 &lt;code>email: email&lt;/code>을 &lt;code>email&lt;/code>로 축약할 수 있다.&lt;/li>
&lt;/ul>
&lt;h3 id="511-creating-instances-from-other-instances-with-struct-update-syntax">5.1.1 Creating Instances From Other Instances With Struct Update Syntax&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// --snip--
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> user2 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> User {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> email: &lt;span style="color:#89dceb">String&lt;/span>::from(&lt;span style="color:#a6e3a1">&amp;#34;another@example.com&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> active: &lt;span style="color:#f9e2af">user1&lt;/span>.active,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sign_in_count: &lt;span style="color:#f9e2af">user1&lt;/span>.sign_in_count,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> username: &lt;span style="color:#f9e2af">user1&lt;/span>.username,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> user3 &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> User {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> email: &lt;span style="color:#89dceb">String&lt;/span>::from(&lt;span style="color:#a6e3a1">&amp;#34;another@example.com&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb;font-weight:bold">..&lt;/span>user1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>..&lt;/code>을 사용하여 다른 인스턴스를 복사할 수 있다.&lt;/li>
&lt;li>디스럭쳐링과 비슷한 문법이지만, 구조체가 기본적으로 iterable trait를 구현하고 있지는 않는다고 한다. 어떻게 구현되어있는지 궁금하다. (알아보기)&lt;/li>
&lt;li>소유권 이전은 동일한 논리로 일어나기 때문에, 만약 stack only data가 아닌 필드를 가지고 있다면, 업데이트 이후 기존 인스턴스를 사용할 수 없게 된다.&lt;/li>
&lt;/ul>
&lt;h3 id="512-using-tuple-structs-without-named-fields-to-create-different-types">5.1.2 Using Tuple Structs without Named Fields to Create Different Types&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">struct&lt;/span> &lt;span style="color:#f9e2af">Color&lt;/span>(&lt;span style="color:#f38ba8">i32&lt;/span>, &lt;span style="color:#f38ba8">i32&lt;/span>, &lt;span style="color:#f38ba8">i32&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">struct&lt;/span> &lt;span style="color:#f9e2af">Point&lt;/span>(&lt;span style="color:#f38ba8">i32&lt;/span>, &lt;span style="color:#f38ba8">i32&lt;/span>, &lt;span style="color:#f38ba8">i32&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> black &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> Color(&lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> origin &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> Point(&lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>, &lt;span style="color:#fab387">0&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>필드의 이름이 없는 튜플 구조체를 사용할 수 있다.&lt;/p></description></item><item><title>Understanding the Ownership of the Rust Programming Language</title><link>https://smallzoodev.netlify.app/_wiki/understanding-ownership/</link><pubDate>Fri, 05 Apr 2024 20:22:13 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/understanding-ownership/</guid><description>&lt;h2 id="40-ownership">4.0 Ownership&lt;/h2>
&lt;blockquote>
&lt;p>소유권은 러스트의 가장 특징적인 개념이다, 러스트를 이해하기 위해서, 또는 러스트가 왜 다른 언어들보다 주목받는지 이해하기 위해서 가장 중요한 장이라고 생각한다.&lt;/p>&lt;/blockquote>
&lt;h3 id="411-what-is-ownership">4.1.1 What is Ownership?&lt;/h3>
&lt;blockquote>
&lt;p>Ownership은 러스트가 메모리를 관리하는 규칙이다.&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>모든 프로그래밍 언어는 메모리를 관리하는 방법이 있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>가장 대표적인 두 갈래는 GC(Garbage Collection)와 수동 메모리 관리로 볼 수있다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>GC는 프로그램이 실행되는동안, 더 이상 사용하지 않는 메모리를 찾아내고 해체하는 방법이다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>수동 메모리 관리는 프로그래머가 메모리를 직접 관리하는 방법이다.&lt;/p></description></item><item><title>Neovim 마이그레이션(?) 하기</title><link>https://smallzoodev.netlify.app/_wiki/neovim-migration-%ED%95%98%EA%B8%B0/</link><pubDate>Fri, 05 Apr 2024 17:59:28 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/neovim-migration-%ED%95%98%EA%B8%B0/</guid><description>&lt;p>&lt;img src="https://github.com/SmallzooDev/NeovimConfig/assets/121675217/0153f5a4-323d-4ee0-b270-fb47f991f994" alt="Welcome To my New Neovim">&lt;/p>
&lt;h2 id="01-왜-마이그레이션을-하게-되었을까">01. 왜 마이그레이션을 하게 되었을까?&lt;/h2>
&lt;blockquote>
&lt;p>사실 마이그레이션을 하려고 하지는 않았고, 기존 Neovim 설정에서 마음에 안드는 부분들이 조금 있어서 그부분만 수정하려고 했다.
그러다 지난번 설정을 따라했었던 유튜버가 2024년 설정이라는 영상으로 기존 &lt;a href="https://www.josean.com/posts/how-to-setup-neovim-2024">Neovim 설정 가이드 영상을 리뉴얼&lt;/a>했다.
packer나 lsp-saga와 같이 기존에 불편하던 부분들을 귀신같이 뺀 영상임을 확인하고 바로 마이그레이션을 하게 되었다.&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>마이그레이션이라고 하기는 사실 애매하고 완전 새롭게 설정을 하고, 기존 설정을 새로운 설정에 덧붙였다고 보는게 맞을 것 같다.&lt;/li>
&lt;li>해당 설정을 다시 하면서 추가된 내용에 대한 약간의 내용정리와, 간단한 설명을 덧붙여 포스팅을 해보려고 한다.&lt;/li>
&lt;/ul>
&lt;h2 id="02-기존에-불편했던-것들-packer-lsp-saga">02. 기존에 불편했던 것들 packer, lsp-saga&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;code>packer&lt;/code>는 아주 약간 아쉬운점이 있었다.&lt;/p></description></item><item><title>2024년 4월의 목표</title><link>https://smallzoodev.netlify.app/_wiki/2024-04/</link><pubDate>Thu, 04 Apr 2024 00:48:59 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/2024-04/</guid><description>&lt;ul>
&lt;li>
&lt;p>기본적으로 이직이다&lt;/p>
&lt;/li>
&lt;li>
&lt;p>4월 중순 내일배움캠프 튜터링이 시작되어 그 전까지 좀 공부를 당겨놓고 싶다.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>지금은 굵직하게 4가지 목표를 잡고 있다.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>DB 공부 - Real MySql 8.0 두 권 다 읽기&lt;/li>
&lt;li>Network 공부 - 정말 필요한 만큼만, 항상 네트워크는 지루해&amp;hellip;&lt;/li>
&lt;li>운영체제등의 공부 - 원래는 운영체제 아주 쉬운 세가지 이야기를 읽으려고 했는데, 그래도 약간의 보상이 필요 할 것 같아서, 상대적으로 재미있는 러스트를 공부하면서 마주하는 개념들을 조금 더 자세하게 정리하는 것으로 하려고 한다.&lt;/li>
&lt;li>코테 공부 - 아무래도 만 3년차이다보니 코테를 요구하는 회사들이 더 많아서 눈여겨본 유데미 강의를 볼까 한다.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>이중에서 4월 내로 러스트 기본 문법 빠르게 훑고, 러스트인액션과같이 구현에 들어가는것, 그리고 Mysql 8.0 2권 (2권부터 읽으려 한다) 읽기를 목표로 잡았다.&lt;/p></description></item><item><title>러스트 공식 가이드 3장 정리</title><link>https://smallzoodev.netlify.app/_wiki/common-programming-concepts/</link><pubDate>Mon, 01 Apr 2024 21:00:33 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/common-programming-concepts/</guid><description>&lt;h2 id="3-common-programming-concepts">3 Common Programming Concepts&lt;/h2>
&lt;blockquote>
&lt;p>이번 장에서는 러스트의 기본적인 프로그래밍 개념들을 다룬다, 가장 특징적인 부분이라면 다른 언어를 대비해서 러스트가 어떤 부분이 다른지 위주로 설명하는 가장 크게 두드러진다는 것이다.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>mz한 언어답게 예약어가 예약되어 있다고 한다 ㅋㅋ(아직 예약어로써 기능하지는 않지만, 미래의 예약어가 될 수 있어 예약해둔 keword)&lt;/p>&lt;/blockquote>
&lt;h3 id="31-variables-and-mutability">3.1 Variables and Mutability&lt;/h3>
&lt;ul>
&lt;li>변수는 기본적으로 불변이며, 이렇게 된게 러스트의 nudge라고 한다.&lt;/li>
&lt;/ul>
&lt;p>&lt;code>src/main.rs&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> x &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">5&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;The value of x is: &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, x);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> x &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">6&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;The value of x is: &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, x);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ cargo run
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Compiling variables v0.1.0 &lt;span style="color:#89dceb;font-weight:bold">(&lt;/span>file:///projects/variables&lt;span style="color:#89dceb;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>error&lt;span style="color:#89dceb;font-weight:bold">[&lt;/span>E0384&lt;span style="color:#89dceb;font-weight:bold">]&lt;/span>: cannot assign twice to immutable variable &lt;span style="color:#a6e3a1">`&lt;/span>x&lt;span style="color:#a6e3a1">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --&amp;gt; src/main.rs:4:5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fab387">2&lt;/span> | &lt;span style="color:#89dceb">let&lt;/span> &lt;span style="color:#f5e0dc">x&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> 5;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | -
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | first assignment to &lt;span style="color:#a6e3a1">`&lt;/span>x&lt;span style="color:#a6e3a1">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | help: consider making this binding mutable: &lt;span style="color:#a6e3a1">`&lt;/span>mut x&lt;span style="color:#a6e3a1">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fab387">3&lt;/span> | println!&lt;span style="color:#89dceb;font-weight:bold">(&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;The value of x is: {x}&amp;#34;&lt;/span>&lt;span style="color:#89dceb;font-weight:bold">)&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fab387">4&lt;/span> | &lt;span style="color:#f5e0dc">x&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> 6;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> | ^^^^^ cannot assign twice to immutable variable
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>For more information about this error, try &lt;span style="color:#a6e3a1">`&lt;/span>rustc --explain E0384&lt;span style="color:#a6e3a1">`&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>error: could not compile &lt;span style="color:#a6e3a1">`&lt;/span>variables&lt;span style="color:#a6e3a1">`&lt;/span> due to previous error
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>친절한 컴파일에러..&lt;/li>
&lt;/ul>
&lt;p>무튼 변수를 변경하려면 &lt;code>mut&lt;/code> 키워드를 사용해야 한다, 이렇게 하면 일단 변수를 선언하고, 고심한 이후에 mut 키워드를 붙이는 습관이 들 수 있다.&lt;/p></description></item><item><title>Vim이 느린 경우 Trouble Shootings</title><link>https://smallzoodev.netlify.app/_wiki/vim-profile-log-debugging/</link><pubDate>Mon, 01 Apr 2024 15:52:53 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/vim-profile-log-debugging/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>:profile start profile&lt;span style="color:#89dceb;font-weight:bold">.&lt;/span>log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>:profile &lt;span style="color:#cba6f7">func&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>:profile file &lt;span style="color:#89dceb;font-weight:bold">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e3a1">&amp;#34; At this point do slow actions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>:profile pause
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>:noautocmd qall&lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>출처 : &lt;a href="https://stackoverflow.com/questions/12213597/how-to-see-which-plugins-are-making-vim-slow">stackoverflow&lt;/a>&lt;/p>
&lt;p>이렇게 하면 profile.log 파일이 생성된다.&lt;/p>
&lt;p>나의 경우는 copilot 관련 로그가 많아 회사 컴퓨터에서는 브랜치를 새로 파서,&lt;/p>
&lt;p>회사에서는 copilot을 disable 시켜서 해결했다.&lt;/p>
&lt;p>집가서 로그를 자세히 봐야겠다&lt;/p></description></item><item><title>회사 컴퓨터 세팅 관련</title><link>https://smallzoodev.netlify.app/_wiki/%ED%9A%8C%EC%82%AC%EC%BB%B4-%EC%84%B8%ED%8C%85/</link><pubDate>Mon, 01 Apr 2024 15:46:56 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/%ED%9A%8C%EC%82%AC%EC%BB%B4-%EC%84%B8%ED%8C%85/</guid><description>&lt;p>Hello World!&lt;/p></description></item><item><title>러스트 공식 가이드 2장 정리</title><link>https://smallzoodev.netlify.app/_wiki/programming-a-guessing-game/</link><pubDate>Sun, 31 Mar 2024 20:35:47 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/programming-a-guessing-game/</guid><description>&lt;h4 id="2-programming-a-guessing-game">2. Programming a Guessing Game&lt;/h4>
&lt;blockquote>
&lt;p>간단한 숫자 맞추는 게임을 통해 러스트의 기본적인 문법과 기능을 익히는 예제, 처음 문법을 배우는 입장에서 생각보다 다룰 내용이 많았었던 기억이 난다.&lt;/p>&lt;/blockquote>
&lt;h5 id="setting-up-a-new-project">Setting Up a New Project&lt;/h5>
&lt;p>&lt;strong>프로젝트 생성&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ cargo new guessing_game
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ &lt;span style="color:#89dceb">cd&lt;/span> guessing_game
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="processing-a-guess">Processing a Guess&lt;/h5>
&lt;p>&lt;code>src/main.rs&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">use&lt;/span> std::io; &lt;span style="color:#6c7086;font-style:italic">// io 라이브러리를 가져온다.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Guess the number!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Please input your guess.&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> guess &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new(); &lt;span style="color:#6c7086;font-style:italic">// 빈 문자열을 생성한다.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> io::stdin().read_line(&lt;span style="color:#89dceb;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#cba6f7">mut&lt;/span> guess) &lt;span style="color:#6c7086;font-style:italic">// 사용자 입력을 받아 guess 변수에 저장한다.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span> .expect(&lt;span style="color:#a6e3a1">&amp;#34;Failed to read line&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;You guessed: &lt;/span>&lt;span style="color:#a6e3a1">{}&lt;/span>&lt;span style="color:#a6e3a1">&amp;#34;&lt;/span>, guess); &lt;span style="color:#6c7086;font-style:italic">// 사용자 입력을 출력한다.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="storing-values-with-variables">Storing Values with Variables&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#cba6f7">mut&lt;/span> guess &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#89dceb">String&lt;/span>::new(); &lt;span style="color:#6c7086;font-style:italic">// 빈 문자열을 생성한다.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>let&lt;/code> : 변수를 생성하는 키워드.&lt;/li>
&lt;li>&lt;code>mut&lt;/code> : mutable한 변수를 생성한다. (변경 가능한 변수, 기본적으로는 immutable)&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>개인적인 소감이지만 이러한 부분에서 러스트의 언어 디자인이 마음에 들었다, 다른 언어는 기본적으로 가변 변수를 선언하거나 키워드를 다르게 두는데
러스트는 &lt;code>let&lt;/code> 키워드로 변수를 선언하고 &lt;code>mut&lt;/code> 키워드로 가변 변수를 선언해서 가변 변수를 선언하는 부분을 사용자가 명시적으로 표현하게끔 했다.&lt;/p></description></item><item><title>러스트 공식 가이드 1장 정리</title><link>https://smallzoodev.netlify.app/_wiki/getting-started/</link><pubDate>Sun, 31 Mar 2024 16:59:07 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/getting-started/</guid><description>&lt;h4 id="11-installation">1.1. Installation&lt;/h4>
&lt;blockquote>
&lt;p>러스트 설치에 대한 아주 간단한 가이드.&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>간단한 내용이라 딱히 정리할 내용은 없다.&lt;/li>
&lt;/ul>
&lt;h4 id="12-hello-world">1.2. Hello, World!&lt;/h4>
&lt;blockquote>
&lt;p>러스트로 Hello, World! 출력하기.&lt;/p>&lt;/blockquote>
&lt;p>&lt;strong>특징적인 내용은 아래와 같다.&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>공식 가이드의 Helloworld 섹션 첫줄에 다른 언어에 대한 이해도를 전제하고 있다.&lt;/li>
&lt;li>실제로 공식 가이드 문서 내내 러스트의 특징을 다른 언어의 특징과 거울처럼 대비하며 설명한다.&lt;/li>
&lt;li>파일명 컨벤션은 스네이크 케이스를 사용한다. (그리고 그걸 첫장에 설명한다.)&lt;/li>
&lt;li>rustc와 같은 컴파일 커맨드도 첫장에 알려준다.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">fn&lt;/span> &lt;span style="color:#89b4fa">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89b4fa">println!&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Hello, World!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>다양한 언어를 배워오면서 느끼는건, Hello, World!를 출력하려고 할 때 언어의 특징을 알 수 있다는 것이다. &lt;del>Public static void main(String[] args) &amp;hellip;.&lt;/del>&lt;/li>
&lt;li>러스트는 &lt;code>println!&lt;/code> 매크로를 사용한다. (매크로는 러스트의 특징 중 하나이다, 나중에 자세히 정리가 나온지만 간단하게 설명하면 러스트의 매크로는 러스트의 문법을 확장할 수 있는 기능이다.)&lt;/li>
&lt;/ul>
&lt;h5 id="hello-world-anatomy">Hello World Anatomy&lt;/h5>
&lt;ul>
&lt;li>&lt;code>fn&lt;/code> : 함수를 선언할 때 사용하는 키워드.&lt;/li>
&lt;li>러스트의에서 &lt;code>main&lt;/code>함수의 의미 : 프로그램의 시작점을 나타낸다.(The main function is special: it is always the first code that runs in every executable Rust program.)&lt;/li>
&lt;li>&lt;code>{}&lt;/code> : 블록을 나타낸다. 블록은 코드의 범위를 나타낸다. (블록은 러스트의 다른 부분과 마찬가지로 중괄호로 둘러싸여 있다.)&lt;/li>
&lt;li>&lt;code>println!&lt;/code> : 매크로를 호출하는 방법. (매크로는 러스트의 문법을 확장할 수 있는 기능이다.)&lt;/li>
&lt;li>&lt;code>;&lt;/code> : 문장의 끝을 나타낸다. (러스트는 문장의 끝에 세미콜론을 붙여야 한다, 식의 끝에 세미콜론을 붙이는 것은 문장의 끝을 나타낸다. 이 가이드에서도 문과 식을 구분하는 것이 중요하다.)&lt;/li>
&lt;li>러스트의 들여쓰기는 4칸을 권장한다. (공식 가이드에서는 4칸을 권장하는데.. 왜..?)&lt;/li>
&lt;/ul>
&lt;p>그 외에는 간단한 컴파일 관련 설명이다.&lt;/p></description></item><item><title>The Rust Programming Language</title><link>https://smallzoodev.netlify.app/_wiki/the-rust-programming-language/</link><pubDate>Sun, 31 Mar 2024 15:59:52 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/the-rust-programming-language/</guid><description>&lt;h2 id="러스트-공식-가이드-문서-정리">러스트 공식 가이드 문서 정리&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://doc.rust-lang.org/book/">The Rust Programming Language&lt;/a>&lt;/li>
&lt;li>위의 러스트 공식 가이드 문서를 보고 정리한 내용입니다, 복습을 위해 공식 가이드를 한 번 다시 정리하고 시작하려고 합니다. &lt;del>집합인가&lt;/del>&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>[[Getting-Started]] : 러스트 설치 및 프로젝트 생성에 대한 가이드&lt;/li>
&lt;li>[[Programming-a-Guessing-Game]] : 간단한 숫자 맞추기 게임을 만들어보며 러스트 프로그래밍 기초 문법 및 개념 익히기&lt;/li>
&lt;li>[[Common-Programming-Concepts]] : 러스트 프로그래밍 기초 문법 및 개념&lt;/li>
&lt;li>[[Understanding-Ownership]] : 러스트의 소유권 시스템에 대한 이해
&lt;ul>
&lt;li>[[burrow-checker]] : rust-in-action 내용&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>[[Using-Structs-to-Structure-Related-Data]] : 구조체를 사용하여 관련 데이터 구조화하기&lt;/li>
&lt;li>[[Enums-and-Pattern-Matching]] : 열거형과 패턴 매칭&lt;/li>
&lt;li>[[Managing-Growing-Projects-with-Packages-Crates-and-Modules]] : 패키지, 크레이트, 모듈을 사용하여 프로젝트 확장하기&lt;/li>
&lt;li>[[Common-Collections]] : 컬렉션 사용하기&lt;/li>
&lt;li>[[Error-Handling]] : 에러 처리하기&lt;/li>
&lt;li>[[Funcional-Langauges-Features]] : Iterators and Closures&lt;/li>
&lt;li>[[Smart-Pointers]] : 스마트포인터&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>변수의 수명은 컴파일 시점에서 스코프 내에서 더이상 사용이 되지 않는걸 확인 가능한 마지막 줄까지&lt;/li>
&lt;li>이걸 악용해서 여러개의 가변 참조를 가지는게 약간 안티패턴 같다.&lt;/li>
&lt;/ul></description></item><item><title>Neovim Copilot 관련 설정 이슈</title><link>https://smallzoodev.netlify.app/_wiki/neovim-copilot-config/</link><pubDate>Sun, 31 Mar 2024 14:02:03 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/neovim-copilot-config/</guid><description>&lt;h2 id="neovim-copilot-관련-설정">Neovim Copilot 관련 설정&lt;/h2>
&lt;h3 id="이슈">이슈&lt;/h3>
&lt;ul>
&lt;li>Copilot을 import하고 잘 쓰고 있는데, Vimwiki와 Tab키 충돌이 발생한다.&lt;/li>
&lt;li>Tab키를 누르면, Copilot이 자동완성을 제공하는데, Vimwiki에서는 Tab키를 사용하여 들여쓰기를 한다.&lt;/li>
&lt;li>뭔가 Vimwiki의 탭이 Copilot의 탭보다 우선순위가 높은 것 같다.&lt;/li>
&lt;li>처음에는 Copilot의 설정을 변경하여 해결하려고 했지만 Vimwiki의 설정을 변경하는 것이 더 편할 것 같다.&lt;/li>
&lt;/ul>
&lt;h3 id="해결">해결&lt;/h3>
&lt;ul>
&lt;li>다행히도 Vimwiki Repository에 이슈가 올라와 있었다.&lt;/li>
&lt;li>&lt;a href="https://github.com/vimwiki/vimwiki/issues/1227">Vimwiki Issue&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vim" data-lang="vim">&lt;span style="display:flex;">&lt;span>return {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#39;vimwiki/vimwiki&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> init = &lt;span style="color:#cba6f7">function&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -- ..
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> end,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config = &lt;span style="color:#cba6f7">function&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vim.g.vimwiki_key_mappings = {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> table_mappings = &lt;span style="color:#fab387">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vim.keymap.&lt;span style="color:#cba6f7">set&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;n&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;&amp;lt;leader&amp;gt;nl&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;&amp;lt;Plug&amp;gt;VimwikiNextLink&amp;#39;&lt;/span>, { silent = true }) -- For Tab
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vim.keymap.&lt;span style="color:#cba6f7">set&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#39;n&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;&amp;lt;leader&amp;gt;pl&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;&amp;lt;Plug&amp;gt;VimwikiPrevLink&amp;#39;&lt;/span>, { silent = true }) -- For STab
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> end
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>위와 같이 설정을 변경하면, Tab키를 누르면 들여쓰기가 되고, &lt;code>&amp;lt;leader&amp;gt;nl&lt;/code>을 누르면 다음 링크로 이동한다.&lt;/li>
&lt;li>내 생각으로는 vimwiki_key_mappings 설정만 변경해도 괜찮았어야 하는데, 저부분만 변경시 제대로 동작하지 않았다.&lt;/li>
&lt;li>물론 Tab으로 페이지 내의 링크를 이동하는걸 잘 쓰고 있었지만, &lt;code>&amp;lt;leader&amp;gt;nl&lt;/code>을 쓰는 것도 나쁘지 않아서 적용해봤는데 제대로 동작한다.&lt;/li>
&lt;/ul>
&lt;h3 id="실제-코드-변경">실제 코드 변경&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://github.com/SmallzooDev/nvimConfig/commit/921de2607cd289804f7168d94132debaed3d5101">nvimConfig repo commit hash - 921de26&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span> use({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e3a1">&amp;#34;vimwiki/vimwiki&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#cba6f7">function&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vim.g.vimwiki_conceallevel &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vim.g.vimwiki_global_ext &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vim.g.vimwiki_key_mappings &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> table_mappings &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">0&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vim.keymap.set(&lt;span style="color:#a6e3a1">&amp;#39;n&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;&amp;lt;leader&amp;gt;nl&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;&amp;lt;Plug&amp;gt;VimwikiNextLink&amp;#39;&lt;/span>, { silent &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">true&lt;/span> }) &lt;span style="color:#6c7086;font-style:italic">-- For Tab&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vim.keymap.set(&lt;span style="color:#a6e3a1">&amp;#39;n&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;&amp;lt;leader&amp;gt;pl&amp;#39;&lt;/span>, &lt;span style="color:#a6e3a1">&amp;#39;&amp;lt;Plug&amp;gt;VimwikiPrevLink&amp;#39;&lt;/span>, { silent &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#fab387">true&lt;/span> }) &lt;span style="color:#6c7086;font-style:italic">-- For STab&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> vim.g.vimwiki_list &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;/Users/joonkyu_kang/wiki/SmallzooDevWiki/content/_wiki&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ext &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;.md&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> styntax &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;markdown&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> index &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;home&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;/Users/joonkyu_kang/wiki/private_wiki&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ext &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> &lt;span style="color:#a6e3a1">&amp;#39;.md&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>위와 같이 변경하였다, vimwiki 설정도 plugin 파일로 빼야하는데 귀찮&amp;hellip;&lt;/li>
&lt;/ul></description></item><item><title>ToDoList✅</title><link>https://smallzoodev.netlify.app/_wiki/todolist/</link><pubDate>Sat, 30 Mar 2024 18:11:43 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/todolist/</guid><description>&lt;ul>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 이미지 호스팅 알아보기&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 구글 검색 노출 관련 검색, 테스팅 징행하기&lt;/li>
&lt;li>[v] 빔을 통해서 괄호를 편하게 작성하는 방법에 대한 포스팅 작성하기&lt;/li>
&lt;li>&lt;input checked="" disabled="" type="checkbox"> 회고 문서 작성하기&lt;/li>
&lt;/ul></description></item><item><title>사고싶은 장비 List</title><link>https://smallzoodev.netlify.app/_wiki/%EC%82%AC%EA%B3%A0-%EC%8B%B6%EC%9D%80-%EC%9E%A5%EB%B9%84/</link><pubDate>Sat, 30 Mar 2024 17:02:03 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/%EC%82%AC%EA%B3%A0-%EC%8B%B6%EC%9D%80-%EC%9E%A5%EB%B9%84/</guid><description>&lt;h3 id="모니터">모니터🖥️&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://prod.danawa.com/info/?pcode=17054663">Lg 듀얼업 모니터&lt;/a> : 꼭 사고싶은 모니터, 최종적인 조합은 이것과 피벗용 27인치 모니터로 마무리 하고 싶다.&lt;/li>
&lt;/ul>
&lt;h3 id="키보드">키보드⌨️&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://prod.danawa.com/info/?pcode=13320602&amp;amp;keyword=%ED%95%B4%ED%94%BC%ED%95%B4%ED%82%B9%ED%95%98%EC%9D%B4%EB%B8%8C%EB%A6%AC%EB%93%9C&amp;amp;cate=112782">HHKB 키보드&lt;/a> : 미니배열이 좋으면서도 백틱이 걱정되긴한다. 키 커스텀이 어느정도인지 확인하고 구매할 것 같다&lt;/li>
&lt;/ul></description></item><item><title>개인적인 이야기를 작성할 예정입니다.</title><link>https://smallzoodev.netlify.app/_wiki/private-wiki/</link><pubDate>Sat, 30 Mar 2024 16:10:39 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/private-wiki/</guid><description>&lt;h3 id="inbox-">Inbox 💭&lt;/h3>
&lt;ul>
&lt;li>[[Blog에-대한-생각]]&lt;/li>
&lt;li>[[Interview-From-Jim-Keller]]&lt;/li>
&lt;li>[[블로그-작성-가이드라인]]&lt;/li>
&lt;/ul>
&lt;h3 id="monthly-goal-">Monthly goal 🚀&lt;/h3>
&lt;ul>
&lt;li>[[2024-04]]&lt;/li>
&lt;li>[[2024-05]]&lt;/li>
&lt;/ul>
&lt;h3 id="todolist-">ToDoList ✅&lt;/h3>
&lt;ul>
&lt;li>[[ToDoList]]&lt;/li>
&lt;/ul>
&lt;h3 id="travel-">Travel 🌍&lt;/h3>
&lt;h3 id="about-machines-">About Machines 🧊&lt;/h3>
&lt;ul>
&lt;li>[[사고-싶은-장비]]&lt;/li>
&lt;/ul>
&lt;h3 id="about-settings-">About Settings 🧊&lt;/h3>
&lt;ul>
&lt;li>[[회사컴-세팅]]&lt;/li>
&lt;li>[[New-Vimwiki-Test]]&lt;/li>
&lt;/ul>
&lt;h3 id="chore-">Chore 🧹&lt;/h3>
&lt;ul>
&lt;li>[[이사]]&lt;/li>
&lt;/ul></description></item><item><title>Vim 자주 깜빡하는 커맨드</title><link>https://smallzoodev.netlify.app/_wiki/%EC%9E%90%EC%A3%BC-%EA%B9%8C%EB%A8%B9%EB%8A%94-%EC%BB%A4%EB%A7%A8%EB%93%9C-%EC%A0%95%EB%A6%AC/</link><pubDate>Sat, 30 Mar 2024 15:59:49 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/%EC%9E%90%EC%A3%BC-%EA%B9%8C%EB%A8%B9%EB%8A%94-%EC%BB%A4%EB%A7%A8%EB%93%9C-%EC%A0%95%EB%A6%AC/</guid><description>&lt;h3 id="1일-1커맨드-정리">1일 1커맨드 정리&lt;/h3>
&lt;ul>
&lt;li>&lt;code>^ + b, f&lt;/code> : 한 페이지씩 스크롤&lt;/li>
&lt;li>&lt;code>zz&lt;/code> : 현재 커서가 있는 줄을 화면 중앙으로 이동&lt;/li>
&lt;li>&lt;code>yi(&lt;/code> : 괄호 안에 있는 내용 복사&lt;/li>
&lt;li>&lt;code>vap&lt;/code> : 비주얼모드 한 문단 블록 씌우기&lt;/li>
&lt;/ul>
&lt;h3 id="이동-관련">이동 관련&lt;/h3>
&lt;blockquote>
&lt;p>brace 관련 커맨드를 조금 더 잘쓰면 좋겠다는 생각을 한다.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>개인적으로 vim을 더 잘쓰기 위해서 정리를 잘 해둬야 할 것 같다.&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>&lt;code>^ + b, f&lt;/code>: 한 페이지씩 스크롤&lt;/li>
&lt;li>&lt;code>^ + d, u&lt;/code>: 반 페이지씩 스크롤&lt;/li>
&lt;li>&lt;code>e, E&lt;/code>: 다음 단어의 끝으로, 문자 단위 이동&lt;/li>
&lt;li>&lt;code>w, W&lt;/code>: 다음 단어의 처음으로, 문자 단위 이동&lt;/li>
&lt;li>&lt;code>$&lt;/code>: 줄의 마지막으로 이동&lt;/li>
&lt;li>&lt;code>0&lt;/code>: 줄의 처음으로 이동&lt;/li>
&lt;li>&lt;code>^&lt;/code>: 줄의 처음으로 이동 (공백이 아닌 처음 시작되는 문자)&lt;/li>
&lt;li>&lt;code>Shift + g&lt;/code>: 문서의 마지막으로 이동&lt;/li>
&lt;li>&lt;code>gg, 1g&lt;/code>: 문서의 처음으로 이동 (숫자 라인으로 이동)&lt;/li>
&lt;li>&lt;code>), (&lt;/code>: 다음, 이전 문장의 처음으로 이동&lt;/li>
&lt;li>&lt;code>}, {&lt;/code>: 다음, 이전 문단의 처음으로 이동&lt;/li>
&lt;li>&lt;code>]], [[&lt;/code>: 다음, 이전 구절의 처음으로 이동&lt;/li>
&lt;li>안녕하세요&lt;/li>
&lt;/ul>
&lt;h3 id="vimwiki-관련-커맨드">Vimwiki 관련 커맨드&lt;/h3>
&lt;ul>
&lt;li>&lt;code>Tab&lt;/code> – Find next wiki link&lt;/li>
&lt;li>&lt;code>Shift + Tab&lt;/code> – Find previous wiki link&lt;/li>
&lt;/ul>
&lt;h3 id="split-관련-커맨드">Split 관련 커맨드&lt;/h3>
&lt;ul>
&lt;li>&lt;code>&amp;lt;leader&amp;gt;sv&lt;/code>: 창 수직 분할&lt;/li>
&lt;li>&lt;code>&amp;lt;leader&amp;gt;sh&lt;/code>: 창 수평 분할&lt;/li>
&lt;li>&lt;code>&amp;lt;leader&amp;gt;se&lt;/code>: 창 확장&lt;/li>
&lt;li>&lt;code>&amp;lt;leader&amp;gt;sx&lt;/code>: 창 닫기&lt;/li>
&lt;/ul>
&lt;h3 id="lsp-관련-커맨드">lsp 관련 커맨드&lt;/h3>
&lt;ul>
&lt;li>&lt;code>&amp;lt;leader&amp;gt;gd&lt;/code>: 정의로 이동&lt;/li>
&lt;/ul></description></item><item><title>생활 관련 링크 Archive</title><link>https://smallzoodev.netlify.app/_wiki/life-archive-2025/</link><pubDate>Fri, 29 Mar 2024 22:47:39 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/life-archive-2025/</guid><description>&lt;h1 id="생활-관련-링크-archive">생활 관련 링크 Archive&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://youtu.be/suyTW9kCm88?si=kEoMrASgHFsbdfb6">목 디스크 스트레칭&lt;/a> : 언젠가는 하겠지&amp;hellip;?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.youtube.com/live/N8irahrfZt4?si=rgUmqQC_7G1vsYoR">게임음악 모음&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://youtu.be/G8lvQRALa6s?si=Wzmtaxw9pvQKYA2-">지브리 오케스트라&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>obsidian to 1 (a)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>raycast to opt opt&lt;/p>
&lt;/li>
&lt;li>
&lt;p>chrome to w&lt;/p>
&lt;/li>
&lt;li>
&lt;p>system window cycle to hyper + c ;&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>개발 관련 링크 Archive</title><link>https://smallzoodev.netlify.app/_wiki/dev-archive-2025/</link><pubDate>Fri, 29 Mar 2024 22:46:50 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/dev-archive-2025/</guid><description>&lt;h3 id="개발-관련-링크-archive">개발 관련 링크 Archive&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://news.hada.io/topic?id=19034">나이들어가는 프로그래머&lt;/a> : 63세의 나이에도 더 일을 하고싶은 마음이 부러워서, 나도 그러고 싶은 사람으로써 이미 그런사람을 보는 기분&lt;/li>
&lt;li>&lt;a href="https://news.hada.io/topic?id=19081">업계에서 10년 있은 뒤, 마음이 바뀐 소프트웨어 개발 토픽들&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://news.hada.io/topic?id=19165">shunpo&lt;/a> : directory 북마크 cli app, yazi와는 다른 맥락으로 유용할듯&lt;/li>
&lt;li>&lt;a href="https://github.com/ibraheemdev/modern-unix?tab=readme-ov-file">modern unix&lt;/a> : 유용한 modern unix cli tool을 소개하는 레포, 주기적으로 업데이트 된다.&lt;/li>
&lt;li>&lt;a href="https://news.hada.io/topic?id=19269">2024년 가장 조회수 높은 소프트 엔지니어링 발표들&lt;/a> : 재미있는 내용들이 많은 것 같다.&lt;/li>
&lt;/ul></description></item><item><title>Hugo, Vimwiki로 블로그 정착하기</title><link>https://smallzoodev.netlify.app/_wiki/%EC%83%88%EB%A1%9C%EC%9A%B4-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%A0%95%EC%B0%A9%ED%95%98%EA%B8%B0/</link><pubDate>Fri, 29 Mar 2024 21:13:43 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/%EC%83%88%EB%A1%9C%EC%9A%B4-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%A0%95%EC%B0%A9%ED%95%98%EA%B8%B0/</guid><description>&lt;h3 id="01-intro---블로그를-다시-시작하려고-보니-">01. Intro - 블로그를 다시 시작하려고 보니.. 👋🏼&lt;/h3>
&lt;ol>
&lt;li>올해 초 이직에 대한 열망이 매우 차오를 때 부터 블로그를 다시 시작해야지 하는 생각이 계속 들어왔다.&lt;/li>
&lt;li>누구나 그렇겠지만, 회사와 퇴근 후에 진행하는 멘토링/튜터링이 바빴기 때문에..&lt;/li>
&lt;li>튜터링 혹은 멘토링을 하는 내내 블로그와 TIL을 권해놓고 나는 정작 이력서를 쓰면서 나에 대한소개나 포트 폴리오를 쓰기도 참 애매하구나 싶었다.&lt;/li>
&lt;li>그래서 내가 일하면서 해왔던 트러블슈팅들이나, 자라났던 생각들을 잘 기록해 놓고 싶어졌다.&lt;/li>
&lt;li>지금까지의 기록은 계획을 가지지 않고 해왔기 때문에살리는건 시작도 전에 포기했다!&lt;/li>
&lt;li>Vimwiki Private 디렉토리에 우후죽순으로 작성되어 있고. 아마 해당 기록을 올리면 높은 확률로 고소를 당할 것 같다 &lt;a href="https://ko.wikipedia.org/wiki/%EA%B5%AC%EC%83%81%EA%B6%8C">구상권&lt;/a>&lt;/li>
&lt;li>무튼 늦었지만 다시 시작해보려고 마음을 먹었다, 지나간일은 회고가 되고 하고있는 것들이나 배우는 것들은 TIL 비슷한 뭔가가 되겠지&lt;/li>
&lt;li>그래서 블로그를 시작하기로 마음먹고 최근 2주동안 겪은 시행착오에 대해서 이야기 해보려고 한다.&lt;/li>
&lt;/ol>
&lt;h3 id="02-wannabe---johngrib과-수많은-위키형-블로그">02. Wannabe - Johngrib과 수많은 위키형 블로그🚀&lt;/h3>
&lt;p>앞서 이야기 한 것처럼 원래 Johngrib님의 블로그를 보고 나의 NeoVim config에 나름 적당히 잘 세팅해놓은 Vimwiki를 사용하고 있었다.&lt;/p></description></item><item><title>Index 🧊️</title><link>https://smallzoodev.netlify.app/_wiki/home/</link><pubDate>Fri, 29 Mar 2024 09:21:07 +0900</pubDate><guid>https://smallzoodev.netlify.app/_wiki/home/</guid><description>&lt;hr>
&lt;ul>
&lt;li>Contact : &lt;a href="mailto:joongyue@gmail.com">Email 📧&lt;/a>&lt;/li>
&lt;li>Github : &lt;a href="https://github.com/SmallzooDev">SmallzooDev 🐦‍⬛&lt;/a>&lt;/li>
&lt;li>Postings Tag의 글은 조금 더 읽기 쉽게 작성하려고 노력하고 있습니다 : &lt;a href="https://smallzoodev.netlify.app/tags/Postings/">#Postings 🗞️&lt;/a>&lt;/li>
&lt;li>This wiki inspired by : &lt;a href="https://johngrib.github.io/wiki/my-wiki/">기계인간 Johngrib 💭&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;blockquote>
&lt;p>큰 문제를 작은 문제 여러개로 볼 수 있는 지혜와, 가장 작은 문제 하나를 시작할 만큼의 실행력을 갖기를&lt;/p>&lt;/blockquote>
&lt;h2 id="home-">Home 🏠&lt;/h2>
&lt;ul>
&lt;li>[[Daily-Log-2025]] : 2025 시작!&lt;/li>
&lt;li>[[Dev-Archive-2025]] : 개발관련 유용한 정보, 링크 모음&lt;/li>
&lt;li>[[Life-Archive-2025]] : 개발 외적인 유용한 정보, 링크 모음&lt;/li>
&lt;/ul>
&lt;h2 id="rust-">Rust 🦀&lt;/h2>
&lt;ul>
&lt;li>[[Rust-Index]]&lt;/li>
&lt;/ul>
&lt;h2 id="javakotlin-">Java/Kotlin 🏝️&lt;/h2>
&lt;ul>
&lt;li>[[Java-Kotlin-Index]]&lt;/li>
&lt;/ul>
&lt;h2 id="cpp-">Cpp 🐋&lt;/h2>
&lt;ul>
&lt;li>[[Cpp-Index]]&lt;/li>
&lt;/ul>
&lt;h2 id="ps-">PS ⚠️&lt;/h2>
&lt;ul>
&lt;li>[[Competitive-Programming-Index]]&lt;/li>
&lt;/ul>
&lt;h2 id="backend-">Backend 💰&lt;/h2>
&lt;ul>
&lt;li>[[Backend-Etc-Index]]&lt;/li>
&lt;/ul>
&lt;h2 id="database-">DataBase 🗄️&lt;/h2>
&lt;ul>
&lt;li>[[Database-Index]]&lt;/li>
&lt;/ul>
&lt;h2 id="computer-science-">Computer Science 🦉&lt;/h2>
&lt;ul>
&lt;li>[[Computer-Science-Index]]&lt;/li>
&lt;/ul>
&lt;h2 id="vim-">Vim 🦅&lt;/h2>
&lt;ul>
&lt;li>[[Vim-Index]]&lt;/li>
&lt;/ul>
&lt;h2 id="archived-or-etc-">Archived or ETC 📘&lt;/h2>
&lt;ul>
&lt;li>[[Archived-Etc-Pages]]&lt;/li>
&lt;/ul>
&lt;h2 id="postings-">Postings 🌳&lt;/h2>
&lt;ul>
&lt;li>[[새로운-블로그-정착하기]] : 블로그 개발기&lt;/li>
&lt;li>[[Neovim-Migration-하기]]&lt;/li>
&lt;li>[[Interview-From-Jim-Keller]] : ai와 관련된 고민중에 보게된 인터뷰 (ai와 관련은 별로 없다)&lt;/li>
&lt;li>[[Vibe-Coding]]&lt;/li>
&lt;li>[[redis-handshake-for-replicas]] : 레플리카(슬레이브) 등록을 위한 HandShake중 클라이언트를 식별하는 이슈&lt;/li>
&lt;li>[[Redis-Stream-Issue]]&lt;/li>
&lt;li>[[rust-mpsc]] : rust tokio의 mpsc 기능 이해하기&lt;/li>
&lt;li>[[난개발된-레디스를-이벤트루프-기반으로-리팩토링하기]] : 레디스 클론코딩중 발생한 이슈 트러블슈팅&lt;/li>
&lt;li>[[vimwiki-obsidian-같이-사용하기]] : 빔위키로 관리하던 블로그를 옵시디언 볼트로도 관리하도록 설정하기&lt;/li>
&lt;li>[[전시영역-백엔드-테스트코드-도입기]] : 전시영역 백엔드 레거시 프로젝트에 테스트코드를 도입하면서 했던 고민들 정리&lt;/li>
&lt;li>[[레거시-프로젝트의-로깅-개선하기]] : 레거시 프로젝트의 로깅 개선하기&lt;/li>
&lt;li>[[카프카를-헥사고날하게-클론코딩-해보기]] : 러스트로 카프카를 헥사고날하게 클론코딩 해보기&lt;/li>
&lt;li>[[결제-서비스-리뉴얼하기]] : 10몇년된 서비스의 결제 전면 리뉴얼&lt;/li>
&lt;li>[[신규-프로젝트에서-본인인증-연동-구현하기]]: postMessage를 이용해서 조금더 정돈된 방식으로 인증창 관리하기&lt;/li>
&lt;li>[[Repair-Center]] : 분산환경에서 결제 구현하기&lt;/li>
&lt;/ul></description></item><item><title/><link>https://smallzoodev.netlify.app/_wiki/kotlin%EC%9D%B4-%EC%A2%8B%EC%A7%80%EB%A7%8E%EC%9D%80-%EC%95%8A%EC%9D%80-%EC%9D%B4%EC%9C%A0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://smallzoodev.netlify.app/_wiki/kotlin%EC%9D%B4-%EC%A2%8B%EC%A7%80%EB%A7%8E%EC%9D%80-%EC%95%8A%EC%9D%80-%EC%9D%B4%EC%9C%A0/</guid><description/></item><item><title>About Me🧊️</title><link>https://smallzoodev.netlify.app/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://smallzoodev.netlify.app/about/</guid><description>백엔드 개발자로 일하고 있는 강준규 입니다!</description></item><item><title>Search</title><link>https://smallzoodev.netlify.app/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://smallzoodev.netlify.app/search/</guid><description/></item></channel></rss>